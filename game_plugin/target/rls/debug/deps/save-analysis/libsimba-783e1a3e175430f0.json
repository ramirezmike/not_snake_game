{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1","program":"/home/mramirez/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","simba","--edition=2018","/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"default\"","--cfg","feature=\"std\"","-C","metadata=783e1a3e175430f0","-C","extra-filename=-783e1a3e175430f0","--out-dir","/home/mramirez/code/projects/games/bug_game/target/rls/debug/deps","-L","dependency=/home/mramirez/code/projects/games/bug_game/target/rls/debug/deps","--extern","approx=/home/mramirez/code/projects/games/bug_game/target/rls/debug/deps/libapprox-06a7d007d1edc59c.rmeta","--extern","num_complex=/home/mramirez/code/projects/games/bug_game/target/rls/debug/deps/libnum_complex-56aaa84bea413198.rmeta","--extern","num_traits=/home/mramirez/code/projects/games/bug_game/target/rls/debug/deps/libnum_traits-ea482ab16ed9c760.rmeta","--extern","paste=/home/mramirez/code/projects/games/bug_game/target/rls/debug/deps/libpaste-00233cab4e8b72fc.so","--cap-lints","allow","--error-format=json","--sysroot","/home/mramirez/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu"],"output":"/home/mramirez/code/projects/games/bug_game/target/rls/debug/deps/libsimba-783e1a3e175430f0.rmeta"},"prelude":{"crate_id":{"name":"simba","disambiguator":[118766226543362521,15110569108415853282]},"crate_root":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src","external_crates":[{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[397594041871667817,11704163070354659695]}},{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[17044353007700780372,2918200604221815240]}},{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[15333840167806743833,9889193056877993824]}},{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[4550415707075219492,6623162258675921486]}},{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[8289379911494056514,13856099756999900329]}},{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[10514502805115346386,576110030083780649]}},{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[9878185313679130060,1975285035821961205]}},{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[4010603182529655334,7152219772350788052]}},{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[1807637986128902209,18379128151258407121]}},{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[11140927657351163542,6267109750485550558]}},{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[13809795498598848728,13320395723520943315]}},{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/lib.rs","num":12,"id":{"name":"std_detect","disambiguator":[13869841232067652907,9875669357213642224]}},{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/lib.rs","num":13,"id":{"name":"addr2line","disambiguator":[15533050656730733495,14669839968799848603]}},{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/lib.rs","num":14,"id":{"name":"gimli","disambiguator":[14371692877540073659,8181723439448527964]}},{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/lib.rs","num":15,"id":{"name":"object","disambiguator":[639541300699627395,1995254029228069844]}},{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/lib.rs","num":16,"id":{"name":"miniz_oxide","disambiguator":[12482123824895737424,11765111494567609733]}},{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/lib.rs","num":17,"id":{"name":"adler","disambiguator":[1169880241773671279,8605314106566979368]}},{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/lib.rs","num":18,"id":{"name":"panic_unwind","disambiguator":[5016943468141875609,13494347935157563341]}},{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/lib.rs","num":19,"id":{"name":"num_traits","disambiguator":[252308066493949436,2163249747488123429]}},{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/real.rs","num":20,"id":{"name":"approx","disambiguator":[8399984604986141841,6775941998133769338]}},{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/subset.rs","num":21,"id":{"name":"num_complex","disambiguator":[757554246556960464,5673683946076055148]}},{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/complex.rs","num":22,"id":{"name":"paste","disambiguator":[11083907628798871922,4855005286588671960]}}],"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/lib.rs","byte_start":0,"byte_end":2030,"line_start":1,"line_end":42,"column_start":1,"column_end":14}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":134},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/mod.rs","byte_start":2107,"byte_end":2119,"line_start":3,"line_end":3,"column_start":24,"column_end":36},"alias_span":null,"name":"ComplexField","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":230},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/mod.rs","byte_start":2143,"byte_end":2152,"line_start":4,"line_end":4,"column_start":23,"column_end":32},"alias_span":null,"name":"ClosedAdd","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":236},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/mod.rs","byte_start":2154,"byte_end":2163,"line_start":4,"line_end":4,"column_start":34,"column_end":43},"alias_span":null,"name":"ClosedDiv","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":234},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/mod.rs","byte_start":2165,"byte_end":2174,"line_start":4,"line_end":4,"column_start":45,"column_end":54},"alias_span":null,"name":"ClosedMul","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":238},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/mod.rs","byte_start":2176,"byte_end":2185,"line_start":4,"line_end":4,"column_start":56,"column_end":65},"alias_span":null,"name":"ClosedNeg","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":232},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/mod.rs","byte_start":2187,"byte_end":2196,"line_start":4,"line_end":4,"column_start":67,"column_end":76},"alias_span":null,"name":"ClosedSub","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":253},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/mod.rs","byte_start":2198,"byte_end":2203,"line_start":4,"line_end":4,"column_start":78,"column_end":83},"alias_span":null,"name":"Field","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":62},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/mod.rs","byte_start":2303,"byte_end":2312,"line_start":7,"line_end":7,"column_start":21,"column_end":30},"alias_span":null,"name":"RealField","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":264},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/mod.rs","byte_start":2337,"byte_end":2345,"line_start":8,"line_end":8,"column_start":24,"column_end":32},"alias_span":null,"name":"SubsetOf","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":270},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/mod.rs","byte_start":2347,"byte_end":2357,"line_start":8,"line_end":8,"column_start":34,"column_end":44},"alias_span":null,"name":"SupersetOf","value":"","parent":{"krate":0,"index":4}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/mod.rs","byte_start":53414,"byte_end":53415,"line_start":3,"line_end":3,"column_start":31,"column_end":32},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":291}},{"kind":"Use","ref_id":{"krate":0,"index":572},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/mod.rs","byte_start":53509,"byte_end":53517,"line_start":6,"line_end":6,"column_start":26,"column_end":34},"alias_span":null,"name":"SimdBool","value":"","parent":{"krate":0,"index":291}},{"kind":"Use","ref_id":{"krate":0,"index":667},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/mod.rs","byte_start":53547,"byte_end":53563,"line_start":7,"line_end":7,"column_start":29,"column_end":45},"alias_span":null,"name":"SimdComplexField","value":"","parent":{"krate":0,"index":291}},{"kind":"Use","ref_id":{"krate":0,"index":733},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/mod.rs","byte_start":53592,"byte_end":53602,"line_start":8,"line_end":8,"column_start":28,"column_end":38},"alias_span":null,"name":"SimdOption","value":"","parent":{"krate":0,"index":291}},{"kind":"Use","ref_id":{"krate":0,"index":750},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/mod.rs","byte_start":53636,"byte_end":53650,"line_start":9,"line_end":9,"column_start":33,"column_end":47},"alias_span":null,"name":"SimdPartialOrd","value":"","parent":{"krate":0,"index":291}},{"kind":"Use","ref_id":{"krate":0,"index":789},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/mod.rs","byte_start":53677,"byte_end":53690,"line_start":10,"line_end":10,"column_start":26,"column_end":39},"alias_span":null,"name":"SimdRealField","value":"","parent":{"krate":0,"index":291}},{"kind":"Use","ref_id":{"krate":0,"index":835},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/mod.rs","byte_start":53719,"byte_end":53729,"line_start":11,"line_end":11,"column_start":28,"column_end":38},"alias_span":null,"name":"SimdSigned","value":"","parent":{"krate":0,"index":291}},{"kind":"Use","ref_id":{"krate":0,"index":866},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/mod.rs","byte_start":53758,"byte_end":53776,"line_start":12,"line_end":12,"column_start":28,"column_end":46},"alias_span":null,"name":"PrimitiveSimdValue","value":"","parent":{"krate":0,"index":291}},{"kind":"Use","ref_id":{"krate":0,"index":852},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/mod.rs","byte_start":53778,"byte_end":53787,"line_start":12,"line_end":12,"column_start":48,"column_end":57},"alias_span":null,"name":"SimdValue","value":"","parent":{"krate":0,"index":291}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/lib.rs","byte_start":0,"byte_end":2030,"line_start":1,"line_end":42,"column_start":1,"column_end":14},"name":"","qualname":"::","value":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":291}],"decl_id":null,"docs":"__Simba__ is a crate defining a set of trait for writing code that can be generic with regard to the\nnumber of lanes of the numeric input value. Those traits are implemented by `f32`, `u32`, `i16`,\n`bool` as well as SIMD types like `f32x4, u32x8, i16x2`, etc.","sig":null,"attributes":[{"value":"*\n__Simba__ is a crate defining a set of trait for writing code that can be generic with regard to the\nnumber of lanes of the numeric input value. Those traits are implemented by `f32`, `u32`, `i16`,\n`bool` as well as SIMD types like `f32x4, u32x8, i16x2`, etc.\n\nOne example of use-case applied by the [nalgebra crate](https://nalgebra.org) is to define generic methods\nlike vector normalization that will work for `Vector3<f32>` as well as `Vector3<f32x4>`.\n\nThis makes it easier leverage the power of [SIMD Array-of-Struct-of-Array (AoSoA)](https://www.rustsim.org/blog/2020/03/23/simd-aosoa-in-nalgebra/)\nwith less code duplication.\n\n\n## Cargo features\n\nTwo cargo features can be optionally enabled:\n- With the __`packed_simd`__ feature enabled, the `simba::simd` module will export several SIMD types like `f32x2`,\n `f64x4`, `i32i8`, `u16i16`, etc. There types are wrappers around the SIMD types from the [__packed_simd__\n crate](https://docs.rs/packed_simd). This requires a nightly compiler.\n- With the __`wide`__ feature enabled, the `simba::simd` module will export the `WideF32x4` and `WideBoolF32x4`\n  types. They types ure wrapper around the `wide::f32x4` type from the [__wide__ crate](https://docs.rs/wide).\n  This will work with both a stable or nightly compiler.\n\nIf none of those features are enabled, __simba__ will still define all the scalar and SIMD traits.\nHowever, the SIMD traits won't be implemented for any SIMD types. Therefore it is recommended to:\n- Use the `packed_simd` feature if you want more features, and can afford to use a nightly compiler.\n- Use the `wide` feature if you only need 4-lanes 32-bits floats, and can't afford to use a nightly compiler.\n*/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/lib.rs","byte_start":0,"byte_end":1691,"line_start":1,"line_end":27,"column_start":1,"column_end":3}},{"value":"deny(non_camel_case_types)","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/lib.rs","byte_start":1693,"byte_end":1723,"line_start":29,"line_end":29,"column_start":1,"column_end":31}},{"value":"deny(unused_parens)","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/lib.rs","byte_start":1724,"byte_end":1747,"line_start":30,"line_end":30,"column_start":1,"column_end":24}},{"value":"deny(non_upper_case_globals)","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/lib.rs","byte_start":1748,"byte_end":1780,"line_start":31,"line_end":31,"column_start":1,"column_end":33}},{"value":"deny(unused_results)","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/lib.rs","byte_start":1781,"byte_end":1805,"line_start":32,"line_end":32,"column_start":1,"column_end":25}},{"value":"deny(missing_docs)","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/lib.rs","byte_start":1806,"byte_end":1828,"line_start":33,"line_end":33,"column_start":1,"column_end":23}}]},{"kind":"Mod","id":{"krate":0,"index":4},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"scalar","qualname":"::scalar","value":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/mod.rs","parent":null,"children":[{"krate":0,"index":5},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":12},{"krate":0,"index":15},{"krate":0,"index":18},{"krate":0,"index":21},{"krate":0,"index":24},{"krate":0,"index":27},{"krate":0,"index":30},{"krate":0,"index":31},{"krate":0,"index":34},{"krate":0,"index":37},{"krate":0,"index":86},{"krate":0,"index":192},{"krate":0,"index":257}],"decl_id":null,"docs":" Traits implemented by scalar, non-SIMD, types.\n","sig":null,"attributes":[{"value":"macro_use","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/lib.rs","byte_start":1988,"byte_end":2000,"line_start":40,"line_end":40,"column_start":1,"column_end":13}},{"value":"/ Traits implemented by scalar, non-SIMD, types.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/mod.rs","byte_start":2032,"byte_end":2082,"line_start":1,"line_end":1,"column_start":1,"column_end":51}}]},{"kind":"Trait","id":{"krate":0,"index":62},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/real.rs","byte_start":2817,"byte_end":2826,"line_start":15,"line_end":15,"column_start":11,"column_end":20},"name":"RealField","qualname":"::scalar::real::RealField","value":"RealField: ComplexField<RealField = Self> + RelativeEq<Epsilon = Self> + UlpsEq<Epsilon =\nSelf> + Signed + Bounded + PartialOrd","parent":null,"children":[{"krate":0,"index":63},{"krate":0,"index":64},{"krate":0,"index":65},{"krate":0,"index":66},{"krate":0,"index":67},{"krate":0,"index":68},{"krate":0,"index":69},{"krate":0,"index":70},{"krate":0,"index":71},{"krate":0,"index":72},{"krate":0,"index":73},{"krate":0,"index":74},{"krate":0,"index":75},{"krate":0,"index":76},{"krate":0,"index":77},{"krate":0,"index":78},{"krate":0,"index":79},{"krate":0,"index":80},{"krate":0,"index":81},{"krate":0,"index":82},{"krate":0,"index":83},{"krate":0,"index":84}],"decl_id":null,"docs":" Trait shared by all reals.\n","sig":null,"attributes":[{"value":"/ Trait shared by all reals.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/real.rs","byte_start":2753,"byte_end":2783,"line_start":13,"line_end":13,"column_start":1,"column_end":31}},{"value":"allow(missing_docs)","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/real.rs","byte_start":2784,"byte_end":2806,"line_start":14,"line_end":14,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":63},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/real.rs","byte_start":3028,"byte_end":3044,"line_start":24,"line_end":24,"column_start":8,"column_end":24},"name":"is_sign_positive","qualname":"::scalar::real::RealField::is_sign_positive","value":"pub fn is_sign_positive(Self) -> bool","parent":{"krate":0,"index":62},"children":[],"decl_id":null,"docs":" Is the sign of this real number positive?\n","sig":null,"attributes":[{"value":"/ Is the sign of this real number positive?","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/real.rs","byte_start":2975,"byte_end":3020,"line_start":23,"line_end":23,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":64},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/real.rs","byte_start":3117,"byte_end":3133,"line_start":26,"line_end":26,"column_start":8,"column_end":24},"name":"is_sign_negative","qualname":"::scalar::real::RealField::is_sign_negative","value":"pub fn is_sign_negative(Self) -> bool","parent":{"krate":0,"index":62},"children":[],"decl_id":null,"docs":" Is the sign of this real number negative?\n","sig":null,"attributes":[{"value":"/ Is the sign of this real number negative?","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/real.rs","byte_start":3064,"byte_end":3109,"line_start":25,"line_end":25,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":65},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/real.rs","byte_start":3356,"byte_end":3364,"line_start":31,"line_end":31,"column_start":8,"column_end":16},"name":"copysign","qualname":"::scalar::real::RealField::copysign","value":"pub fn copysign(Self, Self) -> Self","parent":{"krate":0,"index":62},"children":[],"decl_id":null,"docs":" Copies the sign of `self` to `to`.","sig":null,"attributes":[{"value":"/ Copies the sign of `self` to `to`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/real.rs","byte_start":3153,"byte_end":3191,"line_start":27,"line_end":27,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/real.rs","byte_start":3196,"byte_end":3199,"line_start":28,"line_end":28,"column_start":5,"column_end":8}},{"value":"/ - Returns `to.simd_abs()` if `self` is positive or positive-zero.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/real.rs","byte_start":3204,"byte_end":3273,"line_start":29,"line_end":29,"column_start":5,"column_end":74}},{"value":"/ - Returns `-to.simd_abs()` if `self` is negative or negative-zero.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/real.rs","byte_start":3278,"byte_end":3348,"line_start":30,"line_end":30,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":66},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/real.rs","byte_start":3398,"byte_end":3401,"line_start":33,"line_end":33,"column_start":8,"column_end":11},"name":"max","qualname":"::scalar::real::RealField::max","value":"pub fn max(Self, Self) -> Self","parent":{"krate":0,"index":62},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":67},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/real.rs","byte_start":3437,"byte_end":3440,"line_start":34,"line_end":34,"column_start":8,"column_end":11},"name":"min","qualname":"::scalar::real::RealField::min","value":"pub fn min(Self, Self) -> Self","parent":{"krate":0,"index":62},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":68},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/real.rs","byte_start":3476,"byte_end":3481,"line_start":35,"line_end":35,"column_start":8,"column_end":13},"name":"clamp","qualname":"::scalar::real::RealField::clamp","value":"pub fn clamp(Self, Self, Self) -> Self","parent":{"krate":0,"index":62},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":69},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/real.rs","byte_start":3526,"byte_end":3531,"line_start":36,"line_end":36,"column_start":8,"column_end":13},"name":"atan2","qualname":"::scalar::real::RealField::atan2","value":"pub fn atan2(Self, Self) -> Self","parent":{"krate":0,"index":62},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":70},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/real.rs","byte_start":3568,"byte_end":3570,"line_start":38,"line_end":38,"column_start":8,"column_end":10},"name":"pi","qualname":"::scalar::real::RealField::pi","value":"pub fn pi() -> Self","parent":{"krate":0,"index":62},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":71},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/real.rs","byte_start":3589,"byte_end":3595,"line_start":39,"line_end":39,"column_start":8,"column_end":14},"name":"two_pi","qualname":"::scalar::real::RealField::two_pi","value":"pub fn two_pi() -> Self","parent":{"krate":0,"index":62},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":72},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/real.rs","byte_start":3614,"byte_end":3623,"line_start":40,"line_end":40,"column_start":8,"column_end":17},"name":"frac_pi_2","qualname":"::scalar::real::RealField::frac_pi_2","value":"pub fn frac_pi_2() -> Self","parent":{"krate":0,"index":62},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":73},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/real.rs","byte_start":3642,"byte_end":3651,"line_start":41,"line_end":41,"column_start":8,"column_end":17},"name":"frac_pi_3","qualname":"::scalar::real::RealField::frac_pi_3","value":"pub fn frac_pi_3() -> Self","parent":{"krate":0,"index":62},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":74},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/real.rs","byte_start":3670,"byte_end":3679,"line_start":42,"line_end":42,"column_start":8,"column_end":17},"name":"frac_pi_4","qualname":"::scalar::real::RealField::frac_pi_4","value":"pub fn frac_pi_4() -> Self","parent":{"krate":0,"index":62},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":75},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/real.rs","byte_start":3698,"byte_end":3707,"line_start":43,"line_end":43,"column_start":8,"column_end":17},"name":"frac_pi_6","qualname":"::scalar::real::RealField::frac_pi_6","value":"pub fn frac_pi_6() -> Self","parent":{"krate":0,"index":62},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":76},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/real.rs","byte_start":3726,"byte_end":3735,"line_start":44,"line_end":44,"column_start":8,"column_end":17},"name":"frac_pi_8","qualname":"::scalar::real::RealField::frac_pi_8","value":"pub fn frac_pi_8() -> Self","parent":{"krate":0,"index":62},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":77},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/real.rs","byte_start":3754,"byte_end":3763,"line_start":45,"line_end":45,"column_start":8,"column_end":17},"name":"frac_1_pi","qualname":"::scalar::real::RealField::frac_1_pi","value":"pub fn frac_1_pi() -> Self","parent":{"krate":0,"index":62},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":78},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/real.rs","byte_start":3782,"byte_end":3791,"line_start":46,"line_end":46,"column_start":8,"column_end":17},"name":"frac_2_pi","qualname":"::scalar::real::RealField::frac_2_pi","value":"pub fn frac_2_pi() -> Self","parent":{"krate":0,"index":62},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":79},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/real.rs","byte_start":3810,"byte_end":3824,"line_start":47,"line_end":47,"column_start":8,"column_end":22},"name":"frac_2_sqrt_pi","qualname":"::scalar::real::RealField::frac_2_sqrt_pi","value":"pub fn frac_2_sqrt_pi() -> Self","parent":{"krate":0,"index":62},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":80},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/real.rs","byte_start":3844,"byte_end":3845,"line_start":49,"line_end":49,"column_start":8,"column_end":9},"name":"e","qualname":"::scalar::real::RealField::e","value":"pub fn e() -> Self","parent":{"krate":0,"index":62},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":81},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/real.rs","byte_start":3864,"byte_end":3870,"line_start":50,"line_end":50,"column_start":8,"column_end":14},"name":"log2_e","qualname":"::scalar::real::RealField::log2_e","value":"pub fn log2_e() -> Self","parent":{"krate":0,"index":62},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":82},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/real.rs","byte_start":3889,"byte_end":3896,"line_start":51,"line_end":51,"column_start":8,"column_end":15},"name":"log10_e","qualname":"::scalar::real::RealField::log10_e","value":"pub fn log10_e() -> Self","parent":{"krate":0,"index":62},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":83},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/real.rs","byte_start":3915,"byte_end":3919,"line_start":52,"line_end":52,"column_start":8,"column_end":12},"name":"ln_2","qualname":"::scalar::real::RealField::ln_2","value":"pub fn ln_2() -> Self","parent":{"krate":0,"index":62},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":84},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/real.rs","byte_start":3938,"byte_end":3943,"line_start":53,"line_end":53,"column_start":8,"column_end":13},"name":"ln_10","qualname":"::scalar::real::RealField::ln_10","value":"pub fn ln_10() -> Self","parent":{"krate":0,"index":62},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":134},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/complex.rs","byte_start":14401,"byte_end":14413,"line_start":162,"line_end":162,"column_start":11,"column_end":23},"name":"ComplexField","qualname":"::scalar::complex::ComplexField","value":"ComplexField: SubsetOf<Self> + SupersetOf<f64> + Field<Element = Self, SimdBool = Self> +\nCopy + Neg<Output = Self> + Send + Sync + Any + 'static + Debug +\nFromPrimitive + Display","parent":null,"children":[{"krate":0,"index":135},{"krate":0,"index":927},{"krate":0,"index":928},{"krate":0,"index":929},{"krate":0,"index":930},{"krate":0,"index":931},{"krate":0,"index":932},{"krate":0,"index":933},{"krate":0,"index":934},{"krate":0,"index":935},{"krate":0,"index":936},{"krate":0,"index":937},{"krate":0,"index":938},{"krate":0,"index":939},{"krate":0,"index":940},{"krate":0,"index":941},{"krate":0,"index":942},{"krate":0,"index":943},{"krate":0,"index":944},{"krate":0,"index":945},{"krate":0,"index":946},{"krate":0,"index":947},{"krate":0,"index":948},{"krate":0,"index":949},{"krate":0,"index":950},{"krate":0,"index":951},{"krate":0,"index":952},{"krate":0,"index":953},{"krate":0,"index":954},{"krate":0,"index":955},{"krate":0,"index":956},{"krate":0,"index":957},{"krate":0,"index":958},{"krate":0,"index":959},{"krate":0,"index":960},{"krate":0,"index":961},{"krate":0,"index":962},{"krate":0,"index":963},{"krate":0,"index":964},{"krate":0,"index":965},{"krate":0,"index":966},{"krate":0,"index":967},{"krate":0,"index":968},{"krate":0,"index":969},{"krate":0,"index":970},{"krate":0,"index":971},{"krate":0,"index":972},{"krate":0,"index":973},{"krate":0,"index":974},{"krate":0,"index":975},{"krate":0,"index":976},{"krate":0,"index":977},{"krate":0,"index":978},{"krate":0,"index":979},{"krate":0,"index":136},{"krate":0,"index":137}],"decl_id":null,"docs":" Trait shared by all complex fields and its subfields (like real numbers).","sig":null,"attributes":[{"value":"/ Trait shared by all complex fields and its subfields (like real numbers).","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/complex.rs","byte_start":13919,"byte_end":13996,"line_start":155,"line_end":155,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/complex.rs","byte_start":13997,"byte_end":14000,"line_start":156,"line_end":156,"column_start":1,"column_end":4}},{"value":"/ Complex numbers are equipped with functions that are commonly used on complex numbers and reals.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/complex.rs","byte_start":14001,"byte_end":14101,"line_start":157,"line_end":157,"column_start":1,"column_end":101}},{"value":"/ The results of those functions only have to be approximately equal to the actual theoretical values.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/complex.rs","byte_start":14102,"byte_end":14206,"line_start":158,"line_end":158,"column_start":1,"column_end":105}},{"value":"allow(missing_docs)","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/complex.rs","byte_start":14368,"byte_end":14390,"line_start":161,"line_end":161,"column_start":1,"column_end":23}}]},{"kind":"Type","id":{"krate":0,"index":135},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/complex.rs","byte_start":14688,"byte_end":14697,"line_start":178,"line_end":178,"column_start":10,"column_end":19},"name":"RealField","qualname":"::scalar::complex::ComplexField::RealField","value":"type RealField: RealField;","parent":{"krate":0,"index":134},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":136},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/complex.rs","byte_start":14757,"byte_end":14766,"line_start":181,"line_end":181,"column_start":8,"column_end":17},"name":"is_finite","qualname":"::scalar::complex::ComplexField::is_finite","value":"pub fn is_finite(&Self) -> bool","parent":{"krate":0,"index":134},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":137},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/complex.rs","byte_start":14790,"byte_end":14798,"line_start":182,"line_end":182,"column_start":8,"column_end":16},"name":"try_sqrt","qualname":"::scalar::complex::ComplexField::try_sqrt","value":"pub fn try_sqrt(Self) -> Option<Self>","parent":{"krate":0,"index":134},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":230},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/field.rs","byte_start":44134,"byte_end":44143,"line_start":6,"line_end":6,"column_start":11,"column_end":20},"name":"ClosedAdd","qualname":"::scalar::field::ClosedAdd","value":"ClosedAdd<Right = Self>: Sized + Add<Right, Output = Self> + AddAssign<Right>","parent":null,"children":[],"decl_id":null,"docs":" Trait __alias__ for `Add` and `AddAssign` with result of type `Self`.\n","sig":null,"attributes":[{"value":"/ Trait __alias__ for `Add` and `AddAssign` with result of type `Self`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/field.rs","byte_start":44050,"byte_end":44123,"line_start":5,"line_end":5,"column_start":1,"column_end":74}}]},{"kind":"Trait","id":{"krate":0,"index":232},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/field.rs","byte_start":44300,"byte_end":44309,"line_start":9,"line_end":9,"column_start":11,"column_end":20},"name":"ClosedSub","qualname":"::scalar::field::ClosedSub","value":"ClosedSub<Right = Self>: Sized + Sub<Right, Output = Self> + SubAssign<Right>","parent":null,"children":[],"decl_id":null,"docs":" Trait __alias__ for `Sub` and `SubAssign` with result of type `Self`.\n","sig":null,"attributes":[{"value":"/ Trait __alias__ for `Sub` and `SubAssign` with result of type `Self`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/field.rs","byte_start":44216,"byte_end":44289,"line_start":8,"line_end":8,"column_start":1,"column_end":74}}]},{"kind":"Trait","id":{"krate":0,"index":234},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/field.rs","byte_start":44466,"byte_end":44475,"line_start":12,"line_end":12,"column_start":11,"column_end":20},"name":"ClosedMul","qualname":"::scalar::field::ClosedMul","value":"ClosedMul<Right = Self>: Sized + Mul<Right, Output = Self> + MulAssign<Right>","parent":null,"children":[],"decl_id":null,"docs":" Trait __alias__ for `Mul` and `MulAssign` with result of type `Self`.\n","sig":null,"attributes":[{"value":"/ Trait __alias__ for `Mul` and `MulAssign` with result of type `Self`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/field.rs","byte_start":44382,"byte_end":44455,"line_start":11,"line_end":11,"column_start":1,"column_end":74}}]},{"kind":"Trait","id":{"krate":0,"index":236},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/field.rs","byte_start":44632,"byte_end":44641,"line_start":15,"line_end":15,"column_start":11,"column_end":20},"name":"ClosedDiv","qualname":"::scalar::field::ClosedDiv","value":"ClosedDiv<Right = Self>: Sized + Div<Right, Output = Self> + DivAssign<Right>","parent":null,"children":[],"decl_id":null,"docs":" Trait __alias__ for `Div` and `DivAssign` with result of type `Self`.\n","sig":null,"attributes":[{"value":"/ Trait __alias__ for `Div` and `DivAssign` with result of type `Self`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/field.rs","byte_start":44548,"byte_end":44621,"line_start":14,"line_end":14,"column_start":1,"column_end":74}}]},{"kind":"Trait","id":{"krate":0,"index":238},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/field.rs","byte_start":44782,"byte_end":44791,"line_start":18,"line_end":18,"column_start":11,"column_end":20},"name":"ClosedNeg","qualname":"::scalar::field::ClosedNeg","value":"ClosedNeg: Sized + Neg<Output = Self>","parent":null,"children":[],"decl_id":null,"docs":" Trait __alias__ for `Neg` with result of type `Self`.\n","sig":null,"attributes":[{"value":"/ Trait __alias__ for `Neg` with result of type `Self`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/field.rs","byte_start":44714,"byte_end":44771,"line_start":17,"line_end":17,"column_start":1,"column_end":58}}]},{"kind":"Trait","id":{"krate":0,"index":253},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/field.rs","byte_start":45322,"byte_end":45327,"line_start":27,"line_end":27,"column_start":11,"column_end":16},"name":"Field","qualname":"::scalar::field::Field","value":"Field: SimdValue + NumAssign + ClosedNeg","parent":null,"children":[],"decl_id":null,"docs":" Trait implemented by fields, i.e., complex numbers and floats.\n","sig":null,"attributes":[{"value":"/ Trait implemented by fields, i.e., complex numbers and floats.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/field.rs","byte_start":45245,"byte_end":45311,"line_start":26,"line_end":26,"column_start":1,"column_end":67}}]},{"kind":"Trait","id":{"krate":0,"index":264},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/subset.rs","byte_start":46912,"byte_end":46920,"line_start":24,"line_end":24,"column_start":11,"column_end":19},"name":"SubsetOf","qualname":"::scalar::subset::SubsetOf","value":"SubsetOf<T>: Sized","parent":null,"children":[{"krate":0,"index":266},{"krate":0,"index":267},{"krate":0,"index":268},{"krate":0,"index":269}],"decl_id":null,"docs":" Nested sets and conversions between them (using an injective mapping). Useful to work with\n substructures. In generic code, it is preferable to use `SupersetOf` as trait bound whenever\n possible instead of `SubsetOf` (because SupersetOf is automatically implemented whenever\n `SubsetOf` is).","sig":null,"attributes":[{"value":"/ Nested sets and conversions between them (using an injective mapping). Useful to work with","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/subset.rs","byte_start":45720,"byte_end":45814,"line_start":6,"line_end":6,"column_start":1,"column_end":95}},{"value":"/ substructures. In generic code, it is preferable to use `SupersetOf` as trait bound whenever","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/subset.rs","byte_start":45815,"byte_end":45911,"line_start":7,"line_end":7,"column_start":1,"column_end":97}},{"value":"/ possible instead of `SubsetOf` (because SupersetOf is automatically implemented whenever","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/subset.rs","byte_start":45912,"byte_end":46004,"line_start":8,"line_end":8,"column_start":1,"column_end":93}},{"value":"/ `SubsetOf` is).","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/subset.rs","byte_start":46005,"byte_end":46024,"line_start":9,"line_end":9,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/subset.rs","byte_start":46025,"byte_end":46028,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ The notion of \"nested sets\" is very broad and applies to what the types are _supposed to","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/subset.rs","byte_start":46029,"byte_end":46121,"line_start":11,"line_end":11,"column_start":1,"column_end":93}},{"value":"/ represent_, independently from their actual implementation details and limitations. For","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/subset.rs","byte_start":46122,"byte_end":46213,"line_start":12,"line_end":12,"column_start":1,"column_end":92}},{"value":"/ example:","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/subset.rs","byte_start":46214,"byte_end":46226,"line_start":13,"line_end":13,"column_start":1,"column_end":13}},{"value":"/ * f32 and f64 are both supposed to represent reals and are thus considered equal (even if in","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/subset.rs","byte_start":46227,"byte_end":46323,"line_start":14,"line_end":14,"column_start":1,"column_end":97}},{"value":"/ practice f64 has more elements).","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/subset.rs","byte_start":46324,"byte_end":46360,"line_start":15,"line_end":15,"column_start":1,"column_end":37}},{"value":"/ * u32 and i8 are respectively supposed to represent natural and relative numbers. Thus, u32 is","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/subset.rs","byte_start":46361,"byte_end":46459,"line_start":16,"line_end":16,"column_start":1,"column_end":99}},{"value":"/ a subset of i8.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/subset.rs","byte_start":46460,"byte_end":46479,"line_start":17,"line_end":17,"column_start":1,"column_end":20}},{"value":"/ * A quaternion and a 3x3 orthogonal matrix with unit determinant are both sets of rotations.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/subset.rs","byte_start":46480,"byte_end":46576,"line_start":18,"line_end":18,"column_start":1,"column_end":97}},{"value":"/ They can thus be considered equal.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/subset.rs","byte_start":46577,"byte_end":46615,"line_start":19,"line_end":19,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/subset.rs","byte_start":46616,"byte_end":46619,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ In other words, implementation details due to machine limitations are ignored (otherwise we","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/subset.rs","byte_start":46620,"byte_end":46715,"line_start":21,"line_end":21,"column_start":1,"column_end":96}},{"value":"/ could not even, e.g., convert a u64 to an i64). If considering those limitations are","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/subset.rs","byte_start":46716,"byte_end":46804,"line_start":22,"line_end":22,"column_start":1,"column_end":89}},{"value":"/ important, other crates allowing you to query the limitations of given types should be used.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/subset.rs","byte_start":46805,"byte_end":46901,"line_start":23,"line_end":23,"column_start":1,"column_end":97}}]},{"kind":"Method","id":{"krate":0,"index":266},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/subset.rs","byte_start":47026,"byte_end":47037,"line_start":26,"line_end":26,"column_start":8,"column_end":19},"name":"to_superset","qualname":"::scalar::subset::SubsetOf::to_superset","value":"pub fn to_superset(&Self) -> T","parent":{"krate":0,"index":264},"children":[],"decl_id":null,"docs":" The inclusion map: converts `self` to the equivalent element of its superset.\n","sig":null,"attributes":[{"value":"/ The inclusion map: converts `self` to the equivalent element of its superset.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/subset.rs","byte_start":46937,"byte_end":47018,"line_start":25,"line_end":25,"column_start":5,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":267},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/subset.rs","byte_start":47253,"byte_end":47266,"line_start":32,"line_end":32,"column_start":8,"column_end":21},"name":"from_superset","qualname":"::scalar::subset::SubsetOf::from_superset","value":"pub fn from_superset(&T) -> Option<Self>","parent":{"krate":0,"index":264},"children":[],"decl_id":null,"docs":" The inverse inclusion map: attempts to construct `self` from the equivalent element of its\n superset.","sig":null,"attributes":[{"value":"/ The inverse inclusion map: attempts to construct `self` from the equivalent element of its","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/subset.rs","byte_start":47056,"byte_end":47150,"line_start":28,"line_end":28,"column_start":5,"column_end":99}},{"value":"/ superset.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/subset.rs","byte_start":47155,"byte_end":47168,"line_start":29,"line_end":29,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/subset.rs","byte_start":47173,"byte_end":47176,"line_start":30,"line_end":30,"column_start":5,"column_end":8}},{"value":"/ Must return `None` if `element` has no equivalent in `Self`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/subset.rs","byte_start":47181,"byte_end":47245,"line_start":31,"line_end":31,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":268},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/subset.rs","byte_start":47554,"byte_end":47577,"line_start":41,"line_end":41,"column_start":8,"column_end":31},"name":"from_superset_unchecked","qualname":"::scalar::subset::SubsetOf::from_superset_unchecked","value":"pub fn from_superset_unchecked(&T) -> Self","parent":{"krate":0,"index":264},"children":[],"decl_id":null,"docs":" Use with care! Same as `self.to_superset` but without any property checks. Always succeeds.\n","sig":null,"attributes":[{"value":"/ Use with care! Same as `self.to_superset` but without any property checks. Always succeeds.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/subset.rs","byte_start":47451,"byte_end":47546,"line_start":40,"line_end":40,"column_start":5,"column_end":100}}]},{"kind":"Method","id":{"krate":0,"index":269},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/subset.rs","byte_start":47704,"byte_end":47716,"line_start":44,"line_end":44,"column_start":8,"column_end":20},"name":"is_in_subset","qualname":"::scalar::subset::SubsetOf::is_in_subset","value":"pub fn is_in_subset(&T) -> bool","parent":{"krate":0,"index":264},"children":[],"decl_id":null,"docs":" Checks if `element` is actually part of the subset `Self` (and can be converted to it).\n","sig":null,"attributes":[{"value":"/ Checks if `element` is actually part of the subset `Self` (and can be converted to it).","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/subset.rs","byte_start":47605,"byte_end":47696,"line_start":43,"line_end":43,"column_start":5,"column_end":96}}]},{"kind":"Trait","id":{"krate":0,"index":270},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/subset.rs","byte_start":48889,"byte_end":48899,"line_start":64,"line_end":64,"column_start":11,"column_end":21},"name":"SupersetOf","qualname":"::scalar::subset::SupersetOf","value":"SupersetOf<T>: Sized","parent":null,"children":[{"krate":0,"index":272},{"krate":0,"index":273},{"krate":0,"index":274},{"krate":0,"index":275}],"decl_id":null,"docs":" Nested sets and conversions between them. Useful to work with substructures. It is preferable\n to implement the `SubsetOf` trait instead of `SupersetOf` whenever possible (because\n `SupersetOf` is automatically implemented whenever `SubsetOf` is).","sig":null,"attributes":[{"value":"/ Nested sets and conversions between them. Useful to work with substructures. It is preferable","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/subset.rs","byte_start":47742,"byte_end":47839,"line_start":47,"line_end":47,"column_start":1,"column_end":98}},{"value":"/ to implement the `SubsetOf` trait instead of `SupersetOf` whenever possible (because","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/subset.rs","byte_start":47840,"byte_end":47928,"line_start":48,"line_end":48,"column_start":1,"column_end":89}},{"value":"/ `SupersetOf` is automatically implemented whenever `SubsetOf` is).","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/subset.rs","byte_start":47929,"byte_end":47999,"line_start":49,"line_end":49,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/subset.rs","byte_start":48000,"byte_end":48003,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ The notion of \"nested sets\" is very broad and applies to what the types are _supposed to","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/subset.rs","byte_start":48004,"byte_end":48096,"line_start":51,"line_end":51,"column_start":1,"column_end":93}},{"value":"/ represent_, independently from their actual implementation details and limitations. For","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/subset.rs","byte_start":48097,"byte_end":48188,"line_start":52,"line_end":52,"column_start":1,"column_end":92}},{"value":"/ example:","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/subset.rs","byte_start":48189,"byte_end":48201,"line_start":53,"line_end":53,"column_start":1,"column_end":13}},{"value":"/ * f32 and f64 are both supposed to represent reals and are thus considered equal (even if in","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/subset.rs","byte_start":48202,"byte_end":48298,"line_start":54,"line_end":54,"column_start":1,"column_end":97}},{"value":"/ practice f64 has more elements).","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/subset.rs","byte_start":48299,"byte_end":48335,"line_start":55,"line_end":55,"column_start":1,"column_end":37}},{"value":"/ * u32 and i8 are respectively supposed to represent natural and relative numbers. Thus, i8 is","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/subset.rs","byte_start":48336,"byte_end":48433,"line_start":56,"line_end":56,"column_start":1,"column_end":98}},{"value":"/ a superset of u32.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/subset.rs","byte_start":48434,"byte_end":48456,"line_start":57,"line_end":57,"column_start":1,"column_end":23}},{"value":"/ * A quaternion and a 3x3 orthogonal matrix with unit determinant are both sets of rotations.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/subset.rs","byte_start":48457,"byte_end":48553,"line_start":58,"line_end":58,"column_start":1,"column_end":97}},{"value":"/ They can thus be considered equal.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/subset.rs","byte_start":48554,"byte_end":48592,"line_start":59,"line_end":59,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/subset.rs","byte_start":48593,"byte_end":48596,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"/ In other words, implementation details due to machine limitations are ignored (otherwise we","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/subset.rs","byte_start":48597,"byte_end":48692,"line_start":61,"line_end":61,"column_start":1,"column_end":96}},{"value":"/ could not even, e.g., convert a u64 to an i64). If considering those limitations are","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/subset.rs","byte_start":48693,"byte_end":48781,"line_start":62,"line_end":62,"column_start":1,"column_end":89}},{"value":"/ important, other crates allowing you to query the limitations of given types should be used.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/subset.rs","byte_start":48782,"byte_end":48878,"line_start":63,"line_end":63,"column_start":1,"column_end":97}}]},{"kind":"Method","id":{"krate":0,"index":272},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/subset.rs","byte_start":49113,"byte_end":49122,"line_start":69,"line_end":69,"column_start":8,"column_end":17},"name":"to_subset","qualname":"::scalar::subset::SupersetOf::to_subset","value":"pub fn to_subset(&Self) -> Option<T>","parent":{"krate":0,"index":270},"children":[],"decl_id":null,"docs":" The inverse inclusion map: attempts to construct `self` from the equivalent element of its\n superset.","sig":null,"attributes":[{"value":"/ The inverse inclusion map: attempts to construct `self` from the equivalent element of its","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/subset.rs","byte_start":48916,"byte_end":49010,"line_start":65,"line_end":65,"column_start":5,"column_end":99}},{"value":"/ superset.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/subset.rs","byte_start":49015,"byte_end":49028,"line_start":66,"line_end":66,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/subset.rs","byte_start":49033,"byte_end":49036,"line_start":67,"line_end":67,"column_start":5,"column_end":8}},{"value":"/ Must return `None` if `element` has no equivalent in `Self`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/subset.rs","byte_start":49041,"byte_end":49105,"line_start":68,"line_end":68,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":273},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/subset.rs","byte_start":49371,"byte_end":49383,"line_start":78,"line_end":78,"column_start":8,"column_end":20},"name":"is_in_subset","qualname":"::scalar::subset::SupersetOf::is_in_subset","value":"pub fn is_in_subset(&Self) -> bool","parent":{"krate":0,"index":270},"children":[],"decl_id":null,"docs":" Checks if `self` is actually part of its subset `T` (and can be converted to it).\n","sig":null,"attributes":[{"value":"/ Checks if `self` is actually part of its subset `T` (and can be converted to it).","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/subset.rs","byte_start":49278,"byte_end":49363,"line_start":77,"line_end":77,"column_start":5,"column_end":90}}]},{"kind":"Method","id":{"krate":0,"index":274},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/subset.rs","byte_start":49506,"byte_end":49525,"line_start":81,"line_end":81,"column_start":8,"column_end":27},"name":"to_subset_unchecked","qualname":"::scalar::subset::SupersetOf::to_subset_unchecked","value":"pub fn to_subset_unchecked(&Self) -> T","parent":{"krate":0,"index":270},"children":[],"decl_id":null,"docs":" Use with care! Same as `self.to_subset` but without any property checks. Always succeeds.\n","sig":null,"attributes":[{"value":"/ Use with care! Same as `self.to_subset` but without any property checks. Always succeeds.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/subset.rs","byte_start":49405,"byte_end":49498,"line_start":80,"line_end":80,"column_start":5,"column_end":98}}]},{"kind":"Method","id":{"krate":0,"index":275},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/subset.rs","byte_start":49633,"byte_end":49644,"line_start":84,"line_end":84,"column_start":8,"column_end":19},"name":"from_subset","qualname":"::scalar::subset::SupersetOf::from_subset","value":"pub fn from_subset(&T) -> Self","parent":{"krate":0,"index":270},"children":[],"decl_id":null,"docs":" The inclusion map: converts `self` to the equivalent element of its superset.\n","sig":null,"attributes":[{"value":"/ The inclusion map: converts `self` to the equivalent element of its superset.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/subset.rs","byte_start":49544,"byte_end":49625,"line_start":83,"line_end":83,"column_start":5,"column_end":86}}]},{"kind":"Mod","id":{"krate":0,"index":291},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"simd","qualname":"::simd","value":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/mod.rs","parent":null,"children":[{"krate":0,"index":292},{"krate":0,"index":293},{"krate":0,"index":296},{"krate":0,"index":299},{"krate":0,"index":302},{"krate":0,"index":305},{"krate":0,"index":308},{"krate":0,"index":311},{"krate":0,"index":312},{"krate":0,"index":315},{"krate":0,"index":318},{"krate":0,"index":555},{"krate":0,"index":624},{"krate":0,"index":725},{"krate":0,"index":746},{"krate":0,"index":775},{"krate":0,"index":828},{"krate":0,"index":848}],"decl_id":null,"docs":" Traits implemented by SIMD types and non-SIMD types.\n","sig":null,"attributes":[{"value":"/ Traits implemented by SIMD types and non-SIMD types.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/mod.rs","byte_start":53326,"byte_end":53382,"line_start":1,"line_end":1,"column_start":1,"column_end":57}}]},{"kind":"Struct","id":{"krate":0,"index":1698},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/auto_simd_impl.rs","byte_start":56721,"byte_end":56729,"line_start":44,"line_end":44,"column_start":12,"column_end":20},"name":"AutoSimd","qualname":"::simd::auto_simd_impl::AutoSimd","value":"","parent":null,"children":[],"decl_id":null,"docs":" An Simd structure that implements all the relevant traits from `num` an `simba`.","sig":null,"attributes":[{"value":"/ An Simd structure that implements all the relevant traits from `num` an `simba`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/auto_simd_impl.rs","byte_start":56508,"byte_end":56592,"line_start":39,"line_end":39,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/auto_simd_impl.rs","byte_start":56593,"byte_end":56596,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ This is needed to overcome the orphan rules.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/auto_simd_impl.rs","byte_start":56597,"byte_end":56645,"line_start":41,"line_end":41,"column_start":1,"column_end":49}},{"value":"repr(align(16))","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/auto_simd_impl.rs","byte_start":56646,"byte_end":56664,"line_start":42,"line_end":42,"column_start":1,"column_end":19}}]},{"kind":"Field","id":{"krate":0,"index":1701},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/auto_simd_impl.rs","byte_start":56733,"byte_end":56738,"line_start":44,"line_end":44,"column_start":24,"column_end":29},"name":"0","qualname":"::simd::auto_simd_impl::AutoSimd::0","value":"N","parent":{"krate":0,"index":1698},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1721},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/auto_simd_impl.rs","byte_start":56962,"byte_end":56974,"line_start":50,"line_end":50,"column_start":12,"column_end":24},"name":"AutoBoolSimd","qualname":"::simd::auto_simd_impl::AutoBoolSimd","value":"","parent":null,"children":[],"decl_id":null,"docs":" An Simd boolean structure that implements all the relevant traits from `num` an `simba`.","sig":null,"attributes":[{"value":"/ An Simd boolean structure that implements all the relevant traits from `num` an `simba`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/auto_simd_impl.rs","byte_start":56741,"byte_end":56833,"line_start":45,"line_end":45,"column_start":1,"column_end":93}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/auto_simd_impl.rs","byte_start":56834,"byte_end":56837,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ This is needed to overcome the orphan rules.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/auto_simd_impl.rs","byte_start":56838,"byte_end":56886,"line_start":47,"line_end":47,"column_start":1,"column_end":49}},{"value":"repr(align(16))","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/auto_simd_impl.rs","byte_start":56887,"byte_end":56905,"line_start":48,"line_end":48,"column_start":1,"column_end":19}}]},{"kind":"Field","id":{"krate":0,"index":1724},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/auto_simd_impl.rs","byte_start":56978,"byte_end":56983,"line_start":50,"line_end":50,"column_start":28,"column_end":33},"name":"0","qualname":"::simd::auto_simd_impl::AutoBoolSimd::0","value":"N","parent":{"krate":0,"index":1721},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":426},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/auto_simd_impl.rs","byte_start":107269,"byte_end":107278,"line_start":1537,"line_end":1537,"column_start":10,"column_end":19},"name":"AutoF32x2","qualname":"::simd::auto_simd_impl::AutoF32x2","value":"AutoSimd<[f32; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":428},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/auto_simd_impl.rs","byte_start":107310,"byte_end":107319,"line_start":1538,"line_end":1538,"column_start":10,"column_end":19},"name":"AutoF32x4","qualname":"::simd::auto_simd_impl::AutoF32x4","value":"AutoSimd<[f32; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":430},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/auto_simd_impl.rs","byte_start":107351,"byte_end":107360,"line_start":1539,"line_end":1539,"column_start":10,"column_end":19},"name":"AutoF32x8","qualname":"::simd::auto_simd_impl::AutoF32x8","value":"AutoSimd<[f32; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":432},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/auto_simd_impl.rs","byte_start":107392,"byte_end":107402,"line_start":1540,"line_end":1540,"column_start":10,"column_end":20},"name":"AutoF32x16","qualname":"::simd::auto_simd_impl::AutoF32x16","value":"AutoSimd<[f32; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":434},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/auto_simd_impl.rs","byte_start":107435,"byte_end":107444,"line_start":1541,"line_end":1541,"column_start":10,"column_end":19},"name":"AutoF64x2","qualname":"::simd::auto_simd_impl::AutoF64x2","value":"AutoSimd<[f64; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":436},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/auto_simd_impl.rs","byte_start":107476,"byte_end":107485,"line_start":1542,"line_end":1542,"column_start":10,"column_end":19},"name":"AutoF64x4","qualname":"::simd::auto_simd_impl::AutoF64x4","value":"AutoSimd<[f64; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":438},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/auto_simd_impl.rs","byte_start":107517,"byte_end":107526,"line_start":1543,"line_end":1543,"column_start":10,"column_end":19},"name":"AutoF64x8","qualname":"::simd::auto_simd_impl::AutoF64x8","value":"AutoSimd<[f64; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":440},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/auto_simd_impl.rs","byte_start":107558,"byte_end":107568,"line_start":1544,"line_end":1544,"column_start":10,"column_end":20},"name":"AutoI128x1","qualname":"::simd::auto_simd_impl::AutoI128x1","value":"AutoSimd<[i128; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":442},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/auto_simd_impl.rs","byte_start":107601,"byte_end":107611,"line_start":1545,"line_end":1545,"column_start":10,"column_end":20},"name":"AutoI128x2","qualname":"::simd::auto_simd_impl::AutoI128x2","value":"AutoSimd<[i128; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":444},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/auto_simd_impl.rs","byte_start":107644,"byte_end":107654,"line_start":1546,"line_end":1546,"column_start":10,"column_end":20},"name":"AutoI128x4","qualname":"::simd::auto_simd_impl::AutoI128x4","value":"AutoSimd<[i128; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":446},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/auto_simd_impl.rs","byte_start":107687,"byte_end":107696,"line_start":1547,"line_end":1547,"column_start":10,"column_end":19},"name":"AutoI16x2","qualname":"::simd::auto_simd_impl::AutoI16x2","value":"AutoSimd<[i16; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":448},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/auto_simd_impl.rs","byte_start":107728,"byte_end":107737,"line_start":1548,"line_end":1548,"column_start":10,"column_end":19},"name":"AutoI16x4","qualname":"::simd::auto_simd_impl::AutoI16x4","value":"AutoSimd<[i16; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":450},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/auto_simd_impl.rs","byte_start":107769,"byte_end":107778,"line_start":1549,"line_end":1549,"column_start":10,"column_end":19},"name":"AutoI16x8","qualname":"::simd::auto_simd_impl::AutoI16x8","value":"AutoSimd<[i16; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":452},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/auto_simd_impl.rs","byte_start":107810,"byte_end":107820,"line_start":1550,"line_end":1550,"column_start":10,"column_end":20},"name":"AutoI16x16","qualname":"::simd::auto_simd_impl::AutoI16x16","value":"AutoSimd<[i16; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":454},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/auto_simd_impl.rs","byte_start":107853,"byte_end":107863,"line_start":1551,"line_end":1551,"column_start":10,"column_end":20},"name":"AutoI16x32","qualname":"::simd::auto_simd_impl::AutoI16x32","value":"AutoSimd<[i16; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":456},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/auto_simd_impl.rs","byte_start":107896,"byte_end":107905,"line_start":1552,"line_end":1552,"column_start":10,"column_end":19},"name":"AutoI32x2","qualname":"::simd::auto_simd_impl::AutoI32x2","value":"AutoSimd<[i32; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":458},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/auto_simd_impl.rs","byte_start":107937,"byte_end":107946,"line_start":1553,"line_end":1553,"column_start":10,"column_end":19},"name":"AutoI32x4","qualname":"::simd::auto_simd_impl::AutoI32x4","value":"AutoSimd<[i32; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":460},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/auto_simd_impl.rs","byte_start":107978,"byte_end":107987,"line_start":1554,"line_end":1554,"column_start":10,"column_end":19},"name":"AutoI32x8","qualname":"::simd::auto_simd_impl::AutoI32x8","value":"AutoSimd<[i32; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":462},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/auto_simd_impl.rs","byte_start":108019,"byte_end":108029,"line_start":1555,"line_end":1555,"column_start":10,"column_end":20},"name":"AutoI32x16","qualname":"::simd::auto_simd_impl::AutoI32x16","value":"AutoSimd<[i32; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":464},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/auto_simd_impl.rs","byte_start":108062,"byte_end":108071,"line_start":1556,"line_end":1556,"column_start":10,"column_end":19},"name":"AutoI64x2","qualname":"::simd::auto_simd_impl::AutoI64x2","value":"AutoSimd<[i64; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":466},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/auto_simd_impl.rs","byte_start":108103,"byte_end":108112,"line_start":1557,"line_end":1557,"column_start":10,"column_end":19},"name":"AutoI64x4","qualname":"::simd::auto_simd_impl::AutoI64x4","value":"AutoSimd<[i64; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":468},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/auto_simd_impl.rs","byte_start":108144,"byte_end":108153,"line_start":1558,"line_end":1558,"column_start":10,"column_end":19},"name":"AutoI64x8","qualname":"::simd::auto_simd_impl::AutoI64x8","value":"AutoSimd<[i64; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":470},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/auto_simd_impl.rs","byte_start":108185,"byte_end":108193,"line_start":1559,"line_end":1559,"column_start":10,"column_end":18},"name":"AutoI8x2","qualname":"::simd::auto_simd_impl::AutoI8x2","value":"AutoSimd<[i8; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":472},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/auto_simd_impl.rs","byte_start":108224,"byte_end":108232,"line_start":1560,"line_end":1560,"column_start":10,"column_end":18},"name":"AutoI8x4","qualname":"::simd::auto_simd_impl::AutoI8x4","value":"AutoSimd<[i8; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":474},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/auto_simd_impl.rs","byte_start":108263,"byte_end":108271,"line_start":1561,"line_end":1561,"column_start":10,"column_end":18},"name":"AutoI8x8","qualname":"::simd::auto_simd_impl::AutoI8x8","value":"AutoSimd<[i8; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":476},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/auto_simd_impl.rs","byte_start":108302,"byte_end":108311,"line_start":1562,"line_end":1562,"column_start":10,"column_end":19},"name":"AutoI8x16","qualname":"::simd::auto_simd_impl::AutoI8x16","value":"AutoSimd<[i8; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":478},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/auto_simd_impl.rs","byte_start":108343,"byte_end":108352,"line_start":1563,"line_end":1563,"column_start":10,"column_end":19},"name":"AutoI8x32","qualname":"::simd::auto_simd_impl::AutoI8x32","value":"AutoSimd<[i8; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":480},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/auto_simd_impl.rs","byte_start":108428,"byte_end":108439,"line_start":1565,"line_end":1565,"column_start":10,"column_end":21},"name":"AutoIsizex2","qualname":"::simd::auto_simd_impl::AutoIsizex2","value":"AutoSimd<[isize; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":482},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/auto_simd_impl.rs","byte_start":108473,"byte_end":108484,"line_start":1566,"line_end":1566,"column_start":10,"column_end":21},"name":"AutoIsizex4","qualname":"::simd::auto_simd_impl::AutoIsizex4","value":"AutoSimd<[isize; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":484},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/auto_simd_impl.rs","byte_start":108518,"byte_end":108529,"line_start":1567,"line_end":1567,"column_start":10,"column_end":21},"name":"AutoIsizex8","qualname":"::simd::auto_simd_impl::AutoIsizex8","value":"AutoSimd<[isize; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":486},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/auto_simd_impl.rs","byte_start":108563,"byte_end":108573,"line_start":1568,"line_end":1568,"column_start":10,"column_end":20},"name":"AutoU128x1","qualname":"::simd::auto_simd_impl::AutoU128x1","value":"AutoSimd<[u128; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":488},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/auto_simd_impl.rs","byte_start":108606,"byte_end":108616,"line_start":1569,"line_end":1569,"column_start":10,"column_end":20},"name":"AutoU128x2","qualname":"::simd::auto_simd_impl::AutoU128x2","value":"AutoSimd<[u128; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":490},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/auto_simd_impl.rs","byte_start":108649,"byte_end":108659,"line_start":1570,"line_end":1570,"column_start":10,"column_end":20},"name":"AutoU128x4","qualname":"::simd::auto_simd_impl::AutoU128x4","value":"AutoSimd<[u128; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":492},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/auto_simd_impl.rs","byte_start":108692,"byte_end":108701,"line_start":1571,"line_end":1571,"column_start":10,"column_end":19},"name":"AutoU16x2","qualname":"::simd::auto_simd_impl::AutoU16x2","value":"AutoSimd<[u16; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":494},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/auto_simd_impl.rs","byte_start":108733,"byte_end":108742,"line_start":1572,"line_end":1572,"column_start":10,"column_end":19},"name":"AutoU16x4","qualname":"::simd::auto_simd_impl::AutoU16x4","value":"AutoSimd<[u16; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":496},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/auto_simd_impl.rs","byte_start":108774,"byte_end":108783,"line_start":1573,"line_end":1573,"column_start":10,"column_end":19},"name":"AutoU16x8","qualname":"::simd::auto_simd_impl::AutoU16x8","value":"AutoSimd<[u16; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":498},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/auto_simd_impl.rs","byte_start":108815,"byte_end":108825,"line_start":1574,"line_end":1574,"column_start":10,"column_end":20},"name":"AutoU16x16","qualname":"::simd::auto_simd_impl::AutoU16x16","value":"AutoSimd<[u16; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":500},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/auto_simd_impl.rs","byte_start":108858,"byte_end":108868,"line_start":1575,"line_end":1575,"column_start":10,"column_end":20},"name":"AutoU16x32","qualname":"::simd::auto_simd_impl::AutoU16x32","value":"AutoSimd<[u16; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":502},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/auto_simd_impl.rs","byte_start":108901,"byte_end":108910,"line_start":1576,"line_end":1576,"column_start":10,"column_end":19},"name":"AutoU32x2","qualname":"::simd::auto_simd_impl::AutoU32x2","value":"AutoSimd<[u32; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":504},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/auto_simd_impl.rs","byte_start":108942,"byte_end":108951,"line_start":1577,"line_end":1577,"column_start":10,"column_end":19},"name":"AutoU32x4","qualname":"::simd::auto_simd_impl::AutoU32x4","value":"AutoSimd<[u32; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":506},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/auto_simd_impl.rs","byte_start":108983,"byte_end":108992,"line_start":1578,"line_end":1578,"column_start":10,"column_end":19},"name":"AutoU32x8","qualname":"::simd::auto_simd_impl::AutoU32x8","value":"AutoSimd<[u32; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":508},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/auto_simd_impl.rs","byte_start":109024,"byte_end":109034,"line_start":1579,"line_end":1579,"column_start":10,"column_end":20},"name":"AutoU32x16","qualname":"::simd::auto_simd_impl::AutoU32x16","value":"AutoSimd<[u32; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":510},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/auto_simd_impl.rs","byte_start":109067,"byte_end":109076,"line_start":1580,"line_end":1580,"column_start":10,"column_end":19},"name":"AutoU64x2","qualname":"::simd::auto_simd_impl::AutoU64x2","value":"AutoSimd<[u64; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":512},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/auto_simd_impl.rs","byte_start":109108,"byte_end":109117,"line_start":1581,"line_end":1581,"column_start":10,"column_end":19},"name":"AutoU64x4","qualname":"::simd::auto_simd_impl::AutoU64x4","value":"AutoSimd<[u64; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":514},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/auto_simd_impl.rs","byte_start":109149,"byte_end":109158,"line_start":1582,"line_end":1582,"column_start":10,"column_end":19},"name":"AutoU64x8","qualname":"::simd::auto_simd_impl::AutoU64x8","value":"AutoSimd<[u64; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":516},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/auto_simd_impl.rs","byte_start":109190,"byte_end":109198,"line_start":1583,"line_end":1583,"column_start":10,"column_end":18},"name":"AutoU8x2","qualname":"::simd::auto_simd_impl::AutoU8x2","value":"AutoSimd<[u8; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":518},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/auto_simd_impl.rs","byte_start":109229,"byte_end":109237,"line_start":1584,"line_end":1584,"column_start":10,"column_end":18},"name":"AutoU8x4","qualname":"::simd::auto_simd_impl::AutoU8x4","value":"AutoSimd<[u8; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":520},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/auto_simd_impl.rs","byte_start":109268,"byte_end":109276,"line_start":1585,"line_end":1585,"column_start":10,"column_end":18},"name":"AutoU8x8","qualname":"::simd::auto_simd_impl::AutoU8x8","value":"AutoSimd<[u8; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":522},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/auto_simd_impl.rs","byte_start":109307,"byte_end":109316,"line_start":1586,"line_end":1586,"column_start":10,"column_end":19},"name":"AutoU8x16","qualname":"::simd::auto_simd_impl::AutoU8x16","value":"AutoSimd<[u8; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":524},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/auto_simd_impl.rs","byte_start":109348,"byte_end":109357,"line_start":1587,"line_end":1587,"column_start":10,"column_end":19},"name":"AutoU8x32","qualname":"::simd::auto_simd_impl::AutoU8x32","value":"AutoSimd<[u8; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":526},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/auto_simd_impl.rs","byte_start":109433,"byte_end":109444,"line_start":1589,"line_end":1589,"column_start":10,"column_end":21},"name":"AutoUsizex2","qualname":"::simd::auto_simd_impl::AutoUsizex2","value":"AutoSimd<[usize; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":528},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/auto_simd_impl.rs","byte_start":109478,"byte_end":109489,"line_start":1590,"line_end":1590,"column_start":10,"column_end":21},"name":"AutoUsizex4","qualname":"::simd::auto_simd_impl::AutoUsizex4","value":"AutoSimd<[usize; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":530},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/auto_simd_impl.rs","byte_start":109523,"byte_end":109534,"line_start":1591,"line_end":1591,"column_start":10,"column_end":21},"name":"AutoUsizex8","qualname":"::simd::auto_simd_impl::AutoUsizex8","value":"AutoSimd<[usize; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":532},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/auto_simd_impl.rs","byte_start":109569,"byte_end":109579,"line_start":1593,"line_end":1593,"column_start":10,"column_end":20},"name":"AutoBoolx1","qualname":"::simd::auto_simd_impl::AutoBoolx1","value":"AutoSimd<[bool; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":534},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/auto_simd_impl.rs","byte_start":109612,"byte_end":109623,"line_start":1594,"line_end":1594,"column_start":10,"column_end":21},"name":"AutoBoolx16","qualname":"::simd::auto_simd_impl::AutoBoolx16","value":"AutoSimd<[bool; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":536},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/auto_simd_impl.rs","byte_start":109657,"byte_end":109667,"line_start":1595,"line_end":1595,"column_start":10,"column_end":20},"name":"AutoBoolx2","qualname":"::simd::auto_simd_impl::AutoBoolx2","value":"AutoSimd<[bool; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":538},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/auto_simd_impl.rs","byte_start":109700,"byte_end":109711,"line_start":1596,"line_end":1596,"column_start":10,"column_end":21},"name":"AutoBoolx32","qualname":"::simd::auto_simd_impl::AutoBoolx32","value":"AutoSimd<[bool; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":540},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/auto_simd_impl.rs","byte_start":109745,"byte_end":109755,"line_start":1597,"line_end":1597,"column_start":10,"column_end":20},"name":"AutoBoolx4","qualname":"::simd::auto_simd_impl::AutoBoolx4","value":"AutoSimd<[bool; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":542},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/auto_simd_impl.rs","byte_start":109836,"byte_end":109846,"line_start":1599,"line_end":1599,"column_start":10,"column_end":20},"name":"AutoBoolx8","qualname":"::simd::auto_simd_impl::AutoBoolx8","value":"AutoSimd<[bool; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":572},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_bool.rs","byte_start":110901,"byte_end":110909,"line_start":9,"line_end":9,"column_start":11,"column_end":19},"name":"SimdBool","qualname":"::simd::simd_bool::SimdBool","value":"SimdBool: Copy + BitAnd<Self, Output = Self> + BitOr<Self, Output = Self> + BitXor<Self,\nOutput = Self> + Not<Output = Self>","parent":null,"children":[{"krate":0,"index":573},{"krate":0,"index":574},{"krate":0,"index":575},{"krate":0,"index":576},{"krate":0,"index":577},{"krate":0,"index":578},{"krate":0,"index":579},{"krate":0,"index":580},{"krate":0,"index":584},{"krate":0,"index":590}],"decl_id":null,"docs":" Lane-wise generalization of `bool` for SIMD booleans.","sig":null,"attributes":[{"value":"/ Lane-wise generalization of `bool` for SIMD booleans.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_bool.rs","byte_start":110608,"byte_end":110665,"line_start":4,"line_end":4,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_bool.rs","byte_start":110666,"byte_end":110669,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ This trait implemented by `bool` as well as SIMD boolean types like `packed_simd::m32x4`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_bool.rs","byte_start":110670,"byte_end":110763,"line_start":6,"line_end":6,"column_start":1,"column_end":94}},{"value":"/ It is designed to abstract the behavior of booleans so it can work with multi-lane boolean","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_bool.rs","byte_start":110764,"byte_end":110858,"line_start":7,"line_end":7,"column_start":1,"column_end":95}},{"value":"/ values in an AoSoA setting.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_bool.rs","byte_start":110859,"byte_end":110890,"line_start":8,"line_end":8,"column_start":1,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":573},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_bool.rs","byte_start":111224,"byte_end":111231,"line_start":19,"line_end":19,"column_start":8,"column_end":15},"name":"bitmask","qualname":"::simd::simd_bool::SimdBool::bitmask","value":"pub fn bitmask(Self) -> u64","parent":{"krate":0,"index":572},"children":[],"decl_id":null,"docs":" A bit mask representing the boolean state of each lanes of `self`.","sig":null,"attributes":[{"value":"/ A bit mask representing the boolean state of each lanes of `self`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_bool.rs","byte_start":111052,"byte_end":111122,"line_start":16,"line_end":16,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_bool.rs","byte_start":111127,"byte_end":111130,"line_start":17,"line_end":17,"column_start":5,"column_end":8}},{"value":"/ The `i-th` bit of the result is `1` iff. the `i-th` lane of `self` is `true`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_bool.rs","byte_start":111135,"byte_end":111216,"line_start":18,"line_end":18,"column_start":5,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":574},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_bool.rs","byte_start":111307,"byte_end":111310,"line_start":21,"line_end":21,"column_start":8,"column_end":11},"name":"and","qualname":"::simd::simd_bool::SimdBool::and","value":"pub fn and(Self) -> bool","parent":{"krate":0,"index":572},"children":[],"decl_id":null,"docs":" Lane-wise bitwise and of the vector elements.\n","sig":null,"attributes":[{"value":"/ Lane-wise bitwise and of the vector elements.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_bool.rs","byte_start":111250,"byte_end":111299,"line_start":20,"line_end":20,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":575},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_bool.rs","byte_start":111386,"byte_end":111388,"line_start":23,"line_end":23,"column_start":8,"column_end":10},"name":"or","qualname":"::simd::simd_bool::SimdBool::or","value":"pub fn or(Self) -> bool","parent":{"krate":0,"index":572},"children":[],"decl_id":null,"docs":" Lane-wise bitwise or of the vector elements.\n","sig":null,"attributes":[{"value":"/ Lane-wise bitwise or of the vector elements.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_bool.rs","byte_start":111330,"byte_end":111378,"line_start":22,"line_end":22,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":576},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_bool.rs","byte_start":111465,"byte_end":111468,"line_start":25,"line_end":25,"column_start":8,"column_end":11},"name":"xor","qualname":"::simd::simd_bool::SimdBool::xor","value":"pub fn xor(Self) -> bool","parent":{"krate":0,"index":572},"children":[],"decl_id":null,"docs":" Lane-wise bitwise xor of the vector elements.\n","sig":null,"attributes":[{"value":"/ Lane-wise bitwise xor of the vector elements.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_bool.rs","byte_start":111408,"byte_end":111457,"line_start":24,"line_end":24,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":577},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_bool.rs","byte_start":111526,"byte_end":111529,"line_start":27,"line_end":27,"column_start":8,"column_end":11},"name":"all","qualname":"::simd::simd_bool::SimdBool::all","value":"pub fn all(Self) -> bool","parent":{"krate":0,"index":572},"children":[],"decl_id":null,"docs":" Are all vector lanes true?\n","sig":null,"attributes":[{"value":"/ Are all vector lanes true?","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_bool.rs","byte_start":111488,"byte_end":111518,"line_start":26,"line_end":26,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":578},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_bool.rs","byte_start":111585,"byte_end":111588,"line_start":29,"line_end":29,"column_start":8,"column_end":11},"name":"any","qualname":"::simd::simd_bool::SimdBool::any","value":"pub fn any(Self) -> bool","parent":{"krate":0,"index":572},"children":[],"decl_id":null,"docs":" Is any vector lane true?\n","sig":null,"attributes":[{"value":"/ Is any vector lane true?","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_bool.rs","byte_start":111549,"byte_end":111577,"line_start":28,"line_end":28,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":579},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_bool.rs","byte_start":111647,"byte_end":111651,"line_start":31,"line_end":31,"column_start":8,"column_end":12},"name":"none","qualname":"::simd::simd_bool::SimdBool::none","value":"pub fn none(Self) -> bool","parent":{"krate":0,"index":572},"children":[],"decl_id":null,"docs":" Are all vector lanes false?\n","sig":null,"attributes":[{"value":"/ Are all vector lanes false?","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_bool.rs","byte_start":111608,"byte_end":111639,"line_start":30,"line_end":30,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":580},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_bool.rs","byte_start":112141,"byte_end":112148,"line_start":39,"line_end":39,"column_start":8,"column_end":15},"name":"if_else","qualname":"::simd::simd_bool::SimdBool::if_else","value":"pub fn if_else<Res: SimdValue<SimdBool = Self>, impl FnOnce() -> Res: FnOnce()\n               -> Res, impl FnOnce() -> Res: FnOnce() ->\n               Res>(Self, impl FnOnce() -> Res, impl FnOnce() -> Res) -> Res","parent":{"krate":0,"index":572},"children":[],"decl_id":null,"docs":" Merges the value of `if_value()` and `else_value()` depending on the lanes of `self`.","sig":null,"attributes":[{"value":"/ Merges the value of `if_value()` and `else_value()` depending on the lanes of `self`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_bool.rs","byte_start":111671,"byte_end":111760,"line_start":32,"line_end":32,"column_start":5,"column_end":94}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_bool.rs","byte_start":111765,"byte_end":111768,"line_start":33,"line_end":33,"column_start":5,"column_end":8}},{"value":"/ - For each lane of `self` containing `1`, the result will contain the corresponding lane of `if_value()`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_bool.rs","byte_start":111773,"byte_end":111882,"line_start":34,"line_end":34,"column_start":5,"column_end":114}},{"value":"/ - For each lane of `self` containing `0`, the result will contain the corresponding lane of `else_value()`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_bool.rs","byte_start":111887,"byte_end":111998,"line_start":35,"line_end":35,"column_start":5,"column_end":116}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_bool.rs","byte_start":112003,"byte_end":112006,"line_start":36,"line_end":36,"column_start":5,"column_end":8}},{"value":"/ The implementor of this trait is free to choose on what cases `if_value` and `else_value` are actually","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_bool.rs","byte_start":112011,"byte_end":112117,"line_start":37,"line_end":37,"column_start":5,"column_end":111}},{"value":"/ called.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_bool.rs","byte_start":112122,"byte_end":112133,"line_start":38,"line_end":38,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":584},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_bool.rs","byte_start":113025,"byte_end":113033,"line_start":52,"line_end":52,"column_start":8,"column_end":16},"name":"if_else2","qualname":"::simd::simd_bool::SimdBool::if_else2","value":"pub fn if_else2<Res: SimdValue<SimdBool = Self>,\n                impl FnOnce() -> Res: FnOnce() -> Res,\n                impl FnOnce() -> Self: FnOnce() -> Self,\n                impl FnOnce() -> Res: FnOnce() -> Res,\n                impl FnOnce() -> Res: FnOnce() ->\n                Res>(Self, impl FnOnce() -> Res,\n                     (impl FnOnce() -> Self, impl FnOnce() -> Res),\n                     impl FnOnce() -> Res) -> Res","parent":{"krate":0,"index":572},"children":[],"decl_id":null,"docs":" Merges the value of `if_value()` and `else_if.1()` and `else_value()` depending on the lanes of `self` and `else_if.0()`.","sig":null,"attributes":[{"value":"/ Merges the value of `if_value()` and `else_if.1()` and `else_value()` depending on the lanes of `self` and `else_if.0()`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_bool.rs","byte_start":112298,"byte_end":112423,"line_start":45,"line_end":45,"column_start":5,"column_end":130}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_bool.rs","byte_start":112428,"byte_end":112431,"line_start":46,"line_end":46,"column_start":5,"column_end":8}},{"value":"/ - For each lane of `self` containing `1`, the result will contain the corresponding lane of `if_value()`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_bool.rs","byte_start":112436,"byte_end":112545,"line_start":47,"line_end":47,"column_start":5,"column_end":114}},{"value":"/ - For each lane of `self` containing `0` but with a corresponding lane of `else_if.0()` containing `1`, the result will contain the corresponding lane of `else_if.1()`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_bool.rs","byte_start":112550,"byte_end":112722,"line_start":48,"line_end":48,"column_start":5,"column_end":177}},{"value":"/ - For each lane of `self` containing `0` but with a corresponding lane of `else_if.0()` containing `0`, the result will contain the corresponding lane of `else_value()`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_bool.rs","byte_start":112727,"byte_end":112900,"line_start":49,"line_end":49,"column_start":5,"column_end":178}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_bool.rs","byte_start":112905,"byte_end":112908,"line_start":50,"line_end":50,"column_start":5,"column_end":8}},{"value":"/ The implementor of this trait is free to choose on what cases any of those closures are implemented.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_bool.rs","byte_start":112913,"byte_end":113017,"line_start":51,"line_end":51,"column_start":5,"column_end":109}}]},{"kind":"Method","id":{"krate":0,"index":590},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_bool.rs","byte_start":114110,"byte_end":114118,"line_start":67,"line_end":67,"column_start":8,"column_end":16},"name":"if_else3","qualname":"::simd::simd_bool::SimdBool::if_else3","value":"pub fn if_else3<Res: SimdValue<SimdBool = Self>,\n                impl FnOnce() -> Res: FnOnce() -> Res,\n                impl FnOnce() -> Self: FnOnce() -> Self,\n                impl FnOnce() -> Res: FnOnce() -> Res,\n                impl FnOnce() -> Self: FnOnce() -> Self,\n                impl FnOnce() -> Res: FnOnce() -> Res,\n                impl FnOnce() -> Res: FnOnce() ->\n                Res>(Self, impl FnOnce() -> Res,\n                     (impl FnOnce() -> Self, impl FnOnce() -> Res),\n                     (impl FnOnce() -> Self, impl FnOnce() -> Res),\n                     impl FnOnce() -> Res) -> Res","parent":{"krate":0,"index":572},"children":[],"decl_id":null,"docs":" Merges the value of `if_value()` and `else_if.1()` and `else_else_if.1()` and `else_value()` depending on the lanes of `self` and `else_if.0()` and `else_else_if.0()`.","sig":null,"attributes":[{"value":"/ Merges the value of `if_value()` and `else_if.1()` and `else_else_if.1()` and `else_value()` depending on the lanes of `self` and `else_if.0()` and `else_else_if.0()`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_bool.rs","byte_start":113247,"byte_end":113418,"line_start":59,"line_end":59,"column_start":5,"column_end":176}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_bool.rs","byte_start":113423,"byte_end":113426,"line_start":60,"line_end":60,"column_start":5,"column_end":8}},{"value":"/ - For each lane of `self` containing `1`, the result will contain the corresponding lane of `if_value()`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_bool.rs","byte_start":113431,"byte_end":113540,"line_start":61,"line_end":61,"column_start":5,"column_end":114}},{"value":"/ - For each lane of `self` containing `0` but with a corresponding lane of `else_if.0()` containing `1`, the result will contain the corresponding lane of `else_if.1()`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_bool.rs","byte_start":113545,"byte_end":113717,"line_start":62,"line_end":62,"column_start":5,"column_end":177}},{"value":"/ - For each lane of `self` containing `0` and `else_if.0()` containing `0` and `else_else_if.0()` containing `1`, the result will contain the corresponding lane of `else_else_if.1()`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_bool.rs","byte_start":113722,"byte_end":113908,"line_start":63,"line_end":63,"column_start":5,"column_end":191}},{"value":"/ - Other lanes will contain the corresponding lane of `else_value()`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_bool.rs","byte_start":113913,"byte_end":113985,"line_start":64,"line_end":64,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_bool.rs","byte_start":113990,"byte_end":113993,"line_start":65,"line_end":65,"column_start":5,"column_end":8}},{"value":"/ The implementor of this trait is free to choose on what cases any of those closures are implemented.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_bool.rs","byte_start":113998,"byte_end":114102,"line_start":66,"line_end":66,"column_start":5,"column_end":109}}]},{"kind":"Trait","id":{"krate":0,"index":667},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_complex.rs","byte_start":116549,"byte_end":116565,"line_start":14,"line_end":14,"column_start":11,"column_end":27},"name":"SimdComplexField","qualname":"::simd::simd_complex::SimdComplexField","value":"SimdComplexField: SubsetOf<Self> + SupersetOf<f64> + Field + Copy + Neg<Output = Self> + Send +\nSync + Any + 'static + Debug + NumAssignOps + NumOps + PartialEq","parent":null,"children":[{"krate":0,"index":668},{"krate":0,"index":42721},{"krate":0,"index":42722},{"krate":0,"index":42723},{"krate":0,"index":42724},{"krate":0,"index":42725},{"krate":0,"index":42726},{"krate":0,"index":42727},{"krate":0,"index":42728},{"krate":0,"index":42729},{"krate":0,"index":42730},{"krate":0,"index":42731},{"krate":0,"index":42732},{"krate":0,"index":42733},{"krate":0,"index":42734},{"krate":0,"index":42735},{"krate":0,"index":42736},{"krate":0,"index":42737},{"krate":0,"index":42738},{"krate":0,"index":42739},{"krate":0,"index":42740},{"krate":0,"index":42741},{"krate":0,"index":42742},{"krate":0,"index":42743},{"krate":0,"index":42744},{"krate":0,"index":42745},{"krate":0,"index":42746},{"krate":0,"index":42747},{"krate":0,"index":42748},{"krate":0,"index":42749},{"krate":0,"index":42750},{"krate":0,"index":42751},{"krate":0,"index":42752},{"krate":0,"index":42753},{"krate":0,"index":42754},{"krate":0,"index":42755},{"krate":0,"index":42756},{"krate":0,"index":42757},{"krate":0,"index":42758},{"krate":0,"index":42759},{"krate":0,"index":42760},{"krate":0,"index":42761},{"krate":0,"index":42762},{"krate":0,"index":42763},{"krate":0,"index":42764},{"krate":0,"index":42765},{"krate":0,"index":42766},{"krate":0,"index":42767},{"krate":0,"index":42768},{"krate":0,"index":42769},{"krate":0,"index":42770},{"krate":0,"index":42771},{"krate":0,"index":42772},{"krate":0,"index":42773}],"decl_id":null,"docs":" Lane-wise generalisation of `ComplexField` for SIMD complex fields.","sig":null,"attributes":[{"value":"/ Lane-wise generalisation of `ComplexField` for SIMD complex fields.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_complex.rs","byte_start":116366,"byte_end":116438,"line_start":10,"line_end":10,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_complex.rs","byte_start":116439,"byte_end":116442,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ Each lane of an SIMD complex field should contain one complex field.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_complex.rs","byte_start":116443,"byte_end":116515,"line_start":12,"line_end":12,"column_start":1,"column_end":73}},{"value":"allow(missing_docs)","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_complex.rs","byte_start":116516,"byte_end":116538,"line_start":13,"line_end":13,"column_start":1,"column_end":23}}]},{"kind":"Type","id":{"krate":0,"index":668},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_complex.rs","byte_start":116875,"byte_end":116888,"line_start":32,"line_end":32,"column_start":10,"column_end":23},"name":"SimdRealField","qualname":"::simd::simd_complex::SimdComplexField::SimdRealField","value":"type SimdRealField: SimdRealField<SimdBool = <Self as SimdValue>::SimdBool>;","parent":{"krate":0,"index":667},"children":[],"decl_id":null,"docs":" Type of the coefficients of a complex number.\n","sig":null,"attributes":[{"value":"/ Type of the coefficients of a complex number.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_complex.rs","byte_start":116816,"byte_end":116865,"line_start":31,"line_end":31,"column_start":5,"column_end":54}}]},{"kind":"Struct","id":{"krate":0,"index":733},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_option.rs","byte_start":122614,"byte_end":122624,"line_start":25,"line_end":25,"column_start":12,"column_end":22},"name":"SimdOption","qualname":"::simd::simd_option::SimdOption","value":"SimdOption {  }","parent":null,"children":[{"krate":0,"index":735},{"krate":0,"index":736}],"decl_id":null,"docs":" Generalization of Option for SIMD computation.\n","sig":null,"attributes":[{"value":"/ Generalization of Option for SIMD computation.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_option.rs","byte_start":122552,"byte_end":122602,"line_start":24,"line_end":24,"column_start":1,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":739},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_option.rs","byte_start":122835,"byte_end":122838,"line_start":32,"line_end":32,"column_start":12,"column_end":15},"name":"new","qualname":"<SimdOption<V>>::new","value":"pub fn new(V, V::SimdBool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new SIMD option by combining a value and a mask indicating what lane of the value is valid.\n","sig":null,"attributes":[{"value":"/ Creates a new SIMD option by combining a value and a mask indicating what lane of the value is valid.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_option.rs","byte_start":122718,"byte_end":122823,"line_start":31,"line_end":31,"column_start":5,"column_end":110}}]},{"kind":"Method","id":{"krate":0,"index":740},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_option.rs","byte_start":122976,"byte_end":122980,"line_start":37,"line_end":37,"column_start":12,"column_end":16},"name":"mask","qualname":"<SimdOption<V>>::mask","value":"pub fn mask(&Self) -> V::SimdBool","parent":null,"children":[],"decl_id":null,"docs":" Return the underlying SIMD boolean mask.\n","sig":null,"attributes":[{"value":"/ Return the underlying SIMD boolean mask.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_option.rs","byte_start":122920,"byte_end":122964,"line_start":36,"line_end":36,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":741},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_option.rs","byte_start":123089,"byte_end":123094,"line_start":42,"line_end":42,"column_start":12,"column_end":17},"name":"value","qualname":"<SimdOption<V>>::value","value":"pub fn value(&Self) -> &V","parent":null,"children":[],"decl_id":null,"docs":" Return the underlying unfiltered value.\n","sig":null,"attributes":[{"value":"/ Return the underlying unfiltered value.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_option.rs","byte_start":123034,"byte_end":123077,"line_start":41,"line_end":41,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":742},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_option.rs","byte_start":123363,"byte_end":123369,"line_start":50,"line_end":50,"column_start":12,"column_end":18},"name":"option","qualname":"<SimdOption<V>>::option","value":"pub fn option(Self) -> Option<V>","parent":null,"children":[],"decl_id":null,"docs":" Converts this SIMD option to a strandard Option.","sig":null,"attributes":[{"value":"/ Converts this SIMD option to a strandard Option.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_option.rs","byte_start":123139,"byte_end":123191,"line_start":46,"line_end":46,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_option.rs","byte_start":123196,"byte_end":123199,"line_start":47,"line_end":47,"column_start":5,"column_end":8}},{"value":"/ If all the bits of `self.mask` are 1, then this returns `Some(self.value())`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_option.rs","byte_start":123204,"byte_end":123285,"line_start":48,"line_end":48,"column_start":5,"column_end":86}},{"value":"/ If any bit of `self.mask` is 0, then this returns `None`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_option.rs","byte_start":123290,"byte_end":123351,"line_start":49,"line_end":49,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":743},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_option.rs","byte_start":123662,"byte_end":123673,"line_start":62,"line_end":62,"column_start":12,"column_end":23},"name":"simd_unwrap","qualname":"<SimdOption<V>>::simd_unwrap","value":"pub fn simd_unwrap(Self) -> V","parent":null,"children":[],"decl_id":null,"docs":" Retrieve the underlying value if all the bits of `self.mask` are 1.","sig":null,"attributes":[{"value":"/ Retrieve the underlying value if all the bits of `self.mask` are 1.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_option.rs","byte_start":123502,"byte_end":123573,"line_start":58,"line_end":58,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_option.rs","byte_start":123578,"byte_end":123581,"line_start":59,"line_end":59,"column_start":5,"column_end":8}},{"value":"/ Panics if any of the bits of `self.mask` is 0.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_option.rs","byte_start":123586,"byte_end":123636,"line_start":60,"line_end":60,"column_start":5,"column_end":55}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_option.rs","byte_start":123641,"byte_end":123650,"line_start":61,"line_end":61,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":744},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_option.rs","byte_start":124383,"byte_end":124397,"line_start":78,"line_end":78,"column_start":12,"column_end":26},"name":"simd_unwrap_or","qualname":"<SimdOption<V>>::simd_unwrap_or","value":"pub fn simd_unwrap_or<impl FnOnce() -> V: FnOnce() ->\n                      V>(Self, impl FnOnce() -> V) -> V","parent":null,"children":[],"decl_id":null,"docs":" Merges the value of `self` with the value of `other`.","sig":null,"attributes":[{"value":"/ Merges the value of `self` with the value of `other`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_option.rs","byte_start":123848,"byte_end":123905,"line_start":70,"line_end":70,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_option.rs","byte_start":123910,"byte_end":123913,"line_start":71,"line_end":71,"column_start":5,"column_end":8}},{"value":"/ Each lane of the result with a corresponding bit mask set to 1 will be filled with the corresponding lanes of `self.value()`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_option.rs","byte_start":123918,"byte_end":124047,"line_start":72,"line_end":72,"column_start":5,"column_end":134}},{"value":"/ The lanes of the result with a corresponding bit mask set to 0 will be filled with the corresponding lanes of `other()`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_option.rs","byte_start":124052,"byte_end":124176,"line_start":73,"line_end":73,"column_start":5,"column_end":129}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_option.rs","byte_start":124181,"byte_end":124184,"line_start":74,"line_end":74,"column_start":5,"column_end":8}},{"value":"/ The function in `other` should not do any side-effect. Indeed, implementors of this trait are free to decide in what","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_option.rs","byte_start":124189,"byte_end":124309,"line_start":75,"line_end":75,"column_start":5,"column_end":125}},{"value":"/ cases `other` is called or not.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_option.rs","byte_start":124314,"byte_end":124349,"line_start":76,"line_end":76,"column_start":5,"column_end":40}},{"value":"inline(always)","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_option.rs","byte_start":124354,"byte_end":124371,"line_start":77,"line_end":77,"column_start":5,"column_end":22}}]},{"kind":"Trait","id":{"krate":0,"index":750},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_partial_ord.rs","byte_start":124605,"byte_end":124619,"line_start":4,"line_end":4,"column_start":11,"column_end":25},"name":"SimdPartialOrd","qualname":"::simd::simd_partial_ord::SimdPartialOrd","value":"SimdPartialOrd: SimdValue","parent":null,"children":[{"krate":0,"index":751},{"krate":0,"index":752},{"krate":0,"index":753},{"krate":0,"index":754},{"krate":0,"index":755},{"krate":0,"index":756},{"krate":0,"index":757},{"krate":0,"index":758},{"krate":0,"index":759},{"krate":0,"index":760},{"krate":0,"index":761}],"decl_id":null,"docs":" Lane-wise generalization of the standard `PartialOrd` for SIMD values.\n","sig":null,"attributes":[{"value":"/ Lane-wise generalization of the standard `PartialOrd` for SIMD values.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_partial_ord.rs","byte_start":124520,"byte_end":124594,"line_start":3,"line_end":3,"column_start":1,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":751},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_partial_ord.rs","byte_start":124688,"byte_end":124695,"line_start":6,"line_end":6,"column_start":8,"column_end":15},"name":"simd_gt","qualname":"::simd::simd_partial_ord::SimdPartialOrd::simd_gt","value":"pub fn simd_gt(Self, Self) -> Self::SimdBool","parent":{"krate":0,"index":750},"children":[],"decl_id":null,"docs":" Lanewise _greater than_ `>` comparison.\n","sig":null,"attributes":[{"value":"/ Lanewise _greater than_ `>` comparison.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_partial_ord.rs","byte_start":124637,"byte_end":124680,"line_start":5,"line_end":5,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":752},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_partial_ord.rs","byte_start":124786,"byte_end":124793,"line_start":8,"line_end":8,"column_start":8,"column_end":15},"name":"simd_lt","qualname":"::simd::simd_partial_ord::SimdPartialOrd::simd_lt","value":"pub fn simd_lt(Self, Self) -> Self::SimdBool","parent":{"krate":0,"index":750},"children":[],"decl_id":null,"docs":" Lanewise _less than_ `<` comparison.\n","sig":null,"attributes":[{"value":"/ Lanewise _less than_ `<` comparison.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_partial_ord.rs","byte_start":124738,"byte_end":124778,"line_start":7,"line_end":7,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":753},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_partial_ord.rs","byte_start":124892,"byte_end":124899,"line_start":10,"line_end":10,"column_start":8,"column_end":15},"name":"simd_ge","qualname":"::simd::simd_partial_ord::SimdPartialOrd::simd_ge","value":"pub fn simd_ge(Self, Self) -> Self::SimdBool","parent":{"krate":0,"index":750},"children":[],"decl_id":null,"docs":" Lanewise _greater or equal_ `>=` comparison.\n","sig":null,"attributes":[{"value":"/ Lanewise _greater or equal_ `>=` comparison.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_partial_ord.rs","byte_start":124836,"byte_end":124884,"line_start":9,"line_end":9,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":754},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_partial_ord.rs","byte_start":124995,"byte_end":125002,"line_start":12,"line_end":12,"column_start":8,"column_end":15},"name":"simd_le","qualname":"::simd::simd_partial_ord::SimdPartialOrd::simd_le","value":"pub fn simd_le(Self, Self) -> Self::SimdBool","parent":{"krate":0,"index":750},"children":[],"decl_id":null,"docs":" Lanewise _less or equal_ `<=` comparison.\n","sig":null,"attributes":[{"value":"/ Lanewise _less or equal_ `<=` comparison.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_partial_ord.rs","byte_start":124942,"byte_end":124987,"line_start":11,"line_end":11,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":755},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_partial_ord.rs","byte_start":125090,"byte_end":125097,"line_start":14,"line_end":14,"column_start":8,"column_end":15},"name":"simd_eq","qualname":"::simd::simd_partial_ord::SimdPartialOrd::simd_eq","value":"pub fn simd_eq(Self, Self) -> Self::SimdBool","parent":{"krate":0,"index":750},"children":[],"decl_id":null,"docs":" Lanewise _equal_ `==` comparison.\n","sig":null,"attributes":[{"value":"/ Lanewise _equal_ `==` comparison.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_partial_ord.rs","byte_start":125045,"byte_end":125082,"line_start":13,"line_end":13,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":756},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_partial_ord.rs","byte_start":125189,"byte_end":125196,"line_start":16,"line_end":16,"column_start":8,"column_end":15},"name":"simd_ne","qualname":"::simd::simd_partial_ord::SimdPartialOrd::simd_ne","value":"pub fn simd_ne(Self, Self) -> Self::SimdBool","parent":{"krate":0,"index":750},"children":[],"decl_id":null,"docs":" Lanewise _not equal_ `!=` comparison.\n","sig":null,"attributes":[{"value":"/ Lanewise _not equal_ `!=` comparison.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_partial_ord.rs","byte_start":125140,"byte_end":125181,"line_start":15,"line_end":15,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":757},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_partial_ord.rs","byte_start":125271,"byte_end":125279,"line_start":19,"line_end":19,"column_start":8,"column_end":16},"name":"simd_max","qualname":"::simd::simd_partial_ord::SimdPartialOrd::simd_max","value":"pub fn simd_max(Self, Self) -> Self","parent":{"krate":0,"index":750},"children":[],"decl_id":null,"docs":" Lanewise max value.\n","sig":null,"attributes":[{"value":"/ Lanewise max value.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_partial_ord.rs","byte_start":125240,"byte_end":125263,"line_start":18,"line_end":18,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":758},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_partial_ord.rs","byte_start":125343,"byte_end":125351,"line_start":21,"line_end":21,"column_start":8,"column_end":16},"name":"simd_min","qualname":"::simd::simd_partial_ord::SimdPartialOrd::simd_min","value":"pub fn simd_min(Self, Self) -> Self","parent":{"krate":0,"index":750},"children":[],"decl_id":null,"docs":" Lanewise min value.\n","sig":null,"attributes":[{"value":"/ Lanewise min value.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_partial_ord.rs","byte_start":125312,"byte_end":125335,"line_start":20,"line_end":20,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":759},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_partial_ord.rs","byte_start":125473,"byte_end":125483,"line_start":23,"line_end":23,"column_start":8,"column_end":18},"name":"simd_clamp","qualname":"::simd::simd_partial_ord::SimdPartialOrd::simd_clamp","value":"pub fn simd_clamp(Self, Self, Self) -> Self","parent":{"krate":0,"index":750},"children":[],"decl_id":null,"docs":" Clamps each lane of `self` between the corresponding lane of `min` and `max`.\n","sig":null,"attributes":[{"value":"/ Clamps each lane of `self` between the corresponding lane of `min` and `max`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_partial_ord.rs","byte_start":125384,"byte_end":125465,"line_start":22,"line_end":22,"column_start":5,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":760},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_partial_ord.rs","byte_start":125578,"byte_end":125597,"line_start":26,"line_end":26,"column_start":8,"column_end":27},"name":"simd_horizontal_min","qualname":"::simd::simd_partial_ord::SimdPartialOrd::simd_horizontal_min","value":"pub fn simd_horizontal_min(Self) -> Self::Element","parent":{"krate":0,"index":750},"children":[],"decl_id":null,"docs":" The min value among all lanes of `self`.\n","sig":null,"attributes":[{"value":"/ The min value among all lanes of `self`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_partial_ord.rs","byte_start":125526,"byte_end":125570,"line_start":25,"line_end":25,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":761},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_partial_ord.rs","byte_start":125678,"byte_end":125697,"line_start":28,"line_end":28,"column_start":8,"column_end":27},"name":"simd_horizontal_max","qualname":"::simd::simd_partial_ord::SimdPartialOrd::simd_horizontal_max","value":"pub fn simd_horizontal_max(Self) -> Self::Element","parent":{"krate":0,"index":750},"children":[],"decl_id":null,"docs":" The max value among all lanes of `self`.\n","sig":null,"attributes":[{"value":"/ The max value among all lanes of `self`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_partial_ord.rs","byte_start":125626,"byte_end":125670,"line_start":27,"line_end":27,"column_start":5,"column_end":49}}]},{"kind":"Trait","id":{"krate":0,"index":789},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_real.rs","byte_start":127539,"byte_end":127552,"line_start":9,"line_end":9,"column_start":11,"column_end":24},"name":"SimdRealField","qualname":"::simd::simd_real::SimdRealField","value":"SimdRealField: SimdPartialOrd + SimdSigned + SimdComplexField<SimdRealField = Self>","parent":null,"children":[{"krate":0,"index":790},{"krate":0,"index":791},{"krate":0,"index":792},{"krate":0,"index":793},{"krate":0,"index":794},{"krate":0,"index":795},{"krate":0,"index":796},{"krate":0,"index":797},{"krate":0,"index":798},{"krate":0,"index":799},{"krate":0,"index":800},{"krate":0,"index":801},{"krate":0,"index":802},{"krate":0,"index":803},{"krate":0,"index":804},{"krate":0,"index":805},{"krate":0,"index":806},{"krate":0,"index":807}],"decl_id":null,"docs":" Lanewise generalization of `RealField` for SIMD reals.","sig":null,"attributes":[{"value":"/ Lanewise generalization of `RealField` for SIMD reals.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_real.rs","byte_start":127266,"byte_end":127324,"line_start":4,"line_end":4,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_real.rs","byte_start":127325,"byte_end":127328,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ Each lane of an SIMD real field should contain one real field.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_real.rs","byte_start":127329,"byte_end":127395,"line_start":6,"line_end":6,"column_start":1,"column_end":67}},{"value":"/ This is implemented by scalar reals like `f32` and `f64` as well as SIMD reals like `packed_simd::f32x4`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_real.rs","byte_start":127396,"byte_end":127505,"line_start":7,"line_end":7,"column_start":1,"column_end":110}},{"value":"allow(missing_docs)","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_real.rs","byte_start":127506,"byte_end":127528,"line_start":8,"line_end":8,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":790},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_real.rs","byte_start":127842,"byte_end":127855,"line_start":16,"line_end":16,"column_start":8,"column_end":21},"name":"simd_copysign","qualname":"::simd::simd_real::SimdRealField::simd_copysign","value":"pub fn simd_copysign(Self, Self) -> Self","parent":{"krate":0,"index":789},"children":[],"decl_id":null,"docs":" Copies the sign of `sign` to `self`.","sig":null,"attributes":[{"value":"/ Copies the sign of `sign` to `self`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_real.rs","byte_start":127633,"byte_end":127673,"line_start":12,"line_end":12,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_real.rs","byte_start":127678,"byte_end":127681,"line_start":13,"line_end":13,"column_start":5,"column_end":8}},{"value":"/ - Returns `self.simd_abs()` if `sign` is positive or positive-zero.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_real.rs","byte_start":127686,"byte_end":127757,"line_start":14,"line_end":14,"column_start":5,"column_end":76}},{"value":"/ - Returns `-self.simd_abs()` if `sign` is negative or negative-zero.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_real.rs","byte_start":127762,"byte_end":127834,"line_start":15,"line_end":15,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":791},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_real.rs","byte_start":127890,"byte_end":127900,"line_start":17,"line_end":17,"column_start":8,"column_end":18},"name":"simd_atan2","qualname":"::simd::simd_real::SimdRealField::simd_atan2","value":"pub fn simd_atan2(Self, Self) -> Self","parent":{"krate":0,"index":789},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":792},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_real.rs","byte_start":127937,"byte_end":127957,"line_start":19,"line_end":19,"column_start":8,"column_end":28},"name":"simd_default_epsilon","qualname":"::simd::simd_real::SimdRealField::simd_default_epsilon","value":"pub fn simd_default_epsilon() -> Self","parent":{"krate":0,"index":789},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":793},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_real.rs","byte_start":127976,"byte_end":127983,"line_start":20,"line_end":20,"column_start":8,"column_end":15},"name":"simd_pi","qualname":"::simd::simd_real::SimdRealField::simd_pi","value":"pub fn simd_pi() -> Self","parent":{"krate":0,"index":789},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":794},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_real.rs","byte_start":128002,"byte_end":128013,"line_start":21,"line_end":21,"column_start":8,"column_end":19},"name":"simd_two_pi","qualname":"::simd::simd_real::SimdRealField::simd_two_pi","value":"pub fn simd_two_pi() -> Self","parent":{"krate":0,"index":789},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":795},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_real.rs","byte_start":128032,"byte_end":128046,"line_start":22,"line_end":22,"column_start":8,"column_end":22},"name":"simd_frac_pi_2","qualname":"::simd::simd_real::SimdRealField::simd_frac_pi_2","value":"pub fn simd_frac_pi_2() -> Self","parent":{"krate":0,"index":789},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":796},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_real.rs","byte_start":128065,"byte_end":128079,"line_start":23,"line_end":23,"column_start":8,"column_end":22},"name":"simd_frac_pi_3","qualname":"::simd::simd_real::SimdRealField::simd_frac_pi_3","value":"pub fn simd_frac_pi_3() -> Self","parent":{"krate":0,"index":789},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":797},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_real.rs","byte_start":128098,"byte_end":128112,"line_start":24,"line_end":24,"column_start":8,"column_end":22},"name":"simd_frac_pi_4","qualname":"::simd::simd_real::SimdRealField::simd_frac_pi_4","value":"pub fn simd_frac_pi_4() -> Self","parent":{"krate":0,"index":789},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":798},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_real.rs","byte_start":128131,"byte_end":128145,"line_start":25,"line_end":25,"column_start":8,"column_end":22},"name":"simd_frac_pi_6","qualname":"::simd::simd_real::SimdRealField::simd_frac_pi_6","value":"pub fn simd_frac_pi_6() -> Self","parent":{"krate":0,"index":789},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":799},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_real.rs","byte_start":128164,"byte_end":128178,"line_start":26,"line_end":26,"column_start":8,"column_end":22},"name":"simd_frac_pi_8","qualname":"::simd::simd_real::SimdRealField::simd_frac_pi_8","value":"pub fn simd_frac_pi_8() -> Self","parent":{"krate":0,"index":789},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":800},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_real.rs","byte_start":128197,"byte_end":128211,"line_start":27,"line_end":27,"column_start":8,"column_end":22},"name":"simd_frac_1_pi","qualname":"::simd::simd_real::SimdRealField::simd_frac_1_pi","value":"pub fn simd_frac_1_pi() -> Self","parent":{"krate":0,"index":789},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":801},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_real.rs","byte_start":128230,"byte_end":128244,"line_start":28,"line_end":28,"column_start":8,"column_end":22},"name":"simd_frac_2_pi","qualname":"::simd::simd_real::SimdRealField::simd_frac_2_pi","value":"pub fn simd_frac_2_pi() -> Self","parent":{"krate":0,"index":789},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":802},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_real.rs","byte_start":128263,"byte_end":128282,"line_start":29,"line_end":29,"column_start":8,"column_end":27},"name":"simd_frac_2_sqrt_pi","qualname":"::simd::simd_real::SimdRealField::simd_frac_2_sqrt_pi","value":"pub fn simd_frac_2_sqrt_pi() -> Self","parent":{"krate":0,"index":789},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":803},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_real.rs","byte_start":128302,"byte_end":128308,"line_start":31,"line_end":31,"column_start":8,"column_end":14},"name":"simd_e","qualname":"::simd::simd_real::SimdRealField::simd_e","value":"pub fn simd_e() -> Self","parent":{"krate":0,"index":789},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":804},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_real.rs","byte_start":128327,"byte_end":128338,"line_start":32,"line_end":32,"column_start":8,"column_end":19},"name":"simd_log2_e","qualname":"::simd::simd_real::SimdRealField::simd_log2_e","value":"pub fn simd_log2_e() -> Self","parent":{"krate":0,"index":789},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":805},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_real.rs","byte_start":128357,"byte_end":128369,"line_start":33,"line_end":33,"column_start":8,"column_end":20},"name":"simd_log10_e","qualname":"::simd::simd_real::SimdRealField::simd_log10_e","value":"pub fn simd_log10_e() -> Self","parent":{"krate":0,"index":789},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":806},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_real.rs","byte_start":128388,"byte_end":128397,"line_start":34,"line_end":34,"column_start":8,"column_end":17},"name":"simd_ln_2","qualname":"::simd::simd_real::SimdRealField::simd_ln_2","value":"pub fn simd_ln_2() -> Self","parent":{"krate":0,"index":789},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":807},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_real.rs","byte_start":128416,"byte_end":128426,"line_start":35,"line_end":35,"column_start":8,"column_end":18},"name":"simd_ln_10","qualname":"::simd::simd_real::SimdRealField::simd_ln_10","value":"pub fn simd_ln_10() -> Self","parent":{"krate":0,"index":789},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":835},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_signed.rs","byte_start":130279,"byte_end":130289,"line_start":5,"line_end":5,"column_start":11,"column_end":21},"name":"SimdSigned","qualname":"::simd::simd_signed::SimdSigned","value":"SimdSigned: SimdValue","parent":null,"children":[{"krate":0,"index":836},{"krate":0,"index":837},{"krate":0,"index":838},{"krate":0,"index":839},{"krate":0,"index":840}],"decl_id":null,"docs":" A lane-wise generalization of [`num::Signed`](https://rust-num.github.io/num/num/trait.Signed.html) for SIMD values.\n","sig":null,"attributes":[{"value":"/ A lane-wise generalization of [`num::Signed`](https://rust-num.github.io/num/num/trait.Signed.html) for SIMD values.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_signed.rs","byte_start":130148,"byte_end":130268,"line_start":4,"line_end":4,"column_start":1,"column_end":121}}]},{"kind":"Method","id":{"krate":0,"index":836},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_signed.rs","byte_start":130361,"byte_end":130369,"line_start":7,"line_end":7,"column_start":8,"column_end":16},"name":"simd_abs","qualname":"::simd::simd_signed::SimdSigned::simd_abs","value":"pub fn simd_abs(&Self) -> Self","parent":{"krate":0,"index":835},"children":[],"decl_id":null,"docs":" The absolute value of each lane of `self`.\n","sig":null,"attributes":[{"value":"/ The absolute value of each lane of `self`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_signed.rs","byte_start":130307,"byte_end":130353,"line_start":6,"line_end":6,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":837},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_signed.rs","byte_start":130660,"byte_end":130672,"line_start":12,"line_end":12,"column_start":8,"column_end":20},"name":"simd_abs_sub","qualname":"::simd::simd_signed::SimdSigned::simd_abs_sub","value":"pub fn simd_abs_sub(&Self, &Self) -> Self","parent":{"krate":0,"index":835},"children":[],"decl_id":null,"docs":" The absolute difference of each lane of `self`.","sig":null,"attributes":[{"value":"/ The absolute difference of each lane of `self`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_signed.rs","byte_start":130390,"byte_end":130441,"line_start":8,"line_end":8,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_signed.rs","byte_start":130446,"byte_end":130449,"line_start":9,"line_end":9,"column_start":5,"column_end":8}},{"value":"/ For each lane, this zero if the lane of self is less than or equal to the corresponding lane of other","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_signed.rs","byte_start":130454,"byte_end":130559,"line_start":10,"line_end":10,"column_start":5,"column_end":110}},{"value":"/ otherwise the difference between the lane of self and the lane of other is returned.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_signed.rs","byte_start":130564,"byte_end":130652,"line_start":11,"line_end":11,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":838},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_signed.rs","byte_start":130753,"byte_end":130764,"line_start":14,"line_end":14,"column_start":8,"column_end":19},"name":"simd_signum","qualname":"::simd::simd_signed::SimdSigned::simd_signum","value":"pub fn simd_signum(&Self) -> Self","parent":{"krate":0,"index":835},"children":[],"decl_id":null,"docs":" The signum of each lane of `Self`.\n","sig":null,"attributes":[{"value":"/ The signum of each lane of `Self`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_signed.rs","byte_start":130707,"byte_end":130745,"line_start":13,"line_end":13,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":839},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_signed.rs","byte_start":130826,"byte_end":130842,"line_start":16,"line_end":16,"column_start":8,"column_end":24},"name":"is_simd_positive","qualname":"::simd::simd_signed::SimdSigned::is_simd_positive","value":"pub fn is_simd_positive(&Self) -> Self::SimdBool","parent":{"krate":0,"index":835},"children":[],"decl_id":null,"docs":" Tests which lane is positive.\n","sig":null,"attributes":[{"value":"/ Tests which lane is positive.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_signed.rs","byte_start":130785,"byte_end":130818,"line_start":15,"line_end":15,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":840},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_signed.rs","byte_start":130914,"byte_end":130930,"line_start":18,"line_end":18,"column_start":8,"column_end":24},"name":"is_simd_negative","qualname":"::simd::simd_signed::SimdSigned::is_simd_negative","value":"pub fn is_simd_negative(&Self) -> Self::SimdBool","parent":{"krate":0,"index":835},"children":[],"decl_id":null,"docs":" Tests which lane is negative.\n","sig":null,"attributes":[{"value":"/ Tests which lane is negative.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_signed.rs","byte_start":130873,"byte_end":130906,"line_start":17,"line_end":17,"column_start":5,"column_end":38}}]},{"kind":"Trait","id":{"krate":0,"index":852},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_value.rs","byte_start":131591,"byte_end":131600,"line_start":4,"line_end":4,"column_start":11,"column_end":20},"name":"SimdValue","qualname":"::simd::simd_value::SimdValue","value":"SimdValue: Sized","parent":null,"children":[{"krate":0,"index":853},{"krate":0,"index":854},{"krate":0,"index":855},{"krate":0,"index":856},{"krate":0,"index":857},{"krate":0,"index":858},{"krate":0,"index":859},{"krate":0,"index":860},{"krate":0,"index":861},{"krate":0,"index":862},{"krate":0,"index":864}],"decl_id":null,"docs":" Base trait for every SIMD types.\n","sig":null,"attributes":[{"value":"/ Base trait for every SIMD types.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_value.rs","byte_start":131544,"byte_end":131580,"line_start":3,"line_end":3,"column_start":1,"column_end":37}}]},{"kind":"Type","id":{"krate":0,"index":853},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_value.rs","byte_start":131685,"byte_end":131692,"line_start":6,"line_end":6,"column_start":10,"column_end":17},"name":"Element","qualname":"::simd::simd_value::SimdValue::Element","value":"type Element: SimdValue<Element = Self::Element, SimdBool = bool>;","parent":{"krate":0,"index":852},"children":[],"decl_id":null,"docs":" The type of the elements of each lane of this SIMD value.\n","sig":null,"attributes":[{"value":"/ The type of the elements of each lane of this SIMD value.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_value.rs","byte_start":131614,"byte_end":131675,"line_start":5,"line_end":5,"column_start":5,"column_end":66}}]},{"kind":"Type","id":{"krate":0,"index":854},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_value.rs","byte_start":131825,"byte_end":131833,"line_start":8,"line_end":8,"column_start":10,"column_end":18},"name":"SimdBool","qualname":"::simd::simd_value::SimdValue::SimdBool","value":"type SimdBool: SimdBool;","parent":{"krate":0,"index":852},"children":[],"decl_id":null,"docs":" Type of the result of comparing two SIMD values like `self`.\n","sig":null,"attributes":[{"value":"/ Type of the result of comparing two SIMD values like `self`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_value.rs","byte_start":131751,"byte_end":131815,"line_start":7,"line_end":7,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":855},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_value.rs","byte_start":131901,"byte_end":131906,"line_start":11,"line_end":11,"column_start":8,"column_end":13},"name":"lanes","qualname":"::simd::simd_value::SimdValue::lanes","value":"pub fn lanes() -> usize","parent":{"krate":0,"index":852},"children":[],"decl_id":null,"docs":" The number of lanes of this SIMD value.\n","sig":null,"attributes":[{"value":"/ The number of lanes of this SIMD value.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_value.rs","byte_start":131850,"byte_end":131893,"line_start":10,"line_end":10,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":856},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_value.rs","byte_start":131990,"byte_end":131995,"line_start":13,"line_end":13,"column_start":8,"column_end":13},"name":"splat","qualname":"::simd::simd_value::SimdValue::splat","value":"pub fn splat(Self::Element) -> Self","parent":{"krate":0,"index":852},"children":[],"decl_id":null,"docs":" Initializes an SIMD value with each lanes set to `val`.\n","sig":null,"attributes":[{"value":"/ Initializes an SIMD value with each lanes set to `val`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_value.rs","byte_start":131923,"byte_end":131982,"line_start":12,"line_end":12,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":857},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_value.rs","byte_start":132122,"byte_end":132129,"line_start":17,"line_end":17,"column_start":8,"column_end":15},"name":"extract","qualname":"::simd::simd_value::SimdValue::extract","value":"pub fn extract(&Self, usize) -> Self::Element","parent":{"krate":0,"index":852},"children":[],"decl_id":null,"docs":" Extracts the i-th lane of `self`.","sig":null,"attributes":[{"value":"/ Extracts the i-th lane of `self`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_value.rs","byte_start":132029,"byte_end":132066,"line_start":14,"line_end":14,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_value.rs","byte_start":132071,"byte_end":132074,"line_start":15,"line_end":15,"column_start":5,"column_end":8}},{"value":"/ Panics if `i >= Self::lanes()`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_value.rs","byte_start":132079,"byte_end":132114,"line_start":16,"line_end":16,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":858},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_value.rs","byte_start":132244,"byte_end":132261,"line_start":19,"line_end":19,"column_start":15,"column_end":32},"name":"extract_unchecked","qualname":"::simd::simd_value::SimdValue::extract_unchecked","value":"pub unsafe fn extract_unchecked(&Self, usize) -> Self::Element","parent":{"krate":0,"index":852},"children":[],"decl_id":null,"docs":" Extracts the i-th lane of `self` without bound-checking.\n","sig":null,"attributes":[{"value":"/ Extracts the i-th lane of `self` without bound-checking.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_value.rs","byte_start":132169,"byte_end":132229,"line_start":18,"line_end":18,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":859},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_value.rs","byte_start":132403,"byte_end":132410,"line_start":23,"line_end":23,"column_start":8,"column_end":15},"name":"replace","qualname":"::simd::simd_value::SimdValue::replace","value":"pub fn replace(&mut Self, usize, Self::Element)","parent":{"krate":0,"index":852},"children":[],"decl_id":null,"docs":" Replaces the i-th lane of `self` by `val`.","sig":null,"attributes":[{"value":"/ Replaces the i-th lane of `self` by `val`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_value.rs","byte_start":132301,"byte_end":132347,"line_start":20,"line_end":20,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_value.rs","byte_start":132352,"byte_end":132355,"line_start":21,"line_end":21,"column_start":5,"column_end":8}},{"value":"/ Panics if `i >= Self::lanes()`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_value.rs","byte_start":132360,"byte_end":132395,"line_start":22,"line_end":22,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":860},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_value.rs","byte_start":132541,"byte_end":132558,"line_start":25,"line_end":25,"column_start":15,"column_end":32},"name":"replace_unchecked","qualname":"::simd::simd_value::SimdValue::replace_unchecked","value":"pub unsafe fn replace_unchecked(&mut Self, usize, Self::Element)","parent":{"krate":0,"index":852},"children":[],"decl_id":null,"docs":" Replaces the i-th lane of `self` by `val` without bound-checking.\n","sig":null,"attributes":[{"value":"/ Replaces the i-th lane of `self` by `val` without bound-checking.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_value.rs","byte_start":132457,"byte_end":132526,"line_start":24,"line_end":24,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":861},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_value.rs","byte_start":132908,"byte_end":132914,"line_start":31,"line_end":31,"column_start":8,"column_end":14},"name":"select","qualname":"::simd::simd_value::SimdValue::select","value":"pub fn select(Self, Self::SimdBool, Self) -> Self","parent":{"krate":0,"index":852},"children":[],"decl_id":null,"docs":" Merges `self` and `other` depending on the lanes of `cond`.","sig":null,"attributes":[{"value":"/ Merges `self` and `other` depending on the lanes of `cond`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_value.rs","byte_start":132606,"byte_end":132669,"line_start":27,"line_end":27,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_value.rs","byte_start":132674,"byte_end":132677,"line_start":28,"line_end":28,"column_start":5,"column_end":8}},{"value":"/ For each lane of `cond` with bits set to 1, the result's will contain the value of the lane of `self`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_value.rs","byte_start":132682,"byte_end":132788,"line_start":29,"line_end":29,"column_start":5,"column_end":111}},{"value":"/ For each lane of `cond` with bits set to 0, the result's will contain the value of the lane of `other`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_value.rs","byte_start":132793,"byte_end":132900,"line_start":30,"line_end":30,"column_start":5,"column_end":112}}]},{"kind":"Method","id":{"krate":0,"index":862},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_value.rs","byte_start":133240,"byte_end":133249,"line_start":39,"line_end":39,"column_start":8,"column_end":17},"name":"map_lanes","qualname":"::simd::simd_value::SimdValue::map_lanes","value":"pub fn map_lanes<impl Fn(Self::Element) -> Self::Element: Fn(Self::Element) ->\n                 Self::Element>(Self, impl Fn(Self::Element) -> Self::Element)\n-> Self where Self: Clone","parent":{"krate":0,"index":852},"children":[],"decl_id":null,"docs":" Applies a function to each lane of `self`.","sig":null,"attributes":[{"value":"/ Applies a function to each lane of `self`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_value.rs","byte_start":132970,"byte_end":133016,"line_start":33,"line_end":33,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_value.rs","byte_start":133021,"byte_end":133024,"line_start":34,"line_end":34,"column_start":5,"column_end":8}},{"value":"/ Note that, while convenient, this method can be extremely slow as this","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_value.rs","byte_start":133029,"byte_end":133103,"line_start":35,"line_end":35,"column_start":5,"column_end":79}},{"value":"/ requires to extract each lane of `self` and then combine them again into","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_value.rs","byte_start":133108,"byte_end":133184,"line_start":36,"line_end":36,"column_start":5,"column_end":81}},{"value":"/ a new SIMD value.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_value.rs","byte_start":133189,"byte_end":133210,"line_start":37,"line_end":37,"column_start":5,"column_end":26}},{"value":"inline(always)","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_value.rs","byte_start":133215,"byte_end":133232,"line_start":38,"line_end":38,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":864},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_value.rs","byte_start":133851,"byte_end":133864,"line_start":58,"line_end":58,"column_start":8,"column_end":21},"name":"zip_map_lanes","qualname":"::simd::simd_value::SimdValue::zip_map_lanes","value":"pub fn zip_map_lanes<impl Fn(Self::Element, Self::Element) -> Self::Element: Fn(Self::Element,\n                                                                                Self::Element)\n                     ->\n                     Self::Element>(Self, Self,\n                                    impl Fn(Self::Element, Self::Element) -> Self::Element)\n-> Self where Self: Clone","parent":{"krate":0,"index":852},"children":[],"decl_id":null,"docs":" Applies a function to each lane of `self` paired with the corresponding lane of `b`.","sig":null,"attributes":[{"value":"/ Applies a function to each lane of `self` paired with the corresponding lane of `b`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_value.rs","byte_start":133539,"byte_end":133627,"line_start":52,"line_end":52,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_value.rs","byte_start":133632,"byte_end":133635,"line_start":53,"line_end":53,"column_start":5,"column_end":8}},{"value":"/ Note that, while convenient, this method can be extremely slow as this","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_value.rs","byte_start":133640,"byte_end":133714,"line_start":54,"line_end":54,"column_start":5,"column_end":79}},{"value":"/ requires to extract each lane of `self` and then combine them again into","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_value.rs","byte_start":133719,"byte_end":133795,"line_start":55,"line_end":55,"column_start":5,"column_end":81}},{"value":"/ a new SIMD value.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_value.rs","byte_start":133800,"byte_end":133821,"line_start":56,"line_end":56,"column_start":5,"column_end":26}},{"value":"inline(always)","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_value.rs","byte_start":133826,"byte_end":133843,"line_start":57,"line_end":57,"column_start":5,"column_end":22}}]},{"kind":"Trait","id":{"krate":0,"index":866},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_value.rs","byte_start":134684,"byte_end":134702,"line_start":86,"line_end":86,"column_start":11,"column_end":29},"name":"PrimitiveSimdValue","qualname":"::simd::simd_value::PrimitiveSimdValue","value":"PrimitiveSimdValue: Copy + SimdValue","parent":null,"children":[],"decl_id":null,"docs":" Marker trait implemented by SIMD and non-SIMD primitive numeric values.","sig":null,"attributes":[{"value":"/ Marker trait implemented by SIMD and non-SIMD primitive numeric values.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_value.rs","byte_start":134313,"byte_end":134388,"line_start":80,"line_end":80,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_value.rs","byte_start":134389,"byte_end":134392,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ This trait is useful for some disambiguations when writing blanked impls.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_value.rs","byte_start":134393,"byte_end":134470,"line_start":82,"line_end":82,"column_start":1,"column_end":78}},{"value":"/ This is implemented by all unsigned integer, integer, float, and complex types, as","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_value.rs","byte_start":134471,"byte_end":134557,"line_start":83,"line_end":83,"column_start":1,"column_end":87}},{"value":"/ with only one lane, i.e., `f32`, `f64`, `u32`, `i64`, etc. as well as SIMD types like","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_value.rs","byte_start":134558,"byte_end":134647,"line_start":84,"line_end":84,"column_start":1,"column_end":90}},{"value":"/ `f32x4, i32x8`, etc..","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_value.rs","byte_start":134648,"byte_end":134673,"line_start":85,"line_end":85,"column_start":1,"column_end":26}}]}],"impls":[{"id":4,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/complex.rs","byte_start":31773,"byte_end":31780,"line_start":1036,"line_end":1036,"column_start":63,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":141},{"krate":0,"index":142},{"krate":0,"index":143},{"krate":0,"index":144},{"krate":0,"index":145},{"krate":0,"index":146},{"krate":0,"index":147},{"krate":0,"index":148},{"krate":0,"index":149},{"krate":0,"index":150},{"krate":0,"index":151},{"krate":0,"index":152},{"krate":0,"index":153},{"krate":0,"index":154},{"krate":0,"index":155},{"krate":0,"index":156},{"krate":0,"index":157},{"krate":0,"index":158},{"krate":0,"index":159},{"krate":0,"index":160},{"krate":0,"index":161},{"krate":0,"index":162},{"krate":0,"index":163},{"krate":0,"index":164},{"krate":0,"index":165},{"krate":0,"index":166},{"krate":0,"index":167},{"krate":0,"index":168},{"krate":0,"index":169},{"krate":0,"index":170},{"krate":0,"index":171},{"krate":0,"index":172},{"krate":0,"index":173},{"krate":0,"index":174},{"krate":0,"index":175},{"krate":0,"index":176},{"krate":0,"index":177},{"krate":0,"index":178},{"krate":0,"index":179},{"krate":0,"index":180},{"krate":0,"index":181},{"krate":0,"index":182},{"krate":0,"index":183},{"krate":0,"index":184},{"krate":0,"index":185},{"krate":0,"index":186},{"krate":0,"index":187},{"krate":0,"index":188},{"krate":0,"index":189}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/field.rs","byte_start":44860,"byte_end":44861,"line_start":20,"line_end":20,"column_start":37,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/field.rs","byte_start":44952,"byte_end":44953,"line_start":21,"line_end":21,"column_start":37,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/field.rs","byte_start":45044,"byte_end":45045,"line_start":22,"line_end":22,"column_start":37,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/field.rs","byte_start":45136,"byte_end":45137,"line_start":23,"line_end":23,"column_start":37,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/field.rs","byte_start":45214,"byte_end":45215,"line_start":24,"line_end":24,"column_start":23,"column_end":24},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/field.rs","byte_start":45441,"byte_end":45448,"line_start":29,"line_end":29,"column_start":75,"column_end":82},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/subset.rs","byte_start":49716,"byte_end":49718,"line_start":87,"line_end":87,"column_start":47,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":279},{"krate":0,"index":280},{"krate":0,"index":281},{"krate":0,"index":282}],"docs":"","sig":null,"attributes":[]},{"id":150,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/subset.rs","byte_start":51934,"byte_end":51941,"line_start":169,"line_end":169,"column_start":56,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":287},{"krate":0,"index":288},{"krate":0,"index":289}],"docs":"","sig":null,"attributes":[]},{"id":164,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_complex.rs","byte_start":117093,"byte_end":117094,"line_start":37,"line_end":37,"column_start":44,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":671},{"krate":0,"index":672},{"krate":0,"index":673},{"krate":0,"index":674},{"krate":0,"index":675},{"krate":0,"index":676},{"krate":0,"index":677},{"krate":0,"index":678},{"krate":0,"index":679},{"krate":0,"index":680},{"krate":0,"index":681},{"krate":0,"index":682},{"krate":0,"index":683},{"krate":0,"index":684},{"krate":0,"index":685},{"krate":0,"index":686},{"krate":0,"index":687},{"krate":0,"index":688},{"krate":0,"index":689},{"krate":0,"index":690},{"krate":0,"index":691},{"krate":0,"index":692},{"krate":0,"index":693},{"krate":0,"index":694},{"krate":0,"index":695},{"krate":0,"index":696},{"krate":0,"index":697},{"krate":0,"index":698},{"krate":0,"index":699},{"krate":0,"index":700},{"krate":0,"index":701},{"krate":0,"index":702},{"krate":0,"index":703},{"krate":0,"index":704},{"krate":0,"index":705},{"krate":0,"index":706},{"krate":0,"index":707},{"krate":0,"index":708},{"krate":0,"index":709},{"krate":0,"index":710},{"krate":0,"index":711},{"krate":0,"index":712},{"krate":0,"index":713},{"krate":0,"index":714},{"krate":0,"index":715},{"krate":0,"index":716},{"krate":0,"index":717},{"krate":0,"index":718},{"krate":0,"index":719},{"krate":0,"index":720},{"krate":0,"index":721},{"krate":0,"index":722},{"krate":0,"index":723},{"krate":0,"index":724}],"docs":"","sig":null,"attributes":[]},{"id":165,"kind":"Inherent","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_option.rs","byte_start":122698,"byte_end":122708,"line_start":30,"line_end":30,"column_start":20,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":739},{"krate":0,"index":740},{"krate":0,"index":741},{"krate":0,"index":742},{"krate":0,"index":743},{"krate":0,"index":744}],"docs":"","sig":null,"attributes":[]},{"id":166,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_partial_ord.rs","byte_start":125806,"byte_end":125807,"line_start":31,"line_end":31,"column_start":82,"column_end":83},"value":"","parent":null,"children":[{"krate":0,"index":764},{"krate":0,"index":765},{"krate":0,"index":766},{"krate":0,"index":767},{"krate":0,"index":768},{"krate":0,"index":769},{"krate":0,"index":770},{"krate":0,"index":771},{"krate":0,"index":772},{"krate":0,"index":773},{"krate":0,"index":774}],"docs":"","sig":null,"attributes":[]},{"id":167,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_real.rs","byte_start":128521,"byte_end":128522,"line_start":39,"line_end":39,"column_start":38,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":810},{"krate":0,"index":811},{"krate":0,"index":812},{"krate":0,"index":813},{"krate":0,"index":814},{"krate":0,"index":815},{"krate":0,"index":816},{"krate":0,"index":817},{"krate":0,"index":818},{"krate":0,"index":819},{"krate":0,"index":820},{"krate":0,"index":821},{"krate":0,"index":822},{"krate":0,"index":823},{"krate":0,"index":824},{"krate":0,"index":825},{"krate":0,"index":826},{"krate":0,"index":827}],"docs":"","sig":null,"attributes":[]},{"id":168,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_signed.rs","byte_start":131020,"byte_end":131021,"line_start":21,"line_end":21,"column_start":61,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":843},{"krate":0,"index":844},{"krate":0,"index":845},{"krate":0,"index":846},{"krate":0,"index":847}],"docs":"","sig":null,"attributes":[]},{"id":169,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_value.rs","byte_start":134771,"byte_end":134778,"line_start":88,"line_end":88,"column_start":47,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":869},{"krate":0,"index":870},{"krate":0,"index":871},{"krate":0,"index":872},{"krate":0,"index":873},{"krate":0,"index":874},{"krate":0,"index":875},{"krate":0,"index":876},{"krate":0,"index":877}],"docs":"","sig":null,"attributes":[]},{"id":170,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_value.rs","byte_start":136201,"byte_end":136208,"line_start":142,"line_end":142,"column_start":65,"column_end":72},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/lib.rs","byte_start":2009,"byte_end":2015,"line_start":41,"line_end":41,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":4}},{"kind":"Mod","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/lib.rs","byte_start":2025,"byte_end":2029,"line_start":42,"line_end":42,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":291}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/real.rs","byte_start":2832,"byte_end":2844,"line_start":16,"line_end":16,"column_start":5,"column_end":17},"kind":"SuperTrait","from":{"krate":0,"index":134},"to":{"krate":0,"index":62}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/real.rs","byte_start":2869,"byte_end":2879,"line_start":17,"line_end":17,"column_start":7,"column_end":17},"kind":"SuperTrait","from":{"krate":20,"index":66},"to":{"krate":0,"index":62}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/real.rs","byte_start":2902,"byte_end":2908,"line_start":18,"line_end":18,"column_start":7,"column_end":13},"kind":"SuperTrait","from":{"krate":20,"index":107},"to":{"krate":0,"index":62}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/real.rs","byte_start":2931,"byte_end":2937,"line_start":19,"line_end":19,"column_start":7,"column_end":13},"kind":"SuperTrait","from":{"krate":19,"index":898},"to":{"krate":0,"index":62}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/real.rs","byte_start":2944,"byte_end":2951,"line_start":20,"line_end":20,"column_start":7,"column_end":14},"kind":"SuperTrait","from":{"krate":19,"index":230},"to":{"krate":0,"index":62}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/real.rs","byte_start":2958,"byte_end":2968,"line_start":21,"line_end":21,"column_start":7,"column_end":17},"kind":"SuperTrait","from":{"krate":2,"index":2523},"to":{"krate":0,"index":62}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/complex.rs","byte_start":14419,"byte_end":14427,"line_start":163,"line_end":163,"column_start":5,"column_end":13},"kind":"SuperTrait","from":{"krate":0,"index":264},"to":{"krate":0,"index":134}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/complex.rs","byte_start":14440,"byte_end":14450,"line_start":164,"line_end":164,"column_start":7,"column_end":17},"kind":"SuperTrait","from":{"krate":0,"index":270},"to":{"krate":0,"index":134}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/complex.rs","byte_start":14462,"byte_end":14467,"line_start":165,"line_end":165,"column_start":7,"column_end":12},"kind":"SuperTrait","from":{"krate":0,"index":253},"to":{"krate":0,"index":134}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/complex.rs","byte_start":14507,"byte_end":14511,"line_start":166,"line_end":166,"column_start":7,"column_end":11},"kind":"SuperTrait","from":{"krate":2,"index":2835},"to":{"krate":0,"index":134}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/complex.rs","byte_start":14518,"byte_end":14521,"line_start":167,"line_end":167,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":2,"index":2919},"to":{"krate":0,"index":134}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/complex.rs","byte_start":14591,"byte_end":14595,"line_start":170,"line_end":170,"column_start":7,"column_end":11},"kind":"SuperTrait","from":{"krate":2,"index":2825},"to":{"krate":0,"index":134}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/complex.rs","byte_start":14602,"byte_end":14606,"line_start":171,"line_end":171,"column_start":7,"column_end":11},"kind":"SuperTrait","from":{"krate":2,"index":2837},"to":{"krate":0,"index":134}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/complex.rs","byte_start":14613,"byte_end":14616,"line_start":172,"line_end":172,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":2,"index":3503},"to":{"krate":0,"index":134}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/complex.rs","byte_start":14637,"byte_end":14642,"line_start":174,"line_end":174,"column_start":7,"column_end":12},"kind":"SuperTrait","from":{"krate":2,"index":8829},"to":{"krate":0,"index":134}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/complex.rs","byte_start":14649,"byte_end":14662,"line_start":175,"line_end":175,"column_start":7,"column_end":20},"kind":"SuperTrait","from":{"krate":19,"index":320},"to":{"krate":0,"index":134}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/complex.rs","byte_start":14669,"byte_end":14676,"line_start":176,"line_end":176,"column_start":7,"column_end":14},"kind":"SuperTrait","from":{"krate":2,"index":8836},"to":{"krate":0,"index":134}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/complex.rs","byte_start":31773,"byte_end":31780,"line_start":1036,"line_end":1036,"column_start":63,"column_end":70},"kind":{"Impl":{"id":4}},"from":{"krate":21,"index":523},"to":{"krate":0,"index":134}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/field.rs","byte_start":44159,"byte_end":44164,"line_start":6,"line_end":6,"column_start":36,"column_end":41},"kind":"SuperTrait","from":{"krate":2,"index":2830},"to":{"krate":0,"index":230}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/field.rs","byte_start":44167,"byte_end":44170,"line_start":6,"line_end":6,"column_start":44,"column_end":47},"kind":"SuperTrait","from":{"krate":2,"index":2892},"to":{"krate":0,"index":230}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/field.rs","byte_start":44195,"byte_end":44204,"line_start":6,"line_end":6,"column_start":72,"column_end":81},"kind":"SuperTrait","from":{"krate":2,"index":2923},"to":{"krate":0,"index":230}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/field.rs","byte_start":44325,"byte_end":44330,"line_start":9,"line_end":9,"column_start":36,"column_end":41},"kind":"SuperTrait","from":{"krate":2,"index":2830},"to":{"krate":0,"index":232}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/field.rs","byte_start":44333,"byte_end":44336,"line_start":9,"line_end":9,"column_start":44,"column_end":47},"kind":"SuperTrait","from":{"krate":2,"index":2897},"to":{"krate":0,"index":232}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/field.rs","byte_start":44361,"byte_end":44370,"line_start":9,"line_end":9,"column_start":72,"column_end":81},"kind":"SuperTrait","from":{"krate":2,"index":2927},"to":{"krate":0,"index":232}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/field.rs","byte_start":44491,"byte_end":44496,"line_start":12,"line_end":12,"column_start":36,"column_end":41},"kind":"SuperTrait","from":{"krate":2,"index":2830},"to":{"krate":0,"index":234}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/field.rs","byte_start":44499,"byte_end":44502,"line_start":12,"line_end":12,"column_start":44,"column_end":47},"kind":"SuperTrait","from":{"krate":2,"index":2902},"to":{"krate":0,"index":234}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/field.rs","byte_start":44527,"byte_end":44536,"line_start":12,"line_end":12,"column_start":72,"column_end":81},"kind":"SuperTrait","from":{"krate":2,"index":2931},"to":{"krate":0,"index":234}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/field.rs","byte_start":44657,"byte_end":44662,"line_start":15,"line_end":15,"column_start":36,"column_end":41},"kind":"SuperTrait","from":{"krate":2,"index":2830},"to":{"krate":0,"index":236}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/field.rs","byte_start":44665,"byte_end":44668,"line_start":15,"line_end":15,"column_start":44,"column_end":47},"kind":"SuperTrait","from":{"krate":2,"index":2907},"to":{"krate":0,"index":236}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/field.rs","byte_start":44693,"byte_end":44702,"line_start":15,"line_end":15,"column_start":72,"column_end":81},"kind":"SuperTrait","from":{"krate":2,"index":2935},"to":{"krate":0,"index":236}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/field.rs","byte_start":44793,"byte_end":44798,"line_start":18,"line_end":18,"column_start":22,"column_end":27},"kind":"SuperTrait","from":{"krate":2,"index":2830},"to":{"krate":0,"index":238}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/field.rs","byte_start":44801,"byte_end":44804,"line_start":18,"line_end":18,"column_start":30,"column_end":33},"kind":"SuperTrait","from":{"krate":2,"index":2919},"to":{"krate":0,"index":238}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/field.rs","byte_start":44860,"byte_end":44861,"line_start":20,"line_end":20,"column_start":37,"column_end":38},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":240},"to":{"krate":0,"index":230}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/field.rs","byte_start":44952,"byte_end":44953,"line_start":21,"line_end":21,"column_start":37,"column_end":38},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":243},"to":{"krate":0,"index":232}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/field.rs","byte_start":45044,"byte_end":45045,"line_start":22,"line_end":22,"column_start":37,"column_end":38},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":246},"to":{"krate":0,"index":234}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/field.rs","byte_start":45136,"byte_end":45137,"line_start":23,"line_end":23,"column_start":37,"column_end":38},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":249},"to":{"krate":0,"index":236}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/field.rs","byte_start":45214,"byte_end":45215,"line_start":24,"line_end":24,"column_start":23,"column_end":24},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":252},"to":{"krate":0,"index":238}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/field.rs","byte_start":45329,"byte_end":45338,"line_start":27,"line_end":27,"column_start":18,"column_end":27},"kind":"SuperTrait","from":{"krate":0,"index":852},"to":{"krate":0,"index":253}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/field.rs","byte_start":45341,"byte_end":45350,"line_start":27,"line_end":27,"column_start":30,"column_end":39},"kind":"SuperTrait","from":{"krate":19,"index":950},"to":{"krate":0,"index":253}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/field.rs","byte_start":45353,"byte_end":45362,"line_start":27,"line_end":27,"column_start":42,"column_end":51},"kind":"SuperTrait","from":{"krate":0,"index":238},"to":{"krate":0,"index":253}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/field.rs","byte_start":45441,"byte_end":45448,"line_start":29,"line_end":29,"column_start":75,"column_end":82},"kind":{"Impl":{"id":10}},"from":{"krate":21,"index":523},"to":{"krate":0,"index":253}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/subset.rs","byte_start":46925,"byte_end":46930,"line_start":24,"line_end":24,"column_start":24,"column_end":29},"kind":"SuperTrait","from":{"krate":2,"index":2830},"to":{"krate":0,"index":264}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/subset.rs","byte_start":48904,"byte_end":48909,"line_start":64,"line_end":64,"column_start":26,"column_end":31},"kind":"SuperTrait","from":{"krate":2,"index":2830},"to":{"krate":0,"index":270}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/subset.rs","byte_start":49716,"byte_end":49718,"line_start":87,"line_end":87,"column_start":47,"column_end":49},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":278},"to":{"krate":0,"index":270}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/scalar/subset.rs","byte_start":51934,"byte_end":51941,"line_start":169,"line_end":169,"column_start":56,"column_end":63},"kind":{"Impl":{"id":150}},"from":{"krate":21,"index":523},"to":{"krate":0,"index":264}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/auto_simd_impl.rs","byte_start":109937,"byte_end":109946,"line_start":1604,"line_end":1604,"column_start":21,"column_end":30},"kind":"SuperTrait","from":{"krate":0,"index":852},"to":{"krate":0,"index":544}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_bool.rs","byte_start":110915,"byte_end":110919,"line_start":10,"line_end":10,"column_start":5,"column_end":9},"kind":"SuperTrait","from":{"krate":2,"index":2835},"to":{"krate":0,"index":572}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_bool.rs","byte_start":110926,"byte_end":110932,"line_start":11,"line_end":11,"column_start":7,"column_end":13},"kind":"SuperTrait","from":{"krate":2,"index":2948},"to":{"krate":0,"index":572}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_bool.rs","byte_start":110960,"byte_end":110965,"line_start":12,"line_end":12,"column_start":7,"column_end":12},"kind":"SuperTrait","from":{"krate":2,"index":2953},"to":{"krate":0,"index":572}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_bool.rs","byte_start":110993,"byte_end":110999,"line_start":13,"line_end":13,"column_start":7,"column_end":13},"kind":"SuperTrait","from":{"krate":2,"index":2958},"to":{"krate":0,"index":572}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_bool.rs","byte_start":111027,"byte_end":111030,"line_start":14,"line_end":14,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":2,"index":2944},"to":{"krate":0,"index":572}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_complex.rs","byte_start":116571,"byte_end":116579,"line_start":15,"line_end":15,"column_start":5,"column_end":13},"kind":"SuperTrait","from":{"krate":0,"index":264},"to":{"krate":0,"index":667}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_complex.rs","byte_start":116592,"byte_end":116602,"line_start":16,"line_end":16,"column_start":7,"column_end":17},"kind":"SuperTrait","from":{"krate":0,"index":270},"to":{"krate":0,"index":667}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_complex.rs","byte_start":116614,"byte_end":116619,"line_start":17,"line_end":17,"column_start":7,"column_end":12},"kind":"SuperTrait","from":{"krate":0,"index":253},"to":{"krate":0,"index":667}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_complex.rs","byte_start":116626,"byte_end":116630,"line_start":18,"line_end":18,"column_start":7,"column_end":11},"kind":"SuperTrait","from":{"krate":2,"index":2835},"to":{"krate":0,"index":667}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_complex.rs","byte_start":116637,"byte_end":116640,"line_start":19,"line_end":19,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":2,"index":2919},"to":{"krate":0,"index":667}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_complex.rs","byte_start":116710,"byte_end":116714,"line_start":22,"line_end":22,"column_start":7,"column_end":11},"kind":"SuperTrait","from":{"krate":2,"index":2825},"to":{"krate":0,"index":667}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_complex.rs","byte_start":116721,"byte_end":116725,"line_start":23,"line_end":23,"column_start":7,"column_end":11},"kind":"SuperTrait","from":{"krate":2,"index":2837},"to":{"krate":0,"index":667}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_complex.rs","byte_start":116732,"byte_end":116735,"line_start":24,"line_end":24,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":2,"index":3503},"to":{"krate":0,"index":667}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_complex.rs","byte_start":116756,"byte_end":116761,"line_start":26,"line_end":26,"column_start":7,"column_end":12},"kind":"SuperTrait","from":{"krate":2,"index":8829},"to":{"krate":0,"index":667}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_complex.rs","byte_start":116768,"byte_end":116780,"line_start":27,"line_end":27,"column_start":7,"column_end":19},"kind":"SuperTrait","from":{"krate":19,"index":945},"to":{"krate":0,"index":667}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_complex.rs","byte_start":116787,"byte_end":116793,"line_start":28,"line_end":28,"column_start":7,"column_end":13},"kind":"SuperTrait","from":{"krate":19,"index":926},"to":{"krate":0,"index":667}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_complex.rs","byte_start":116800,"byte_end":116809,"line_start":29,"line_end":29,"column_start":7,"column_end":16},"kind":"SuperTrait","from":{"krate":2,"index":2480},"to":{"krate":0,"index":667}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_complex.rs","byte_start":117093,"byte_end":117094,"line_start":37,"line_end":37,"column_start":44,"column_end":45},"kind":{"Impl":{"id":164}},"from":{"krate":0,"index":670},"to":{"krate":0,"index":667}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_option.rs","byte_start":122698,"byte_end":122708,"line_start":30,"line_end":30,"column_start":20,"column_end":30},"kind":{"Impl":{"id":165}},"from":{"krate":0,"index":733},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_partial_ord.rs","byte_start":124621,"byte_end":124630,"line_start":4,"line_end":4,"column_start":27,"column_end":36},"kind":"SuperTrait","from":{"krate":0,"index":852},"to":{"krate":0,"index":750}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_partial_ord.rs","byte_start":125806,"byte_end":125807,"line_start":31,"line_end":31,"column_start":82,"column_end":83},"kind":{"Impl":{"id":166}},"from":{"krate":0,"index":763},"to":{"krate":0,"index":750}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_real.rs","byte_start":127558,"byte_end":127572,"line_start":10,"line_end":10,"column_start":5,"column_end":19},"kind":"SuperTrait","from":{"krate":0,"index":750},"to":{"krate":0,"index":789}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_real.rs","byte_start":127575,"byte_end":127585,"line_start":10,"line_end":10,"column_start":22,"column_end":32},"kind":"SuperTrait","from":{"krate":0,"index":835},"to":{"krate":0,"index":789}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_real.rs","byte_start":127588,"byte_end":127604,"line_start":10,"line_end":10,"column_start":35,"column_end":51},"kind":"SuperTrait","from":{"krate":0,"index":667},"to":{"krate":0,"index":789}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_real.rs","byte_start":128521,"byte_end":128522,"line_start":39,"line_end":39,"column_start":38,"column_end":39},"kind":{"Impl":{"id":167}},"from":{"krate":0,"index":809},"to":{"krate":0,"index":789}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_signed.rs","byte_start":130291,"byte_end":130300,"line_start":5,"line_end":5,"column_start":23,"column_end":32},"kind":"SuperTrait","from":{"krate":0,"index":852},"to":{"krate":0,"index":835}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_signed.rs","byte_start":131020,"byte_end":131021,"line_start":21,"line_end":21,"column_start":61,"column_end":62},"kind":{"Impl":{"id":168}},"from":{"krate":0,"index":842},"to":{"krate":0,"index":835}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_value.rs","byte_start":131602,"byte_end":131607,"line_start":4,"line_end":4,"column_start":22,"column_end":27},"kind":"SuperTrait","from":{"krate":2,"index":2830},"to":{"krate":0,"index":852}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_value.rs","byte_start":134704,"byte_end":134708,"line_start":86,"line_end":86,"column_start":31,"column_end":35},"kind":"SuperTrait","from":{"krate":2,"index":2835},"to":{"krate":0,"index":866}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_value.rs","byte_start":134711,"byte_end":134720,"line_start":86,"line_end":86,"column_start":38,"column_end":47},"kind":"SuperTrait","from":{"krate":0,"index":852},"to":{"krate":0,"index":866}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_value.rs","byte_start":134771,"byte_end":134778,"line_start":88,"line_end":88,"column_start":47,"column_end":54},"kind":{"Impl":{"id":169}},"from":{"krate":21,"index":523},"to":{"krate":0,"index":852}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.3.1/src/simd/simd_value.rs","byte_start":136201,"byte_end":136208,"line_start":142,"line_end":142,"column_start":65,"column_end":72},"kind":{"Impl":{"id":170}},"from":{"krate":21,"index":523},"to":{"krate":0,"index":866}}]}