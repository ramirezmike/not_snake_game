{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0","program":"/home/mramirez/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","hound","/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=e3218514bfa63aaf","-C","extra-filename=-e3218514bfa63aaf","--out-dir","/home/mramirez/code/projects/games/bug_game/target/rls/debug/deps","-L","dependency=/home/mramirez/code/projects/games/bug_game/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/home/mramirez/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu"],"output":"/home/mramirez/code/projects/games/bug_game/target/rls/debug/deps/libhound-e3218514bfa63aaf.rmeta"},"prelude":{"crate_id":{"name":"hound","disambiguator":[15081860691094563931,914030536473864744]},"crate_root":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src","external_crates":[{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[397594041871667817,11704163070354659695]}},{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[17044353007700780372,2918200604221815240]}},{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[15333840167806743833,9889193056877993824]}},{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[4550415707075219492,6623162258675921486]}},{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[8289379911494056514,13856099756999900329]}},{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[10514502805115346386,576110030083780649]}},{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[9878185313679130060,1975285035821961205]}},{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[4010603182529655334,7152219772350788052]}},{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[1807637986128902209,18379128151258407121]}},{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[11140927657351163542,6267109750485550558]}},{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[13809795498598848728,13320395723520943315]}},{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","num":12,"id":{"name":"std_detect","disambiguator":[13869841232067652907,9875669357213642224]}},{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","num":13,"id":{"name":"addr2line","disambiguator":[15533050656730733495,14669839968799848603]}},{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","num":14,"id":{"name":"gimli","disambiguator":[14371692877540073659,8181723439448527964]}},{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","num":15,"id":{"name":"object","disambiguator":[639541300699627395,1995254029228069844]}},{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","num":16,"id":{"name":"miniz_oxide","disambiguator":[12482123824895737424,11765111494567609733]}},{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","num":17,"id":{"name":"adler","disambiguator":[1169880241773671279,8605314106566979368]}},{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","num":18,"id":{"name":"panic_unwind","disambiguator":[5016943468141875609,13494347935157563341]}}],"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","byte_start":631,"byte_end":26075,"line_start":13,"line_end":792,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":105},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","byte_start":2082,"byte_end":2091,"line_start":68,"line_end":68,"column_start":16,"column_end":25},"alias_span":null,"name":"WavReader","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":118},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","byte_start":2093,"byte_end":2107,"line_start":68,"line_end":68,"column_start":27,"column_end":41},"alias_span":null,"name":"WavIntoSamples","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":112},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","byte_start":2109,"byte_end":2119,"line_start":68,"line_end":68,"column_start":43,"column_end":53},"alias_span":null,"name":"WavSamples","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":123},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","byte_start":2121,"byte_end":2137,"line_start":68,"line_end":68,"column_start":55,"column_end":71},"alias_span":null,"name":"read_wave_header","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":291},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","byte_start":2156,"byte_end":2170,"line_start":69,"line_end":69,"column_start":17,"column_end":31},"alias_span":null,"name":"SampleWriter16","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":246},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","byte_start":2172,"byte_end":2181,"line_start":69,"line_end":69,"column_start":33,"column_end":42},"alias_span":null,"name":"WavWriter","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","byte_start":631,"byte_end":26075,"line_start":13,"line_end":792,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":6},{"krate":0,"index":9},{"krate":0,"index":12},{"krate":0,"index":15},{"krate":0,"index":18},{"krate":0,"index":21},{"krate":0,"index":179},{"krate":0,"index":310},{"krate":0,"index":311},{"krate":0,"index":314},{"krate":0,"index":317},{"krate":0,"index":320},{"krate":0,"index":323},{"krate":0,"index":324},{"krate":0,"index":327},{"krate":0,"index":330},{"krate":0,"index":336},{"krate":0,"index":337},{"krate":0,"index":338},{"krate":0,"index":342},{"krate":0,"index":346},{"krate":0,"index":347},{"krate":0,"index":353},{"krate":0,"index":359},{"krate":0,"index":365},{"krate":0,"index":393},{"krate":0,"index":398},{"krate":0,"index":400},{"krate":0,"index":401},{"krate":0,"index":403},{"krate":0,"index":404},{"krate":0,"index":406},{"krate":0,"index":407},{"krate":0,"index":409},{"krate":0,"index":414},{"krate":0,"index":416},{"krate":0,"index":417},{"krate":0,"index":419},{"krate":0,"index":420},{"krate":0,"index":423},{"krate":0,"index":424},{"krate":0,"index":426},{"krate":0,"index":441},{"krate":0,"index":371},{"krate":0,"index":373},{"krate":0,"index":376},{"krate":0,"index":378},{"krate":0,"index":380},{"krate":0,"index":382}],"decl_id":null,"docs":" Hound, a wav encoding and decoding library.","sig":null,"attributes":[{"value":"/ Hound, a wav encoding and decoding library.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","byte_start":631,"byte_end":678,"line_start":13,"line_end":13,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","byte_start":679,"byte_end":682,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ Examples","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","byte_start":683,"byte_end":695,"line_start":15,"line_end":15,"column_start":1,"column_end":13}},{"value":"/ ========","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","byte_start":696,"byte_end":708,"line_start":16,"line_end":16,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","byte_start":709,"byte_end":712,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ The following example renders a 440 Hz sine wave, and stores it as as a","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","byte_start":713,"byte_end":788,"line_start":18,"line_end":18,"column_start":1,"column_end":76}},{"value":"/ mono wav file with a sample rate of 44.1 kHz and 16 bits per sample.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","byte_start":789,"byte_end":861,"line_start":19,"line_end":19,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","byte_start":862,"byte_end":865,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","byte_start":866,"byte_end":873,"line_start":21,"line_end":21,"column_start":1,"column_end":8}},{"value":"/ use std::f32::consts::PI;","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","byte_start":874,"byte_end":903,"line_start":22,"line_end":22,"column_start":1,"column_end":30}},{"value":"/ use std::i16;","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","byte_start":904,"byte_end":921,"line_start":23,"line_end":23,"column_start":1,"column_end":18}},{"value":"/ use hound;","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","byte_start":922,"byte_end":936,"line_start":24,"line_end":24,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","byte_start":937,"byte_end":940,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ let spec = hound::WavSpec {","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","byte_start":941,"byte_end":972,"line_start":26,"line_end":26,"column_start":1,"column_end":32}},{"value":"/     channels: 1,","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","byte_start":973,"byte_end":993,"line_start":27,"line_end":27,"column_start":1,"column_end":21}},{"value":"/     sample_rate: 44100,","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","byte_start":994,"byte_end":1021,"line_start":28,"line_end":28,"column_start":1,"column_end":28}},{"value":"/     bits_per_sample: 16,","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","byte_start":1022,"byte_end":1050,"line_start":29,"line_end":29,"column_start":1,"column_end":29}},{"value":"/     sample_format: hound::SampleFormat::Int,","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","byte_start":1051,"byte_end":1099,"line_start":30,"line_end":30,"column_start":1,"column_end":49}},{"value":"/ };","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","byte_start":1100,"byte_end":1106,"line_start":31,"line_end":31,"column_start":1,"column_end":7}},{"value":"/ let mut writer = hound::WavWriter::create(\"sine.wav\", spec).unwrap();","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","byte_start":1107,"byte_end":1180,"line_start":32,"line_end":32,"column_start":1,"column_end":74}},{"value":"/ for t in (0 .. 44100).map(|x| x as f32 / 44100.0) {","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","byte_start":1181,"byte_end":1236,"line_start":33,"line_end":33,"column_start":1,"column_end":56}},{"value":"/     let sample = (t * 440.0 * 2.0 * PI).sin();","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","byte_start":1237,"byte_end":1287,"line_start":34,"line_end":34,"column_start":1,"column_end":51}},{"value":"/     let amplitude = i16::MAX as f32;","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","byte_start":1288,"byte_end":1328,"line_start":35,"line_end":35,"column_start":1,"column_end":41}},{"value":"/     writer.write_sample((sample * amplitude) as i16).unwrap();","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","byte_start":1329,"byte_end":1395,"line_start":36,"line_end":36,"column_start":1,"column_end":67}},{"value":"/ }","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","byte_start":1396,"byte_end":1401,"line_start":37,"line_end":37,"column_start":1,"column_end":6}},{"value":"/ writer.finalize().unwrap();","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","byte_start":1402,"byte_end":1433,"line_start":38,"line_end":38,"column_start":1,"column_end":32}},{"value":"/ ```","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","byte_start":1434,"byte_end":1441,"line_start":39,"line_end":39,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","byte_start":1442,"byte_end":1445,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ The following example computes the root mean square (RMS) of an audio file","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","byte_start":1446,"byte_end":1524,"line_start":41,"line_end":41,"column_start":1,"column_end":79}},{"value":"/ with at most 16 bits per sample.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","byte_start":1525,"byte_end":1561,"line_start":42,"line_end":42,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","byte_start":1562,"byte_end":1565,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","byte_start":1566,"byte_end":1573,"line_start":44,"line_end":44,"column_start":1,"column_end":8}},{"value":"/ use hound;","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","byte_start":1574,"byte_end":1588,"line_start":45,"line_end":45,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","byte_start":1589,"byte_end":1592,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ let mut reader = hound::WavReader::open(\"testsamples/pop.wav\").unwrap();","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","byte_start":1593,"byte_end":1669,"line_start":47,"line_end":47,"column_start":1,"column_end":77}},{"value":"/ let sqr_sum = reader.samples::<i16>()","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","byte_start":1670,"byte_end":1711,"line_start":48,"line_end":48,"column_start":1,"column_end":42}},{"value":"/                     .fold(0.0, |sqr_sum, s| {","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","byte_start":1712,"byte_end":1761,"line_start":49,"line_end":49,"column_start":1,"column_end":50}},{"value":"/     let sample = s.unwrap() as f64;","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","byte_start":1762,"byte_end":1801,"line_start":50,"line_end":50,"column_start":1,"column_end":40}},{"value":"/     sqr_sum + sample * sample","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","byte_start":1802,"byte_end":1835,"line_start":51,"line_end":51,"column_start":1,"column_end":34}},{"value":"/ });","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","byte_start":1836,"byte_end":1843,"line_start":52,"line_end":52,"column_start":1,"column_end":8}},{"value":"/ println!(\"RMS is {}\", (sqr_sum / reader.len() as f64).sqrt());","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","byte_start":1844,"byte_end":1910,"line_start":53,"line_end":53,"column_start":1,"column_end":67}},{"value":"/ ```","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","byte_start":1911,"byte_end":1918,"line_start":54,"line_end":54,"column_start":1,"column_end":8}},{"value":"warn(missing_docs)","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","byte_start":1920,"byte_end":1942,"line_start":56,"line_end":56,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":105},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/read.rs","byte_start":33536,"byte_end":33545,"line_start":216,"line_end":216,"column_start":12,"column_end":21},"name":"WavReader","qualname":"::read::WavReader","value":"WavReader {  }","parent":null,"children":[{"krate":0,"index":107},{"krate":0,"index":108},{"krate":0,"index":109},{"krate":0,"index":110},{"krate":0,"index":111}],"decl_id":null,"docs":" A reader that reads the WAVE format from the underlying reader.","sig":null,"attributes":[{"value":"/ A reader that reads the WAVE format from the underlying reader.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/read.rs","byte_start":33111,"byte_end":33178,"line_start":209,"line_end":209,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/read.rs","byte_start":33179,"byte_end":33182,"line_start":210,"line_end":210,"column_start":1,"column_end":4}},{"value":"/ A `WavReader` is a streaming reader. It reads data from the underlying","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/read.rs","byte_start":33183,"byte_end":33257,"line_start":211,"line_end":211,"column_start":1,"column_end":75}},{"value":"/ reader on demand, and it reads no more than strictly necessary. No internal","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/read.rs","byte_start":33258,"byte_end":33337,"line_start":212,"line_end":212,"column_start":1,"column_end":80}},{"value":"/ buffering is performed on the underlying reader, but this can easily be","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/read.rs","byte_start":33338,"byte_end":33413,"line_start":213,"line_end":213,"column_start":1,"column_end":76}},{"value":"/ added by wrapping the reader in an `io::BufReader`. The `open` constructor","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/read.rs","byte_start":33414,"byte_end":33492,"line_start":214,"line_end":214,"column_start":1,"column_end":79}},{"value":"/ takes care of this for you.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/read.rs","byte_start":33493,"byte_end":33524,"line_start":215,"line_end":215,"column_start":1,"column_end":32}}]},{"kind":"Struct","id":{"krate":0,"index":112},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/read.rs","byte_start":34379,"byte_end":34389,"line_start":241,"line_end":241,"column_start":12,"column_end":22},"name":"WavSamples","qualname":"::read::WavSamples","value":"WavSamples {  }","parent":null,"children":[{"krate":0,"index":116},{"krate":0,"index":117}],"decl_id":null,"docs":" An iterator that yields samples of type `S` read from a `WavReader`.","sig":null,"attributes":[{"value":"/ An iterator that yields samples of type `S` read from a `WavReader`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/read.rs","byte_start":34154,"byte_end":34226,"line_start":237,"line_end":237,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/read.rs","byte_start":34227,"byte_end":34230,"line_start":238,"line_end":238,"column_start":1,"column_end":4}},{"value":"/ The type `S` must have at least as many bits as the bits per sample of the","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/read.rs","byte_start":34231,"byte_end":34309,"line_start":239,"line_end":239,"column_start":1,"column_end":79}},{"value":"/ file, otherwise every iteration will return an error.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/read.rs","byte_start":34310,"byte_end":34367,"line_start":240,"line_end":240,"column_start":1,"column_end":58}}]},{"kind":"Struct","id":{"krate":0,"index":118},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/read.rs","byte_start":34727,"byte_end":34741,"line_start":252,"line_end":252,"column_start":12,"column_end":26},"name":"WavIntoSamples","qualname":"::read::WavIntoSamples","value":"WavIntoSamples {  }","parent":null,"children":[{"krate":0,"index":121},{"krate":0,"index":122}],"decl_id":null,"docs":" An iterator that yields samples of type `S` read from a `WavReader`.","sig":null,"attributes":[{"value":"/ An iterator that yields samples of type `S` read from a `WavReader`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/read.rs","byte_start":34502,"byte_end":34574,"line_start":248,"line_end":248,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/read.rs","byte_start":34575,"byte_end":34578,"line_start":249,"line_end":249,"column_start":1,"column_end":4}},{"value":"/ The type `S` must have at least as many bits as the bits per sample of the","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/read.rs","byte_start":34579,"byte_end":34657,"line_start":250,"line_end":250,"column_start":1,"column_end":79}},{"value":"/ file, otherwise every iteration will return an error.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/read.rs","byte_start":34658,"byte_end":34715,"line_start":251,"line_end":251,"column_start":1,"column_end":58}}]},{"kind":"Function","id":{"krate":0,"index":123},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/read.rs","byte_start":35216,"byte_end":35232,"line_start":265,"line_end":265,"column_start":8,"column_end":24},"name":"read_wave_header","qualname":"::read::read_wave_header","value":"pub fn read_wave_header<R: io::Read>(&mut R) -> Result<u64>","parent":null,"children":[],"decl_id":null,"docs":" Reads the RIFF WAVE header, returns the supposed file size.","sig":null,"attributes":[{"value":"/ Reads the RIFF WAVE header, returns the supposed file size.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/read.rs","byte_start":34823,"byte_end":34886,"line_start":257,"line_end":257,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/read.rs","byte_start":34887,"byte_end":34890,"line_start":258,"line_end":258,"column_start":1,"column_end":4}},{"value":"/ This function can be used to quickly check if the file could be a wav file","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/read.rs","byte_start":34891,"byte_end":34969,"line_start":259,"line_end":259,"column_start":1,"column_end":79}},{"value":"/ by reading 12 bytes of the header. If an `Ok` is returned, the file is","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/read.rs","byte_start":34970,"byte_end":35044,"line_start":260,"line_end":260,"column_start":1,"column_end":75}},{"value":"/ likely a wav file. If an `Err` is returned, it is definitely not a wav","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/read.rs","byte_start":35045,"byte_end":35119,"line_start":261,"line_end":261,"column_start":1,"column_end":75}},{"value":"/ file.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/read.rs","byte_start":35120,"byte_end":35129,"line_start":262,"line_end":262,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/read.rs","byte_start":35130,"byte_end":35133,"line_start":263,"line_end":263,"column_start":1,"column_end":4}},{"value":"/ The returned file size cannot be larger than 2<sup>32</sup> + 7 bytes.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/read.rs","byte_start":35134,"byte_end":35208,"line_start":264,"line_end":264,"column_start":1,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":140},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/read.rs","byte_start":49175,"byte_end":49178,"line_start":598,"line_end":598,"column_start":12,"column_end":15},"name":"new","qualname":"<WavReader<R>>::new","value":"pub fn new(R) -> Result<WavReader<R>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to create a reader that reads the WAVE format.","sig":null,"attributes":[{"value":"/ Attempts to create a reader that reads the WAVE format.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/read.rs","byte_start":49007,"byte_end":49066,"line_start":594,"line_end":594,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/read.rs","byte_start":49071,"byte_end":49074,"line_start":595,"line_end":595,"column_start":5,"column_end":8}},{"value":"/ The header is read immediately. Reading the data will be done on","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/read.rs","byte_start":49079,"byte_end":49147,"line_start":596,"line_end":596,"column_start":5,"column_end":73}},{"value":"/ demand.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/read.rs","byte_start":49152,"byte_end":49163,"line_start":597,"line_end":597,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":141},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/read.rs","byte_start":50607,"byte_end":50611,"line_start":633,"line_end":633,"column_start":12,"column_end":16},"name":"spec","qualname":"<WavReader<R>>::spec","value":"pub fn spec(&Self) -> WavSpec","parent":null,"children":[],"decl_id":null,"docs":" Returns information about the WAVE file.\n","sig":null,"attributes":[{"value":"/ Returns information about the WAVE file.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/read.rs","byte_start":50551,"byte_end":50595,"line_start":632,"line_end":632,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":142},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/read.rs","byte_start":51526,"byte_end":51533,"line_start":652,"line_end":652,"column_start":12,"column_end":19},"name":"samples","qualname":"<WavReader<R>>::samples","value":"pub fn samples<'wr, S: Sample>(&'wr mut Self) -> WavSamples","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over all samples.","sig":null,"attributes":[{"value":"/ Returns an iterator over all samples.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/read.rs","byte_start":50661,"byte_end":50702,"line_start":637,"line_end":637,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/read.rs","byte_start":50707,"byte_end":50710,"line_start":638,"line_end":638,"column_start":5,"column_end":8}},{"value":"/ The channel data is is interleaved. The iterator is streaming. That is,","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/read.rs","byte_start":50715,"byte_end":50790,"line_start":639,"line_end":639,"column_start":5,"column_end":80}},{"value":"/ if you call this method once, read a few samples, and call this method","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/read.rs","byte_start":50795,"byte_end":50869,"line_start":640,"line_end":640,"column_start":5,"column_end":79}},{"value":"/ again, the second iterator will not start again from the beginning of","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/read.rs","byte_start":50874,"byte_end":50947,"line_start":641,"line_end":641,"column_start":5,"column_end":78}},{"value":"/ the file, it will continue where the first iterator stopped.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/read.rs","byte_start":50952,"byte_end":51016,"line_start":642,"line_end":642,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/read.rs","byte_start":51021,"byte_end":51024,"line_start":643,"line_end":643,"column_start":5,"column_end":8}},{"value":"/ The type `S` must have at least `spec().bits_per_sample` bits,","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/read.rs","byte_start":51029,"byte_end":51095,"line_start":644,"line_end":644,"column_start":5,"column_end":71}},{"value":"/ otherwise every iteration will return an error. All bit depths up to","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/read.rs","byte_start":51100,"byte_end":51172,"line_start":645,"line_end":645,"column_start":5,"column_end":77}},{"value":"/ 32 bits per sample can be decoded into an `i32`, but if you know","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/read.rs","byte_start":51177,"byte_end":51245,"line_start":646,"line_end":646,"column_start":5,"column_end":73}},{"value":"/ beforehand that you will be reading a file with 16 bits per sample, you","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/read.rs","byte_start":51250,"byte_end":51325,"line_start":647,"line_end":647,"column_start":5,"column_end":80}},{"value":"/ can save memory by decoding into an `i16`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/read.rs","byte_start":51330,"byte_end":51376,"line_start":648,"line_end":648,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/read.rs","byte_start":51381,"byte_end":51384,"line_start":649,"line_end":649,"column_start":5,"column_end":8}},{"value":"/ The type of `S` (int or float) must match `spec().sample_format`,","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/read.rs","byte_start":51389,"byte_end":51458,"line_start":650,"line_end":650,"column_start":5,"column_end":74}},{"value":"/ otherwise every iteration will return an error.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/read.rs","byte_start":51463,"byte_end":51514,"line_start":651,"line_end":651,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":145},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/read.rs","byte_start":51830,"byte_end":51842,"line_start":662,"line_end":662,"column_start":12,"column_end":24},"name":"into_samples","qualname":"<WavReader<R>>::into_samples","value":"pub fn into_samples<S: Sample>(Self) -> WavIntoSamples<R, S>","parent":null,"children":[],"decl_id":null,"docs":" Same as `samples`, but takes ownership of the `WavReader`.","sig":null,"attributes":[{"value":"/ Same as `samples`, but takes ownership of the `WavReader`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/read.rs","byte_start":51709,"byte_end":51771,"line_start":659,"line_end":659,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/read.rs","byte_start":51776,"byte_end":51779,"line_start":660,"line_end":660,"column_start":5,"column_end":8}},{"value":"/ See `samples()` for more info.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/read.rs","byte_start":51784,"byte_end":51818,"line_start":661,"line_end":661,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":147},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/read.rs","byte_start":52355,"byte_end":52363,"line_start":675,"line_end":675,"column_start":12,"column_end":20},"name":"duration","qualname":"<WavReader<R>>::duration","value":"pub fn duration(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the duration of the file in samples.","sig":null,"attributes":[{"value":"/ Returns the duration of the file in samples.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/read.rs","byte_start":52007,"byte_end":52055,"line_start":669,"line_end":669,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/read.rs","byte_start":52060,"byte_end":52063,"line_start":670,"line_end":670,"column_start":5,"column_end":8}},{"value":"/ The duration is independent of the number of channels. It is expressed","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/read.rs","byte_start":52068,"byte_end":52142,"line_start":671,"line_end":671,"column_start":5,"column_end":79}},{"value":"/ in units of samples. The duration in seconds can be obtained by","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/read.rs","byte_start":52147,"byte_end":52214,"line_start":672,"line_end":672,"column_start":5,"column_end":72}},{"value":"/ dividing this number by the sample rate. The duration is independent of","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/read.rs","byte_start":52219,"byte_end":52294,"line_start":673,"line_end":673,"column_start":5,"column_end":80}},{"value":"/ how many samples have been read already.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/read.rs","byte_start":52299,"byte_end":52343,"line_start":674,"line_end":674,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":148},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/read.rs","byte_start":52793,"byte_end":52796,"line_start":685,"line_end":685,"column_start":12,"column_end":15},"name":"len","qualname":"<WavReader<R>>::len","value":"pub fn len(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of values that the sample iterator will yield.","sig":null,"attributes":[{"value":"/ Returns the number of values that the sample iterator will yield.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/read.rs","byte_start":52444,"byte_end":52513,"line_start":679,"line_end":679,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/read.rs","byte_start":52518,"byte_end":52521,"line_start":680,"line_end":680,"column_start":5,"column_end":8}},{"value":"/ The length of the file is its duration (in samples) times the number of","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/read.rs","byte_start":52526,"byte_end":52601,"line_start":681,"line_end":681,"column_start":5,"column_end":80}},{"value":"/ channels. The length is independent of how many samples have been read","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/read.rs","byte_start":52606,"byte_end":52680,"line_start":682,"line_end":682,"column_start":5,"column_end":79}},{"value":"/ already. To get the number of samples left, use `len()` on the","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/read.rs","byte_start":52685,"byte_end":52751,"line_start":683,"line_end":683,"column_start":5,"column_end":71}},{"value":"/ `samples()` iterator.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/read.rs","byte_start":52756,"byte_end":52781,"line_start":684,"line_end":684,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":149},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/read.rs","byte_start":52924,"byte_end":52934,"line_start":690,"line_end":690,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<WavReader<R>>::into_inner","value":"pub fn into_inner(Self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Destroys the `WavReader` and returns the underlying reader.\n","sig":null,"attributes":[{"value":"/ Destroys the `WavReader` and returns the underlying reader.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/read.rs","byte_start":52849,"byte_end":52912,"line_start":689,"line_end":689,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":150},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/read.rs","byte_start":53579,"byte_end":53583,"line_start":704,"line_end":704,"column_start":12,"column_end":16},"name":"seek","qualname":"<WavReader<R>>::seek","value":"pub fn seek(&mut Self, u32) -> io::Result<()> where R: io::Seek","parent":null,"children":[],"decl_id":null,"docs":" Seek to the given time within the file.","sig":null,"attributes":[{"value":"/ Seek to the given time within the file.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/read.rs","byte_start":52979,"byte_end":53022,"line_start":694,"line_end":694,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/read.rs","byte_start":53027,"byte_end":53030,"line_start":695,"line_end":695,"column_start":5,"column_end":8}},{"value":"/ The given time is measured in number of samples (independent of the","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/read.rs","byte_start":53035,"byte_end":53106,"line_start":696,"line_end":696,"column_start":5,"column_end":76}},{"value":"/ number of channels) since the beginning of the audio data. To seek to","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/read.rs","byte_start":53111,"byte_end":53184,"line_start":697,"line_end":697,"column_start":5,"column_end":78}},{"value":"/ a particular time in seconds, multiply the number of seconds with","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/read.rs","byte_start":53189,"byte_end":53258,"line_start":698,"line_end":698,"column_start":5,"column_end":74}},{"value":"/ `WavSpec::sample_rate`. The given time should not exceed the duration of","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/read.rs","byte_start":53263,"byte_end":53339,"line_start":699,"line_end":699,"column_start":5,"column_end":81}},{"value":"/ the file (returned by `duration()`). The behavior when seeking beyond","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/read.rs","byte_start":53344,"byte_end":53417,"line_start":700,"line_end":700,"column_start":5,"column_end":78}},{"value":"/ `duration()` depends on the reader's `Seek` implementation.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/read.rs","byte_start":53422,"byte_end":53485,"line_start":701,"line_end":701,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/read.rs","byte_start":53490,"byte_end":53493,"line_start":702,"line_end":702,"column_start":5,"column_end":8}},{"value":"/ This method requires that the inner reader `R` implements `Seek`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/read.rs","byte_start":53498,"byte_end":53567,"line_start":703,"line_end":703,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":152},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/read.rs","byte_start":54343,"byte_end":54347,"line_start":722,"line_end":722,"column_start":12,"column_end":16},"name":"open","qualname":"<WavReader<io::BufReader<fs::File>>>::open","value":"pub fn open<P: AsRef<path::Path>>(P)\n-> Result<WavReader<io::BufReader<fs::File>>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to create a reader that reads from the specified file.","sig":null,"attributes":[{"value":"/ Attempts to create a reader that reads from the specified file.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/read.rs","byte_start":54116,"byte_end":54183,"line_start":718,"line_end":718,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/read.rs","byte_start":54188,"byte_end":54191,"line_start":719,"line_end":719,"column_start":5,"column_end":8}},{"value":"/ This is a convenience constructor that opens a `File`, wraps it in a","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/read.rs","byte_start":54196,"byte_end":54268,"line_start":720,"line_end":720,"column_start":5,"column_end":77}},{"value":"/ `BufReader` and then constructs a `WavReader` from it.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/read.rs","byte_start":54273,"byte_end":54331,"line_start":721,"line_end":721,"column_start":5,"column_end":63}}]},{"kind":"Struct","id":{"krate":0,"index":246},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":75995,"byte_end":76004,"line_start":136,"line_end":136,"column_start":12,"column_end":21},"name":"WavWriter","qualname":"::write::WavWriter","value":"WavWriter {  }","parent":null,"children":[{"krate":0,"index":248},{"krate":0,"index":249},{"krate":0,"index":250},{"krate":0,"index":251},{"krate":0,"index":252},{"krate":0,"index":253},{"krate":0,"index":254}],"decl_id":null,"docs":" A writer that accepts samples and writes the WAVE format.","sig":null,"attributes":[{"value":"/ A writer that accepts samples and writes the WAVE format.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":75399,"byte_end":75460,"line_start":127,"line_end":127,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":75461,"byte_end":75464,"line_start":128,"line_end":128,"column_start":1,"column_end":4}},{"value":"/ The writer needs a `WavSpec` that describes the audio properties. Then","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":75465,"byte_end":75539,"line_start":129,"line_end":129,"column_start":1,"column_end":75}},{"value":"/ samples can be written with `write_sample`. Channel data is interleaved.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":75540,"byte_end":75616,"line_start":130,"line_end":130,"column_start":1,"column_end":77}},{"value":"/ The number of samples written must be a multiple of the number of channels.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":75617,"byte_end":75696,"line_start":131,"line_end":131,"column_start":1,"column_end":80}},{"value":"/ After all samples have been written, the file must be finalized. This can","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":75697,"byte_end":75774,"line_start":132,"line_end":132,"column_start":1,"column_end":78}},{"value":"/ be done by calling `finalize`. If `finalize` is not called, the file will","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":75775,"byte_end":75852,"line_start":133,"line_end":133,"column_start":1,"column_end":78}},{"value":"/ be finalized upon drop. However, finalization may fail, and without calling","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":75853,"byte_end":75932,"line_start":134,"line_end":134,"column_start":1,"column_end":80}},{"value":"/ `finalize`, such a failure cannot be observed.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":75933,"byte_end":75983,"line_start":135,"line_end":135,"column_start":1,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":262},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":77530,"byte_end":77533,"line_start":185,"line_end":185,"column_start":12,"column_end":15},"name":"new","qualname":"<WavWriter<W>>::new","value":"pub fn new(W, WavSpec) -> Result<WavWriter<W>>","parent":null,"children":[],"decl_id":null,"docs":" Creates a writer that writes the WAVE format to the underlying writer.","sig":null,"attributes":[{"value":"/ Creates a writer that writes the WAVE format to the underlying writer.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":77067,"byte_end":77141,"line_start":176,"line_end":176,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":77146,"byte_end":77149,"line_start":177,"line_end":177,"column_start":5,"column_end":8}},{"value":"/ The underlying writer is assumed to be at offset 0. `WavWriter` employs","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":77154,"byte_end":77229,"line_start":178,"line_end":178,"column_start":5,"column_end":80}},{"value":"/ *no* buffering internally. It is recommended to wrap the writer in a","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":77234,"byte_end":77306,"line_start":179,"line_end":179,"column_start":5,"column_end":77}},{"value":"/ `BufWriter` to avoid too many `write` calls. The `create()` constructor","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":77311,"byte_end":77386,"line_start":180,"line_end":180,"column_start":5,"column_end":80}},{"value":"/ does this automatically.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":77391,"byte_end":77419,"line_start":181,"line_end":181,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":77424,"byte_end":77427,"line_start":182,"line_end":182,"column_start":5,"column_end":8}},{"value":"/ This writes parts of the header immediately, hence a `Result` is","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":77432,"byte_end":77500,"line_start":183,"line_end":183,"column_start":5,"column_end":73}},{"value":"/ returned.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":77505,"byte_end":77518,"line_start":184,"line_end":184,"column_start":5,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":268},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":85410,"byte_end":85422,"line_start":385,"line_end":385,"column_start":12,"column_end":24},"name":"write_sample","qualname":"<WavWriter<W>>::write_sample","value":"pub fn write_sample<S: Sample>(&mut Self, S) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Writes a single sample for one channel.","sig":null,"attributes":[{"value":"/ Writes a single sample for one channel.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":85101,"byte_end":85144,"line_start":379,"line_end":379,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":85149,"byte_end":85152,"line_start":380,"line_end":380,"column_start":5,"column_end":8}},{"value":"/ WAVE interleaves channel data, so the channel that this writes the","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":85157,"byte_end":85227,"line_start":381,"line_end":381,"column_start":5,"column_end":75}},{"value":"/ sample to depends on previous writes. This will return an error if the","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":85232,"byte_end":85306,"line_start":382,"line_end":382,"column_start":5,"column_end":79}},{"value":"/ sample does not fit in the number of bits specified in the `WavSpec`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":85311,"byte_end":85384,"line_start":383,"line_end":383,"column_start":5,"column_end":78}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":85389,"byte_end":85398,"line_start":384,"line_end":384,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":270},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":86399,"byte_end":86413,"line_start":406,"line_end":406,"column_start":12,"column_end":26},"name":"get_i16_writer","qualname":"<WavWriter<W>>::get_i16_writer","value":"pub fn get_i16_writer<'s>(&'s mut Self, u32) -> SampleWriter16","parent":null,"children":[],"decl_id":null,"docs":" Create an efficient writer that writes 16-bit integer samples only.","sig":null,"attributes":[{"value":"/ Create an efficient writer that writes 16-bit integer samples only.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":85636,"byte_end":85707,"line_start":391,"line_end":391,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":85712,"byte_end":85715,"line_start":392,"line_end":392,"column_start":5,"column_end":8}},{"value":"/ When it is known what the kind of samples will be, many dynamic checks","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":85720,"byte_end":85794,"line_start":393,"line_end":393,"column_start":5,"column_end":79}},{"value":"/ can be omitted. Furthermore, this writer employs buffering internally,","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":85799,"byte_end":85873,"line_start":394,"line_end":394,"column_start":5,"column_end":79}},{"value":"/ which allows omitting return value checks except on flush. The internal","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":85878,"byte_end":85953,"line_start":395,"line_end":395,"column_start":5,"column_end":80}},{"value":"/ buffer will be sized such that exactly `num_samples` samples can be","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":85958,"byte_end":86029,"line_start":396,"line_end":396,"column_start":5,"column_end":76}},{"value":"/ written to it, and the buffer is recycled across calls to","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":86034,"byte_end":86095,"line_start":397,"line_end":397,"column_start":5,"column_end":66}},{"value":"/ `get_i16_writer()` if the previous buffer was sufficiently large.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":86100,"byte_end":86169,"line_start":398,"line_end":398,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":86174,"byte_end":86177,"line_start":399,"line_end":399,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":86182,"byte_end":86194,"line_start":400,"line_end":400,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":86199,"byte_end":86202,"line_start":401,"line_end":401,"column_start":5,"column_end":8}},{"value":"/ Panics if the spec does not match a 16 bits per sample integer format.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":86207,"byte_end":86281,"line_start":402,"line_end":402,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":86286,"byte_end":86289,"line_start":403,"line_end":403,"column_start":5,"column_end":8}},{"value":"/ Attempting to write more than `num_samples` samples to the writer will","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":86294,"byte_end":86368,"line_start":404,"line_end":404,"column_start":5,"column_end":79}},{"value":"/ panic too.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":86373,"byte_end":86387,"line_start":405,"line_end":405,"column_start":5,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":273},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":89685,"byte_end":89690,"line_start":479,"line_end":479,"column_start":12,"column_end":17},"name":"flush","qualname":"<WavWriter<W>>::flush","value":"pub fn flush(&mut Self) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Updates the WAVE header and flushes the underlying writer.","sig":null,"attributes":[{"value":"/ Updates the WAVE header and flushes the underlying writer.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":88723,"byte_end":88785,"line_start":462,"line_end":462,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":88790,"byte_end":88793,"line_start":463,"line_end":463,"column_start":5,"column_end":8}},{"value":"/ Flush writes the WAVE header to the underlying writer to make the","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":88798,"byte_end":88867,"line_start":464,"line_end":464,"column_start":5,"column_end":74}},{"value":"/ written bytes a valid wav file, and then flushes the writer. It is still","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":88872,"byte_end":88948,"line_start":465,"line_end":465,"column_start":5,"column_end":81}},{"value":"/ possible to write more samples after flushing.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":88953,"byte_end":89003,"line_start":466,"line_end":466,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":89008,"byte_end":89011,"line_start":467,"line_end":467,"column_start":5,"column_end":8}},{"value":"/ Flush can be used for “checkpointing”. Even if after the flush there is","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":89016,"byte_end":89095,"line_start":468,"line_end":468,"column_start":5,"column_end":80}},{"value":"/ an IO error or the writing process dies, the file can still be read by a","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":89100,"byte_end":89176,"line_start":469,"line_end":469,"column_start":5,"column_end":81}},{"value":"/ compliant decoder up to the last flush.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":89181,"byte_end":89224,"line_start":470,"line_end":470,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":89229,"byte_end":89232,"line_start":471,"line_end":471,"column_start":5,"column_end":8}},{"value":"/ Note that if the number of samples written is not a multiple of the","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":89237,"byte_end":89308,"line_start":472,"line_end":472,"column_start":5,"column_end":76}},{"value":"/ channel count, the intermediate wav file will not be valid. In that case","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":89313,"byte_end":89389,"line_start":473,"line_end":473,"column_start":5,"column_end":81}},{"value":"/ `flush()` will still flush the data and write the (invalid) wav file,","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":89394,"byte_end":89467,"line_start":474,"line_end":474,"column_start":5,"column_end":78}},{"value":"/ but `Error::UnfinishedSample` will be returned afterwards.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":89472,"byte_end":89534,"line_start":475,"line_end":475,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":89539,"byte_end":89542,"line_start":476,"line_end":476,"column_start":5,"column_end":8}},{"value":"/ It is not necessary to call `finalize()` directly after `flush()`, if no","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":89547,"byte_end":89623,"line_start":477,"line_end":477,"column_start":5,"column_end":81}},{"value":"/ samples have been written after flushing.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":89628,"byte_end":89673,"line_start":478,"line_end":478,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":274},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":90266,"byte_end":90274,"line_start":492,"line_end":492,"column_start":12,"column_end":20},"name":"finalize","qualname":"<WavWriter<W>>::finalize","value":"pub fn finalize(Self) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Updates the WAVE header (which requires knowing all samples).","sig":null,"attributes":[{"value":"/ Updates the WAVE header (which requires knowing all samples).","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":89957,"byte_end":90022,"line_start":487,"line_end":487,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":90027,"byte_end":90030,"line_start":488,"line_end":488,"column_start":5,"column_end":8}},{"value":"/ This method must be called after all samples have been written. If it","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":90035,"byte_end":90108,"line_start":489,"line_end":489,"column_start":5,"column_end":78}},{"value":"/ is not called, the destructor will finalize the file, but any errors","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":90113,"byte_end":90185,"line_start":490,"line_end":490,"column_start":5,"column_end":77}},{"value":"/ that occur in the process cannot be observed in that manner.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":90190,"byte_end":90254,"line_start":491,"line_end":491,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":275},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":91006,"byte_end":91010,"line_start":509,"line_end":509,"column_start":12,"column_end":16},"name":"spec","qualname":"<WavWriter<W>>::spec","value":"pub fn spec(&Self) -> WavSpec","parent":null,"children":[],"decl_id":null,"docs":" Returns information about the WAVE file being written.","sig":null,"attributes":[{"value":"/ Returns information about the WAVE file being written.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":90693,"byte_end":90751,"line_start":503,"line_end":503,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":90756,"byte_end":90759,"line_start":504,"line_end":504,"column_start":5,"column_end":8}},{"value":"/ This is the same spec that was passed to `WavWriter::new()`. For a","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":90764,"byte_end":90834,"line_start":505,"line_end":505,"column_start":5,"column_end":75}},{"value":"/ writer constructed with `WavWriter::new_append()` or","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":90839,"byte_end":90895,"line_start":506,"line_end":506,"column_start":5,"column_end":61}},{"value":"/ `WavWriter::append()`, this method returns the spec of the file being","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":90900,"byte_end":90973,"line_start":507,"line_end":507,"column_start":5,"column_end":78}},{"value":"/ appended to.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":90978,"byte_end":90994,"line_start":508,"line_end":508,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":276},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":91344,"byte_end":91352,"line_start":518,"line_end":518,"column_start":12,"column_end":20},"name":"duration","qualname":"<WavWriter<W>>::duration","value":"pub fn duration(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the duration of the file written so far, in samples.","sig":null,"attributes":[{"value":"/ Returns the duration of the file written so far, in samples.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":91060,"byte_end":91124,"line_start":513,"line_end":513,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":91129,"byte_end":91132,"line_start":514,"line_end":514,"column_start":5,"column_end":8}},{"value":"/ The duration is independent of the number of channels. It is expressed","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":91137,"byte_end":91211,"line_start":515,"line_end":515,"column_start":5,"column_end":79}},{"value":"/ in units of samples. The duration in seconds can be obtained by","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":91216,"byte_end":91283,"line_start":516,"line_end":516,"column_start":5,"column_end":72}},{"value":"/ dividing this number by the sample rate.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":91288,"byte_end":91332,"line_start":517,"line_end":517,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":277},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":91652,"byte_end":91655,"line_start":526,"line_end":526,"column_start":12,"column_end":15},"name":"len","qualname":"<WavWriter<W>>::len","value":"pub fn len(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of samples in the file written so far.","sig":null,"attributes":[{"value":"/ Returns the number of samples in the file written so far.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":91473,"byte_end":91534,"line_start":522,"line_end":522,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":91539,"byte_end":91542,"line_start":523,"line_end":523,"column_start":5,"column_end":8}},{"value":"/ The length of the file is its duration (in samples) times the number of","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":91547,"byte_end":91622,"line_start":524,"line_end":524,"column_start":5,"column_end":80}},{"value":"/ channels.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":91627,"byte_end":91640,"line_start":525,"line_end":525,"column_start":5,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":284},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":94112,"byte_end":94118,"line_start":597,"line_end":597,"column_start":12,"column_end":18},"name":"create","qualname":"<WavWriter<io::BufWriter<fs::File>>>::create","value":"pub fn create<P: AsRef<path::Path>>(P, WavSpec)\n-> Result<WavWriter<io::BufWriter<fs::File>>>","parent":null,"children":[],"decl_id":null,"docs":" Creates a writer that writes the WAVE format to a file.","sig":null,"attributes":[{"value":"/ Creates a writer that writes the WAVE format to a file.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":93839,"byte_end":93898,"line_start":592,"line_end":592,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":93903,"byte_end":93906,"line_start":593,"line_end":593,"column_start":5,"column_end":8}},{"value":"/ This is a convenience constructor that creates the file, wraps it in a","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":93911,"byte_end":93985,"line_start":594,"line_end":594,"column_start":5,"column_end":79}},{"value":"/ `BufWriter`, and then constructs a `WavWriter` from it. The file will","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":93990,"byte_end":94063,"line_start":595,"line_end":595,"column_start":5,"column_end":78}},{"value":"/ be overwritten if it exists.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":94068,"byte_end":94100,"line_start":596,"line_end":596,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":286},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":94847,"byte_end":94853,"line_start":612,"line_end":612,"column_start":12,"column_end":18},"name":"append","qualname":"<WavWriter<io::BufWriter<fs::File>>>::append","value":"pub fn append<P: AsRef<path::Path>>(P)\n-> Result<WavWriter<io::BufWriter<fs::File>>>","parent":null,"children":[],"decl_id":null,"docs":" Creates a writer that appends samples to an existing file.","sig":null,"attributes":[{"value":"/ Creates a writer that appends samples to an existing file.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":94453,"byte_end":94515,"line_start":605,"line_end":605,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":94520,"byte_end":94523,"line_start":606,"line_end":606,"column_start":5,"column_end":8}},{"value":"/ This is a convenience constructor that opens the file in append mode,","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":94528,"byte_end":94601,"line_start":607,"line_end":607,"column_start":5,"column_end":78}},{"value":"/ reads its header using a buffered reader, and then constructs an","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":94606,"byte_end":94674,"line_start":608,"line_end":608,"column_start":5,"column_end":73}},{"value":"/ appending `WavWriter` that writes to the file using a `BufWriter`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":94679,"byte_end":94749,"line_start":609,"line_end":609,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":94754,"byte_end":94757,"line_start":610,"line_end":610,"column_start":5,"column_end":8}},{"value":"/ See `WavWriter::new_append()` for more details about append behavior.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":94762,"byte_end":94835,"line_start":611,"line_end":611,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":290},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":96681,"byte_end":96691,"line_start":654,"line_end":654,"column_start":12,"column_end":22},"name":"new_append","qualname":"<WavWriter<W>>::new_append","value":"pub fn new_append(W) -> Result<WavWriter<W>>","parent":null,"children":[],"decl_id":null,"docs":" Creates a writer that appends samples to an existing file stream.","sig":null,"attributes":[{"value":"/ Creates a writer that appends samples to an existing file stream.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":96031,"byte_end":96100,"line_start":642,"line_end":642,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":96105,"byte_end":96108,"line_start":643,"line_end":643,"column_start":5,"column_end":8}},{"value":"/ This first reads the existing header to obtain the spec, then seeks to","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":96113,"byte_end":96187,"line_start":644,"line_end":644,"column_start":5,"column_end":79}},{"value":"/ the end of the writer. The writer then appends new samples to the end of","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":96192,"byte_end":96268,"line_start":645,"line_end":645,"column_start":5,"column_end":81}},{"value":"/ the stream.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":96273,"byte_end":96288,"line_start":646,"line_end":646,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":96293,"byte_end":96296,"line_start":647,"line_end":647,"column_start":5,"column_end":8}},{"value":"/ The underlying writer is assumed to be at offset 0.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":96301,"byte_end":96356,"line_start":648,"line_end":648,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":96361,"byte_end":96364,"line_start":649,"line_end":649,"column_start":5,"column_end":8}},{"value":"/ If the existing file includes a fact chunk, it will not be updated after","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":96369,"byte_end":96445,"line_start":650,"line_end":650,"column_start":5,"column_end":81}},{"value":"/ appending, and hence become outdated. For files produced by Hound this","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":96450,"byte_end":96524,"line_start":651,"line_end":651,"column_start":5,"column_end":79}},{"value":"/ is not an issue, because Hound never writes a fact chunk. For all the","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":96529,"byte_end":96602,"line_start":652,"line_end":652,"column_start":5,"column_end":78}},{"value":"/ formats that Hound can write, the fact chunk is redundant.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":96607,"byte_end":96669,"line_start":653,"line_end":653,"column_start":5,"column_end":67}}]},{"kind":"Struct","id":{"krate":0,"index":291},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":98128,"byte_end":98142,"line_start":688,"line_end":688,"column_start":12,"column_end":26},"name":"SampleWriter16","qualname":"::write::SampleWriter16","value":"SampleWriter16 {  }","parent":null,"children":[{"krate":0,"index":294},{"krate":0,"index":295},{"krate":0,"index":296},{"krate":0,"index":297}],"decl_id":null,"docs":" A writer that specifically only writes integer samples of 16 bits per sample.","sig":null,"attributes":[{"value":"/ A writer that specifically only writes integer samples of 16 bits per sample.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":97237,"byte_end":97318,"line_start":672,"line_end":672,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":97319,"byte_end":97322,"line_start":673,"line_end":673,"column_start":1,"column_end":4}},{"value":"/ The writer buffers written samples internally so they can be written in a","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":97323,"byte_end":97400,"line_start":674,"line_end":674,"column_start":1,"column_end":78}},{"value":"/ single batch later on. This has two advantages when performance is","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":97401,"byte_end":97471,"line_start":675,"line_end":675,"column_start":1,"column_end":71}},{"value":"/ important:","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":97472,"byte_end":97486,"line_start":676,"line_end":676,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":97487,"byte_end":97490,"line_start":677,"line_end":677,"column_start":1,"column_end":4}},{"value":"/  * There is no need for error handling during writing, only on flush. This","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":97491,"byte_end":97569,"line_start":678,"line_end":678,"column_start":1,"column_end":79}},{"value":"/    eliminates a lot of branches.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":97570,"byte_end":97606,"line_start":679,"line_end":679,"column_start":1,"column_end":37}},{"value":"/  * The buffer can be written once, which reduces the overhead of the write","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":97607,"byte_end":97685,"line_start":680,"line_end":680,"column_start":1,"column_end":79}},{"value":"/    call. Because writing to an `io::BufWriter` is implemented with a","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":97686,"byte_end":97758,"line_start":681,"line_end":681,"column_start":1,"column_end":73}},{"value":"/    `memcpy` (even for single bytes), there is a large overhead to writing","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":97759,"byte_end":97836,"line_start":682,"line_end":682,"column_start":1,"column_end":78}},{"value":"/    small amounts of data such as a 16-bit sample. By writing large blocks","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":97837,"byte_end":97914,"line_start":683,"line_end":683,"column_start":1,"column_end":78}},{"value":"/    (or by not using `BufWriter`) this overhead can be avoided.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":97915,"byte_end":97981,"line_start":684,"line_end":684,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":97982,"byte_end":97985,"line_start":685,"line_end":685,"column_start":1,"column_end":4}},{"value":"/ A `SampleWriter16` can be obtained by calling [`WavWriter::get_i16_writer`](","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":97986,"byte_end":98066,"line_start":686,"line_end":686,"column_start":1,"column_end":81}},{"value":"/ struct.WavWriter.html#method.get_i16_writer).","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":98067,"byte_end":98116,"line_start":687,"line_end":687,"column_start":1,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":301},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":99366,"byte_end":99378,"line_start":717,"line_end":717,"column_start":12,"column_end":24},"name":"write_sample","qualname":"<SampleWriter16>::write_sample","value":"pub fn write_sample<S: Sample>(&mut Self, S)","parent":null,"children":[],"decl_id":null,"docs":" Writes a single sample for one channel.","sig":null,"attributes":[{"value":"/ Writes a single sample for one channel.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":98668,"byte_end":98711,"line_start":703,"line_end":703,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":98716,"byte_end":98719,"line_start":704,"line_end":704,"column_start":5,"column_end":8}},{"value":"/ WAVE interleaves channel data, so the channel that this writes the","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":98724,"byte_end":98794,"line_start":705,"line_end":705,"column_start":5,"column_end":75}},{"value":"/ sample to depends on previous writes.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":98799,"byte_end":98840,"line_start":706,"line_end":706,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":98845,"byte_end":98848,"line_start":707,"line_end":707,"column_start":5,"column_end":8}},{"value":"/ Unlike `WavWriter::write_sample()`, no range check is performed. Only","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":98853,"byte_end":98926,"line_start":708,"line_end":708,"column_start":5,"column_end":78}},{"value":"/ the least significant 16 bits are considered, everything else is","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":98931,"byte_end":98999,"line_start":709,"line_end":709,"column_start":5,"column_end":73}},{"value":"/ discarded.  Apart from that check, this method is more efficient than","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":99004,"byte_end":99077,"line_start":710,"line_end":710,"column_start":5,"column_end":78}},{"value":"/ `WavWriter::write_sample()`, because it can avoid dispatching on the","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":99082,"byte_end":99154,"line_start":711,"line_end":711,"column_start":5,"column_end":77}},{"value":"/ number of bits. That was done already when the `SampleWriter16` was","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":99159,"byte_end":99230,"line_start":712,"line_end":712,"column_start":5,"column_end":76}},{"value":"/ constructed.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":99235,"byte_end":99251,"line_start":713,"line_end":713,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":99256,"byte_end":99259,"line_start":714,"line_end":714,"column_start":5,"column_end":8}},{"value":"/ Note that nothing is actually written until `flush()` is called.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":99264,"byte_end":99332,"line_start":715,"line_end":715,"column_start":5,"column_end":73}},{"value":"inline(always)","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":99337,"byte_end":99354,"line_start":716,"line_end":716,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":307},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":100924,"byte_end":100946,"line_start":754,"line_end":754,"column_start":19,"column_end":41},"name":"write_sample_unchecked","qualname":"<SampleWriter16>::write_sample_unchecked","value":"pub unsafe fn write_sample_unchecked<S: Sample>(&mut Self, S)","parent":null,"children":[],"decl_id":null,"docs":" Like `write_sample()`, but does not perform a bounds check when writing\n to the internal buffer.","sig":null,"attributes":[{"value":"/ Like `write_sample()`, but does not perform a bounds check when writing","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":100622,"byte_end":100697,"line_start":748,"line_end":748,"column_start":5,"column_end":80}},{"value":"/ to the internal buffer.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":100702,"byte_end":100729,"line_start":749,"line_end":749,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":100734,"byte_end":100737,"line_start":750,"line_end":750,"column_start":5,"column_end":8}},{"value":"/ It is the responsibility of the programmer to ensure that no more","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":100742,"byte_end":100811,"line_start":751,"line_end":751,"column_start":5,"column_end":74}},{"value":"/ samples are written than allocated when the writer was created.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":100816,"byte_end":100883,"line_start":752,"line_end":752,"column_start":5,"column_end":72}},{"value":"inline(always)","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":100888,"byte_end":100905,"line_start":753,"line_end":753,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":309},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":101321,"byte_end":101326,"line_start":765,"line_end":765,"column_start":12,"column_end":17},"name":"flush","qualname":"<SampleWriter16>::flush","value":"pub fn flush(Self) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Flush the internal buffer to the underlying writer.","sig":null,"attributes":[{"value":"/ Flush the internal buffer to the underlying writer.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":101079,"byte_end":101134,"line_start":759,"line_end":759,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":101139,"byte_end":101142,"line_start":760,"line_end":760,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":101147,"byte_end":101159,"line_start":761,"line_end":761,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":101164,"byte_end":101167,"line_start":762,"line_end":762,"column_start":5,"column_end":8}},{"value":"/ Panics if insufficient samples (less than specified when the writer was","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":101172,"byte_end":101247,"line_start":763,"line_end":763,"column_start":5,"column_end":80}},{"value":"/ constructed) have been written with `write_sample()`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":101252,"byte_end":101309,"line_start":764,"line_end":764,"column_start":5,"column_end":62}}]},{"kind":"Trait","id":{"krate":0,"index":330},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","byte_start":2599,"byte_end":2605,"line_start":79,"line_end":79,"column_start":11,"column_end":17},"name":"Sample","qualname":"::Sample","value":"Sample: Sized","parent":null,"children":[{"krate":0,"index":331},{"krate":0,"index":333},{"krate":0,"index":335}],"decl_id":null,"docs":" A type that can be used to represent audio samples.","sig":null,"attributes":[{"value":"/ A type that can be used to represent audio samples.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","byte_start":2185,"byte_end":2240,"line_start":71,"line_end":71,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","byte_start":2241,"byte_end":2244,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"/ Via this trait, decoding can be generic over `i8`, `i16`, `i32` and `f32`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","byte_start":2245,"byte_end":2323,"line_start":73,"line_end":73,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","byte_start":2324,"byte_end":2327,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"/ All integer formats with bit depths up to 32 bits per sample can be decoded","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","byte_start":2328,"byte_end":2407,"line_start":75,"line_end":75,"column_start":1,"column_end":80}},{"value":"/ into `i32`, but it takes up more memory. If you know beforehand that you","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","byte_start":2408,"byte_end":2484,"line_start":76,"line_end":76,"column_start":1,"column_end":77}},{"value":"/ will be reading a file with 16 bits per sample, then decoding into an `i16`","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","byte_start":2485,"byte_end":2564,"line_start":77,"line_end":77,"column_start":1,"column_end":80}},{"value":"/ will be sufficient.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","byte_start":2565,"byte_end":2588,"line_start":78,"line_end":78,"column_start":1,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":331},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","byte_start":2678,"byte_end":2683,"line_start":81,"line_end":81,"column_start":8,"column_end":13},"name":"write","qualname":"::Sample::write","value":"pub fn write<W: io::Write>(Self, &mut W, u16) -> Result<()>","parent":{"krate":0,"index":330},"children":[],"decl_id":null,"docs":" Writes the audio sample to the WAVE data chunk.\n","sig":null,"attributes":[{"value":"/ Writes the audio sample to the WAVE data chunk.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","byte_start":2619,"byte_end":2670,"line_start":80,"line_end":80,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":333},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","byte_start":2811,"byte_end":2815,"line_start":84,"line_end":84,"column_start":8,"column_end":12},"name":"read","qualname":"::Sample::read","value":"pub fn read<R: io::Read>(&mut R, SampleFormat, u16, u16) -> Result<Self>","parent":{"krate":0,"index":330},"children":[],"decl_id":null,"docs":" Reads the audio sample from the WAVE data chunk.\n","sig":null,"attributes":[{"value":"/ Reads the audio sample from the WAVE data chunk.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","byte_start":2751,"byte_end":2803,"line_start":83,"line_end":83,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":335},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","byte_start":3137,"byte_end":3143,"line_start":91,"line_end":91,"column_start":8,"column_end":14},"name":"as_i16","qualname":"::Sample::as_i16","value":"pub fn as_i16(Self) -> i16","parent":{"krate":0,"index":330},"children":[],"decl_id":null,"docs":" Cast the sample to a 16-bit sample.","sig":null,"attributes":[{"value":"/ Cast the sample to a 16-bit sample.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","byte_start":2904,"byte_end":2943,"line_start":86,"line_end":86,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","byte_start":2948,"byte_end":2951,"line_start":87,"line_end":87,"column_start":5,"column_end":8}},{"value":"/ This does not change the value of the sample, it only casts it. The","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","byte_start":2956,"byte_end":3027,"line_start":88,"line_end":88,"column_start":5,"column_end":76}},{"value":"/ value is assumed to fit within the range. This is not verified,","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","byte_start":3032,"byte_end":3099,"line_start":89,"line_end":89,"column_start":5,"column_end":72}},{"value":"/ truncation may occur.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","byte_start":3104,"byte_end":3129,"line_start":90,"line_end":90,"column_start":5,"column_end":30}}]},{"kind":"TupleVariant","id":{"krate":0,"index":394},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","byte_start":9824,"byte_end":9829,"line_start":298,"line_end":298,"column_start":5,"column_end":10},"name":"Float","qualname":"::SampleFormat::Float","value":"SampleFormat::Float","parent":{"krate":0,"index":393},"children":[],"decl_id":null,"docs":" Wave files with the `WAVE_FORMAT_IEEE_FLOAT` format tag store samples as floating point\n values.","sig":null,"attributes":[{"value":"/ Wave files with the `WAVE_FORMAT_IEEE_FLOAT` format tag store samples as floating point","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","byte_start":9650,"byte_end":9741,"line_start":294,"line_end":294,"column_start":5,"column_end":96}},{"value":"/ values.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","byte_start":9746,"byte_end":9757,"line_start":295,"line_end":295,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","byte_start":9762,"byte_end":9765,"line_start":296,"line_end":296,"column_start":5,"column_end":8}},{"value":"/ Values are normally in the range [-1.0, 1.0].","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","byte_start":9770,"byte_end":9819,"line_start":297,"line_end":297,"column_start":5,"column_end":54}}]},{"kind":"TupleVariant","id":{"krate":0,"index":396},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","byte_start":9925,"byte_end":9928,"line_start":300,"line_end":300,"column_start":5,"column_end":8},"name":"Int","qualname":"::SampleFormat::Int","value":"SampleFormat::Int","parent":{"krate":0,"index":393},"children":[],"decl_id":null,"docs":" Wave files with the `WAVE_FORMAT_PCM` format tag store samples as integer values.\n","sig":null,"attributes":[{"value":"/ Wave files with the `WAVE_FORMAT_PCM` format tag store samples as integer values.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","byte_start":9835,"byte_end":9920,"line_start":299,"line_end":299,"column_start":5,"column_end":90}}]},{"kind":"Enum","id":{"krate":0,"index":393},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","byte_start":9631,"byte_end":9643,"line_start":293,"line_end":293,"column_start":10,"column_end":22},"name":"SampleFormat","qualname":"::SampleFormat","value":"pub enum SampleFormat { Float, Int, }","parent":null,"children":[{"krate":0,"index":394},{"krate":0,"index":396}],"decl_id":null,"docs":" Specifies whether a sample is stored as an \"IEEE Float\" or an integer.\n","sig":null,"attributes":[{"value":"/ Specifies whether a sample is stored as an \"IEEE Float\" or an integer.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","byte_start":9502,"byte_end":9576,"line_start":291,"line_end":291,"column_start":1,"column_end":75}}]},{"kind":"Struct","id":{"krate":0,"index":409},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","byte_start":10033,"byte_end":10040,"line_start":305,"line_end":305,"column_start":12,"column_end":19},"name":"WavSpec","qualname":"::WavSpec","value":"WavSpec { channels, sample_rate, bits_per_sample, sample_format }","parent":null,"children":[{"krate":0,"index":410},{"krate":0,"index":411},{"krate":0,"index":412},{"krate":0,"index":413}],"decl_id":null,"docs":" Specifies properties of the audio data.\n","sig":null,"attributes":[{"value":"/ Specifies properties of the audio data.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","byte_start":9933,"byte_end":9976,"line_start":303,"line_end":303,"column_start":1,"column_end":44}}]},{"kind":"Field","id":{"krate":0,"index":410},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","byte_start":10083,"byte_end":10091,"line_start":307,"line_end":307,"column_start":9,"column_end":17},"name":"channels","qualname":"::WavSpec::channels","value":"u16","parent":{"krate":0,"index":409},"children":[],"decl_id":null,"docs":" The number of channels.\n","sig":null,"attributes":[{"value":"/ The number of channels.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","byte_start":10047,"byte_end":10074,"line_start":306,"line_end":306,"column_start":5,"column_end":32}}]},{"kind":"Field","id":{"krate":0,"index":411},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","byte_start":10235,"byte_end":10246,"line_start":312,"line_end":312,"column_start":9,"column_end":20},"name":"sample_rate","qualname":"::WavSpec::sample_rate","value":"u32","parent":{"krate":0,"index":409},"children":[],"decl_id":null,"docs":" The number of samples per second.","sig":null,"attributes":[{"value":"/ The number of samples per second.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","byte_start":10103,"byte_end":10140,"line_start":309,"line_end":309,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","byte_start":10145,"byte_end":10148,"line_start":310,"line_end":310,"column_start":5,"column_end":8}},{"value":"/ A common value is 44100, this is 44.1 kHz which is used for CD audio.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","byte_start":10153,"byte_end":10226,"line_start":311,"line_end":311,"column_start":5,"column_end":78}}]},{"kind":"Field","id":{"krate":0,"index":412},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","byte_start":10383,"byte_end":10398,"line_start":317,"line_end":317,"column_start":9,"column_end":24},"name":"bits_per_sample","qualname":"::WavSpec::bits_per_sample","value":"u16","parent":{"krate":0,"index":409},"children":[],"decl_id":null,"docs":" The number of bits per sample.","sig":null,"attributes":[{"value":"/ The number of bits per sample.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","byte_start":10258,"byte_end":10292,"line_start":314,"line_end":314,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","byte_start":10297,"byte_end":10300,"line_start":315,"line_end":315,"column_start":5,"column_end":8}},{"value":"/ A common value is 16 bits per sample, which is used for CD audio.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","byte_start":10305,"byte_end":10374,"line_start":316,"line_end":316,"column_start":5,"column_end":74}}]},{"kind":"Field","id":{"krate":0,"index":413},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","byte_start":10477,"byte_end":10490,"line_start":320,"line_end":320,"column_start":9,"column_end":22},"name":"sample_format","qualname":"::WavSpec::sample_format","value":"SampleFormat","parent":{"krate":0,"index":409},"children":[],"decl_id":null,"docs":" Whether the wav's samples are float or integer values.\n","sig":null,"attributes":[{"value":"/ Whether the wav's samples are float or integer values.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","byte_start":10410,"byte_end":10468,"line_start":319,"line_end":319,"column_start":5,"column_end":63}}]},{"kind":"TupleVariant","id":{"krate":0,"index":427},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","byte_start":10677,"byte_end":10684,"line_start":327,"line_end":327,"column_start":5,"column_end":12},"name":"IoError","qualname":"::Error::IoError","value":"Error::IoError(io::Error)","parent":{"krate":0,"index":426},"children":[],"decl_id":null,"docs":" An IO error occured in the underlying reader or writer.\n","sig":null,"attributes":[{"value":"/ An IO error occured in the underlying reader or writer.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","byte_start":10613,"byte_end":10672,"line_start":326,"line_end":326,"column_start":5,"column_end":64}}]},{"kind":"TupleVariant","id":{"krate":0,"index":430},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","byte_start":10747,"byte_end":10758,"line_start":329,"line_end":329,"column_start":5,"column_end":16},"name":"FormatError","qualname":"::Error::FormatError","value":"Error::FormatError(&'static str)","parent":{"krate":0,"index":426},"children":[],"decl_id":null,"docs":" Ill-formed WAVE data was encountered.\n","sig":null,"attributes":[{"value":"/ Ill-formed WAVE data was encountered.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","byte_start":10701,"byte_end":10742,"line_start":328,"line_end":328,"column_start":5,"column_end":46}}]},{"kind":"TupleVariant","id":{"krate":0,"index":433},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","byte_start":11152,"byte_end":11159,"line_start":336,"line_end":336,"column_start":5,"column_end":12},"name":"TooWide","qualname":"::Error::TooWide","value":"Error::TooWide","parent":{"krate":0,"index":426},"children":[],"decl_id":null,"docs":" The sample has more bits than the destination type.","sig":null,"attributes":[{"value":"/ The sample has more bits than the destination type.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","byte_start":10778,"byte_end":10833,"line_start":330,"line_end":330,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","byte_start":10838,"byte_end":10841,"line_start":331,"line_end":331,"column_start":5,"column_end":8}},{"value":"/ When iterating using the `samples` iterator, this means that the","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","byte_start":10846,"byte_end":10914,"line_start":332,"line_end":332,"column_start":5,"column_end":73}},{"value":"/ destination type (produced by the iterator) is not wide enough to hold","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","byte_start":10919,"byte_end":10993,"line_start":333,"line_end":333,"column_start":5,"column_end":79}},{"value":"/ the sample. When writing, this means that the sample cannot be written,","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","byte_start":10998,"byte_end":11073,"line_start":334,"line_end":334,"column_start":5,"column_end":80}},{"value":"/ because it requires more bits than the bits per sample specified.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","byte_start":11078,"byte_end":11147,"line_start":335,"line_end":335,"column_start":5,"column_end":74}}]},{"kind":"TupleVariant","id":{"krate":0,"index":435},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","byte_start":11248,"byte_end":11264,"line_start":338,"line_end":338,"column_start":5,"column_end":21},"name":"UnfinishedSample","qualname":"::Error::UnfinishedSample","value":"Error::UnfinishedSample","parent":{"krate":0,"index":426},"children":[],"decl_id":null,"docs":" The number of samples written is not a multiple of the number of channels.\n","sig":null,"attributes":[{"value":"/ The number of samples written is not a multiple of the number of channels.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","byte_start":11165,"byte_end":11243,"line_start":337,"line_end":337,"column_start":5,"column_end":83}}]},{"kind":"TupleVariant","id":{"krate":0,"index":437},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","byte_start":11307,"byte_end":11318,"line_start":340,"line_end":340,"column_start":5,"column_end":16},"name":"Unsupported","qualname":"::Error::Unsupported","value":"Error::Unsupported","parent":{"krate":0,"index":426},"children":[],"decl_id":null,"docs":" The format is not supported.\n","sig":null,"attributes":[{"value":"/ The format is not supported.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","byte_start":11270,"byte_end":11302,"line_start":339,"line_end":339,"column_start":5,"column_end":37}}]},{"kind":"TupleVariant","id":{"krate":0,"index":439},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","byte_start":11809,"byte_end":11828,"line_start":350,"line_end":350,"column_start":5,"column_end":24},"name":"InvalidSampleFormat","qualname":"::Error::InvalidSampleFormat","value":"Error::InvalidSampleFormat","parent":{"krate":0,"index":426},"children":[],"decl_id":null,"docs":" The sample format is different than the destination format.","sig":null,"attributes":[{"value":"/ The sample format is different than the destination format.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","byte_start":11324,"byte_end":11387,"line_start":341,"line_end":341,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","byte_start":11392,"byte_end":11395,"line_start":342,"line_end":342,"column_start":5,"column_end":8}},{"value":"/ When iterating using the `samples` iterator, this means the destination","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","byte_start":11400,"byte_end":11475,"line_start":343,"line_end":343,"column_start":5,"column_end":80}},{"value":"/ type (produced by the iterator) has a different sample format than the","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","byte_start":11480,"byte_end":11554,"line_start":344,"line_end":344,"column_start":5,"column_end":79}},{"value":"/ samples in the wav file.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","byte_start":11559,"byte_end":11587,"line_start":345,"line_end":345,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","byte_start":11592,"byte_end":11595,"line_start":346,"line_end":346,"column_start":5,"column_end":8}},{"value":"/ For example, this will occur if the user attempts to produce `i32`","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","byte_start":11600,"byte_end":11670,"line_start":347,"line_end":347,"column_start":5,"column_end":75}},{"value":"/ samples (which have a `SampleFormat::Int`) from a wav file that","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","byte_start":11675,"byte_end":11742,"line_start":348,"line_end":348,"column_start":5,"column_end":72}},{"value":"/ contains floating point data (`SampleFormat::Float`).","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","byte_start":11747,"byte_end":11804,"line_start":349,"line_end":349,"column_start":5,"column_end":62}}]},{"kind":"Enum","id":{"krate":0,"index":426},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","byte_start":10601,"byte_end":10606,"line_start":325,"line_end":325,"column_start":10,"column_end":15},"name":"Error","qualname":"::Error","value":"pub enum Error {\n    IoError(io::Error),\n    FormatError(&'static str),\n    TooWide,\n    UnfinishedSample,\n    Unsupported,\n    InvalidSampleFormat,\n}","parent":null,"children":[{"krate":0,"index":427},{"krate":0,"index":430},{"krate":0,"index":433},{"krate":0,"index":435},{"krate":0,"index":437},{"krate":0,"index":439}],"decl_id":null,"docs":" The error type for operations on `WavReader` and `WavWriter`.\n","sig":null,"attributes":[{"value":"/ The error type for operations on `WavReader` and `WavWriter`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","byte_start":10509,"byte_end":10574,"line_start":323,"line_end":323,"column_start":1,"column_end":66}}]},{"kind":"Type","id":{"krate":0,"index":378},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","byte_start":13974,"byte_end":13980,"line_start":409,"line_end":409,"column_start":10,"column_end":16},"name":"Result","qualname":"::Result","value":"result::Result<T, Error>","parent":null,"children":[],"decl_id":null,"docs":" A type for results generated by Hound where the error type is hard-wired.\n","sig":null,"attributes":[{"value":"/ A type for results generated by Hound where the error type is hard-wired.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","byte_start":13887,"byte_end":13964,"line_start":408,"line_end":408,"column_start":1,"column_end":78}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/read.rs","byte_start":28933,"byte_end":28934,"line_start":70,"line_end":70,"column_start":21,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":71},{"krate":0,"index":72},{"krate":0,"index":74},{"krate":0,"index":75},{"krate":0,"index":77},{"krate":0,"index":79},{"krate":0,"index":81},{"krate":0,"index":83},{"krate":0,"index":85},{"krate":0,"index":87},{"krate":0,"index":89},{"krate":0,"index":91}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/read.rs","byte_start":38294,"byte_end":38303,"line_start":334,"line_end":334,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":129},{"krate":0,"index":131},{"krate":0,"index":136},{"krate":0,"index":137},{"krate":0,"index":138},{"krate":0,"index":140},{"krate":0,"index":141},{"krate":0,"index":142},{"krate":0,"index":145},{"krate":0,"index":147},{"krate":0,"index":148},{"krate":0,"index":149},{"krate":0,"index":150}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/read.rs","byte_start":54075,"byte_end":54084,"line_start":717,"line_end":717,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":152}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/read.rs","byte_start":55314,"byte_end":55324,"line_start":750,"line_end":750,"column_start":30,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":163},{"krate":0,"index":164},{"krate":0,"index":165}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/read.rs","byte_start":55634,"byte_end":55644,"line_start":765,"line_end":765,"column_start":39,"column_end":49},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/read.rs","byte_start":55728,"byte_end":55742,"line_start":771,"line_end":771,"column_start":25,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":173},{"krate":0,"index":174},{"krate":0,"index":175}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/read.rs","byte_start":56042,"byte_end":56056,"line_start":786,"line_end":786,"column_start":34,"column_end":48},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":73490,"byte_end":73491,"line_start":55,"line_end":55,"column_start":22,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":232},{"krate":0,"index":233},{"krate":0,"index":234},{"krate":0,"index":236},{"krate":0,"index":237},{"krate":0,"index":239},{"krate":0,"index":240},{"krate":0,"index":242}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":77014,"byte_end":77023,"line_start":173,"line_end":173,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":262},{"krate":0,"index":263},{"krate":0,"index":265},{"krate":0,"index":266},{"krate":0,"index":267},{"krate":0,"index":268},{"krate":0,"index":270},{"krate":0,"index":272},{"krate":0,"index":273},{"krate":0,"index":274},{"krate":0,"index":275},{"krate":0,"index":276},{"krate":0,"index":277}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":91761,"byte_end":91770,"line_start":531,"line_end":531,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":280}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":93798,"byte_end":93807,"line_start":591,"line_end":591,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":284},{"krate":0,"index":286}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":95971,"byte_end":95980,"line_start":641,"line_end":641,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":290}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":98635,"byte_end":98649,"line_start":702,"line_end":702,"column_start":40,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":301},{"krate":0,"index":303},{"krate":0,"index":307},{"krate":0,"index":309}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","byte_start":11855,"byte_end":11860,"line_start":353,"line_end":353,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":372}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","byte_start":12856,"byte_end":12861,"line_start":378,"line_end":378,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":374},{"krate":0,"index":375}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","byte_start":13803,"byte_end":13808,"line_start":402,"line_end":402,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":377}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/read.rs","byte_start":27018,"byte_end":27022,"line_start":24,"line_end":24,"column_start":24,"column_end":28},"kind":"SuperTrait","from":{"krate":1,"index":4266},"to":{"krate":0,"index":56}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/read.rs","byte_start":28933,"byte_end":28934,"line_start":70,"line_end":70,"column_start":21,"column_end":22},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":70},"to":{"krate":0,"index":56}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/read.rs","byte_start":38294,"byte_end":38303,"line_start":334,"line_end":334,"column_start":9,"column_end":18},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":105},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/read.rs","byte_start":54075,"byte_end":54084,"line_start":717,"line_end":717,"column_start":6,"column_end":15},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":105},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/read.rs","byte_start":55314,"byte_end":55324,"line_start":750,"line_end":750,"column_start":30,"column_end":40},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":112},"to":{"krate":2,"index":7249}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/read.rs","byte_start":55634,"byte_end":55644,"line_start":765,"line_end":765,"column_start":39,"column_end":49},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":112},"to":{"krate":2,"index":7138}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/read.rs","byte_start":55728,"byte_end":55742,"line_start":771,"line_end":771,"column_start":25,"column_end":39},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":118},"to":{"krate":2,"index":7249}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/read.rs","byte_start":56042,"byte_end":56056,"line_start":786,"line_end":786,"column_start":34,"column_end":48},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":118},"to":{"krate":2,"index":7138}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":72369,"byte_end":72374,"line_start":25,"line_end":25,"column_start":25,"column_end":30},"kind":"SuperTrait","from":{"krate":1,"index":4327},"to":{"krate":0,"index":221}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":73490,"byte_end":73491,"line_start":55,"line_end":55,"column_start":22,"column_end":23},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":231},"to":{"krate":0,"index":221}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":77014,"byte_end":77023,"line_start":173,"line_end":173,"column_start":9,"column_end":18},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":246},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":91761,"byte_end":91770,"line_start":531,"line_end":531,"column_start":18,"column_end":27},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":246},"to":{"krate":2,"index":3071}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":93798,"byte_end":93807,"line_start":591,"line_end":591,"column_start":6,"column_end":15},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":246},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":95971,"byte_end":95980,"line_start":641,"line_end":641,"column_start":9,"column_end":18},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":246},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/write.rs","byte_start":98635,"byte_end":98649,"line_start":702,"line_end":702,"column_start":40,"column_end":54},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":291},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","byte_start":2607,"byte_end":2612,"line_start":79,"line_end":79,"column_start":19,"column_end":24},"kind":"SuperTrait","from":{"krate":2,"index":2830},"to":{"krate":0,"index":330}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","byte_start":11855,"byte_end":11860,"line_start":353,"line_end":353,"column_start":23,"column_end":28},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":426},"to":{"krate":2,"index":8836}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","byte_start":12856,"byte_end":12861,"line_start":378,"line_end":378,"column_start":23,"column_end":28},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":426},"to":{"krate":1,"index":2326}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","byte_start":13803,"byte_end":13808,"line_start":402,"line_end":402,"column_start":26,"column_end":31},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":426},"to":{"krate":2,"index":2731}}]}