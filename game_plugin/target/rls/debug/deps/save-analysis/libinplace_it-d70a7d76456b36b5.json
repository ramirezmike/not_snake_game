{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3","program":"/home/mramirez/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","inplace_it","--edition=2018","/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=d70a7d76456b36b5","-C","extra-filename=-d70a7d76456b36b5","--out-dir","/home/mramirez/code/projects/games/bug_game/target/rls/debug/deps","-L","dependency=/home/mramirez/code/projects/games/bug_game/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/home/mramirez/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu"],"output":"/home/mramirez/code/projects/games/bug_game/target/rls/debug/deps/libinplace_it-d70a7d76456b36b5.rmeta"},"prelude":{"crate_id":{"name":"inplace_it","disambiguator":[13384111347645068146,9297113210892384510]},"crate_root":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src","external_crates":[{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[397594041871667817,11704163070354659695]}},{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/uninitialized_slice_memory_guard.rs","num":2,"id":{"name":"core","disambiguator":[17044353007700780372,2918200604221815240]}},{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[15333840167806743833,9889193056877993824]}},{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[4550415707075219492,6623162258675921486]}},{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[8289379911494056514,13856099756999900329]}},{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[10514502805115346386,576110030083780649]}},{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[9878185313679130060,1975285035821961205]}},{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[4010603182529655334,7152219772350788052]}},{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[1807637986128902209,18379128151258407121]}},{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[11140927657351163542,6267109750485550558]}},{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[13809795498598848728,13320395723520943315]}},{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/lib.rs","num":12,"id":{"name":"std_detect","disambiguator":[13869841232067652907,9875669357213642224]}},{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/lib.rs","num":13,"id":{"name":"addr2line","disambiguator":[15533050656730733495,14669839968799848603]}},{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/lib.rs","num":14,"id":{"name":"gimli","disambiguator":[14371692877540073659,8181723439448527964]}},{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/lib.rs","num":15,"id":{"name":"object","disambiguator":[639541300699627395,1995254029228069844]}},{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/lib.rs","num":16,"id":{"name":"miniz_oxide","disambiguator":[12482123824895737424,11765111494567609733]}},{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/lib.rs","num":17,"id":{"name":"adler","disambiguator":[1169880241773671279,8605314106566979368]}},{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/lib.rs","num":18,"id":{"name":"panic_unwind","disambiguator":[5016943468141875609,13494347935157563341]}}],"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/lib.rs","byte_start":0,"byte_end":2037,"line_start":1,"line_end":57,"column_start":1,"column_end":24}},"imports":[{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/lib.rs","byte_start":1987,"byte_end":1988,"line_start":55,"line_end":55,"column_start":17,"column_end":18},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/lib.rs","byte_start":2011,"byte_end":2012,"line_start":56,"line_end":56,"column_start":22,"column_end":23},"alias_span":null,"name":"*","value":"try_inplace_array","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/lib.rs","byte_start":2035,"byte_end":2036,"line_start":57,"line_end":57,"column_start":22,"column_end":23},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/lib.rs","byte_start":0,"byte_end":2037,"line_start":1,"line_end":57,"column_start":1,"column_end":24},"name":"","qualname":"::","value":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":92},{"krate":0,"index":114},{"krate":0,"index":137},{"krate":0,"index":138},{"krate":0,"index":139}],"decl_id":null,"docs":" # Inplace it!","sig":null,"attributes":[{"value":"/ # Inplace it!","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/lib.rs","byte_start":0,"byte_end":17,"line_start":1,"line_end":1,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/lib.rs","byte_start":18,"byte_end":21,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ Place small arrays on the stack with a low cost!","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/lib.rs","byte_start":22,"byte_end":74,"line_start":3,"line_end":3,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/lib.rs","byte_start":75,"byte_end":78,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ The only price you should pay for this is the price of choosing","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/lib.rs","byte_start":79,"byte_end":146,"line_start":5,"line_end":5,"column_start":1,"column_end":68}},{"value":"/ a type based on the size of the requested array! This is just one `match`!","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/lib.rs","byte_start":147,"byte_end":225,"line_start":6,"line_end":6,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/lib.rs","byte_start":226,"byte_end":229,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ ## What?","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/lib.rs","byte_start":230,"byte_end":242,"line_start":8,"line_end":8,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/lib.rs","byte_start":243,"byte_end":246,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ This crate is created for one purpose: allocating small arrays on the stack.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/lib.rs","byte_start":247,"byte_end":327,"line_start":10,"line_end":10,"column_start":1,"column_end":81}},{"value":"/ The simplest way to use it is:","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/lib.rs","byte_start":328,"byte_end":362,"line_start":11,"line_end":11,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/lib.rs","byte_start":363,"byte_end":366,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/lib.rs","byte_start":367,"byte_end":378,"line_start":13,"line_end":13,"column_start":1,"column_end":12}},{"value":"/ use inplace_it::{inplace_or_alloc_array, UninitializedSliceMemoryGuard};","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/lib.rs","byte_start":379,"byte_end":455,"line_start":14,"line_end":14,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/lib.rs","byte_start":456,"byte_end":459,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ inplace_or_alloc_array(","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/lib.rs","byte_start":460,"byte_end":487,"line_start":16,"line_end":16,"column_start":1,"column_end":28}},{"value":"/     150, // size of needed array to allocate","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/lib.rs","byte_start":488,"byte_end":536,"line_start":17,"line_end":17,"column_start":1,"column_end":49}},{"value":"/     |mut uninit_guard: UninitializedSliceMemoryGuard<u16>| { // and this is consumer of uninitialized memory","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/lib.rs","byte_start":537,"byte_end":649,"line_start":18,"line_end":18,"column_start":1,"column_end":113}},{"value":"/         assert_eq!(160, uninit_guard.len());","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/lib.rs","byte_start":650,"byte_end":698,"line_start":19,"line_end":19,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/lib.rs","byte_start":699,"byte_end":702,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/         {","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/lib.rs","byte_start":703,"byte_end":716,"line_start":21,"line_end":21,"column_start":1,"column_end":14}},{"value":"/             // You can borrow guard to reuse memory","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/lib.rs","byte_start":717,"byte_end":772,"line_start":22,"line_end":22,"column_start":1,"column_end":56}},{"value":"/             let borrowed_uninit_guard = uninit_guard.borrow();","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/lib.rs","byte_start":773,"byte_end":839,"line_start":23,"line_end":23,"column_start":1,"column_end":67}},{"value":"/             // Let's initialize memory","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/lib.rs","byte_start":840,"byte_end":882,"line_start":24,"line_end":24,"column_start":1,"column_end":43}},{"value":"/             // Note that borrowed_uninit_guard will be consumed (destroyed to produce initialized memory guard)","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/lib.rs","byte_start":883,"byte_end":998,"line_start":25,"line_end":25,"column_start":1,"column_end":116}},{"value":"/             let init_guard = borrowed_uninit_guard.init(|index| index as u16 + 1);","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/lib.rs","byte_start":999,"byte_end":1085,"line_start":26,"line_end":26,"column_start":1,"column_end":87}},{"value":"/             // Memory now contains elements [1, 2, ..., 160]","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/lib.rs","byte_start":1086,"byte_end":1150,"line_start":27,"line_end":27,"column_start":1,"column_end":65}},{"value":"/             // Lets check it. Sum of [1, 2, ..., 160] = 12880","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/lib.rs","byte_start":1151,"byte_end":1216,"line_start":28,"line_end":28,"column_start":1,"column_end":66}},{"value":"/             let sum: u16 = init_guard.iter().sum();","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/lib.rs","byte_start":1217,"byte_end":1272,"line_start":29,"line_end":29,"column_start":1,"column_end":56}},{"value":"/             assert_eq!(sum, 12880);","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/lib.rs","byte_start":1273,"byte_end":1312,"line_start":30,"line_end":30,"column_start":1,"column_end":40}},{"value":"/         }","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/lib.rs","byte_start":1313,"byte_end":1326,"line_start":31,"line_end":31,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/lib.rs","byte_start":1327,"byte_end":1330,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/         {","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/lib.rs","byte_start":1331,"byte_end":1344,"line_start":33,"line_end":33,"column_start":1,"column_end":14}},{"value":"/             // If you don't want to reuse memory, you can init new guard directly","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/lib.rs","byte_start":1345,"byte_end":1430,"line_start":34,"line_end":34,"column_start":1,"column_end":86}},{"value":"/             let init_guard = uninit_guard.init(|index| index as u16 * 2);","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/lib.rs","byte_start":1431,"byte_end":1508,"line_start":35,"line_end":35,"column_start":1,"column_end":78}},{"value":"/             // Memory now contains elements [0, 2, 4, ..., 318]","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/lib.rs","byte_start":1509,"byte_end":1576,"line_start":36,"line_end":36,"column_start":1,"column_end":68}},{"value":"/             // Lets check it. Sum of [0, 2, 4, ..., 318] = 25440","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/lib.rs","byte_start":1577,"byte_end":1645,"line_start":37,"line_end":37,"column_start":1,"column_end":69}},{"value":"/             let sum: u16 = init_guard.iter().sum();","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/lib.rs","byte_start":1646,"byte_end":1701,"line_start":38,"line_end":38,"column_start":1,"column_end":56}},{"value":"/             assert_eq!(sum, 25440);","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/lib.rs","byte_start":1702,"byte_end":1741,"line_start":39,"line_end":39,"column_start":1,"column_end":40}},{"value":"/         }","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/lib.rs","byte_start":1742,"byte_end":1755,"line_start":40,"line_end":40,"column_start":1,"column_end":14}},{"value":"/     }","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/lib.rs","byte_start":1756,"byte_end":1765,"line_start":41,"line_end":41,"column_start":1,"column_end":10}},{"value":"/ )","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/lib.rs","byte_start":1766,"byte_end":1771,"line_start":42,"line_end":42,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/lib.rs","byte_start":1772,"byte_end":1779,"line_start":43,"line_end":43,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/lib.rs","byte_start":1780,"byte_end":1783,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ ## Why?","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/lib.rs","byte_start":1784,"byte_end":1795,"line_start":45,"line_end":45,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/lib.rs","byte_start":1796,"byte_end":1799,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ Because allocation on the stack (i.e. placing variables) is **MUCH FASTER** then usual","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/lib.rs","byte_start":1800,"byte_end":1890,"line_start":47,"line_end":47,"column_start":1,"column_end":91}},{"value":"/ allocating in the heap.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/lib.rs","byte_start":1891,"byte_end":1918,"line_start":48,"line_end":48,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/lib.rs","byte_start":1919,"byte_end":1922,"line_start":49,"line_end":49,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":19},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/uninitialized_slice_memory_guard.rs","byte_start":4589,"byte_end":4618,"line_start":64,"line_end":64,"column_start":12,"column_end":41},"name":"UninitializedSliceMemoryGuard","qualname":"::guards::uninitialized_slice_memory_guard::UninitializedSliceMemoryGuard","value":"UninitializedSliceMemoryGuard {  }","parent":null,"children":[{"krate":0,"index":22}],"decl_id":null,"docs":" Guard-struct used to own uninitialized memory and provide functions for initializing it.\n Usually, you *should not* use this struct to handle your memory.","sig":null,"attributes":[{"value":"/ Guard-struct used to own uninitialized memory and provide functions for initializing it.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/uninitialized_slice_memory_guard.rs","byte_start":2370,"byte_end":2462,"line_start":10,"line_end":10,"column_start":1,"column_end":93}},{"value":"/ Usually, you *should not* use this struct to handle your memory.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/uninitialized_slice_memory_guard.rs","byte_start":2463,"byte_end":2531,"line_start":11,"line_end":11,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/uninitialized_slice_memory_guard.rs","byte_start":2532,"byte_end":2535,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ Initializing functions spawns [SliceMemoryGuard] which will provide access to initialized memory.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/uninitialized_slice_memory_guard.rs","byte_start":2536,"byte_end":2637,"line_start":13,"line_end":13,"column_start":1,"column_end":102}},{"value":"/ It also means memory can be used again after [SliceMemoryGuard] is dropped.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/uninitialized_slice_memory_guard.rs","byte_start":2638,"byte_end":2717,"line_start":14,"line_end":14,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/uninitialized_slice_memory_guard.rs","byte_start":2718,"byte_end":2721,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ ### Safety","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/uninitialized_slice_memory_guard.rs","byte_start":2722,"byte_end":2736,"line_start":16,"line_end":16,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/uninitialized_slice_memory_guard.rs","byte_start":2737,"byte_end":2740,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ If you use this struct manually, remember: `&mut [MaybeUninit<T>]`'s content will be overwriten while initialization.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/uninitialized_slice_memory_guard.rs","byte_start":2741,"byte_end":2862,"line_start":18,"line_end":18,"column_start":1,"column_end":122}},{"value":"/ So it is *not safe* to apply this struct to already initialized data and it can lead to *memory leaks*.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/uninitialized_slice_memory_guard.rs","byte_start":2863,"byte_end":2970,"line_start":19,"line_end":19,"column_start":1,"column_end":108}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/uninitialized_slice_memory_guard.rs","byte_start":2971,"byte_end":2974,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ ### Example","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/uninitialized_slice_memory_guard.rs","byte_start":2975,"byte_end":2990,"line_start":21,"line_end":21,"column_start":1,"column_end":16}},{"value":"/ ```rust","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/uninitialized_slice_memory_guard.rs","byte_start":2991,"byte_end":3002,"line_start":22,"line_end":22,"column_start":1,"column_end":12}},{"value":"/ use inplace_it::UninitializedSliceMemoryGuard;","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/uninitialized_slice_memory_guard.rs","byte_start":3003,"byte_end":3053,"line_start":23,"line_end":23,"column_start":1,"column_end":51}},{"value":"/ use std::mem::MaybeUninit;","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/uninitialized_slice_memory_guard.rs","byte_start":3054,"byte_end":3084,"line_start":24,"line_end":24,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/uninitialized_slice_memory_guard.rs","byte_start":3085,"byte_end":3088,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ // Placing uninitialized memory","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/uninitialized_slice_memory_guard.rs","byte_start":3089,"byte_end":3124,"line_start":26,"line_end":26,"column_start":1,"column_end":36}},{"value":"/ let mut memory: [MaybeUninit<usize>; 100] = unsafe { MaybeUninit::uninit().assume_init() };","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/uninitialized_slice_memory_guard.rs","byte_start":3125,"byte_end":3220,"line_start":27,"line_end":27,"column_start":1,"column_end":96}},{"value":"/ // Initializing guard","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/uninitialized_slice_memory_guard.rs","byte_start":3221,"byte_end":3246,"line_start":28,"line_end":28,"column_start":1,"column_end":26}},{"value":"/ let mut uninit_memory_guard = unsafe { UninitializedSliceMemoryGuard::new(&mut memory) };","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/uninitialized_slice_memory_guard.rs","byte_start":3247,"byte_end":3340,"line_start":29,"line_end":29,"column_start":1,"column_end":94}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/uninitialized_slice_memory_guard.rs","byte_start":3341,"byte_end":3344,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ {","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/uninitialized_slice_memory_guard.rs","byte_start":3345,"byte_end":3350,"line_start":31,"line_end":31,"column_start":1,"column_end":6}},{"value":"/     // Initializing memory","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/uninitialized_slice_memory_guard.rs","byte_start":3351,"byte_end":3381,"line_start":32,"line_end":32,"column_start":1,"column_end":31}},{"value":"/     let mut memory_guard = uninit_memory_guard","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/uninitialized_slice_memory_guard.rs","byte_start":3382,"byte_end":3432,"line_start":33,"line_end":33,"column_start":1,"column_end":51}},{"value":"/         // we need to call .borrow() because out init-API consumes uninit-guard","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/uninitialized_slice_memory_guard.rs","byte_start":3433,"byte_end":3516,"line_start":34,"line_end":34,"column_start":1,"column_end":84}},{"value":"/         .borrow()","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/uninitialized_slice_memory_guard.rs","byte_start":3517,"byte_end":3538,"line_start":35,"line_end":35,"column_start":1,"column_end":22}},{"value":"/         // then passing initialize closure and the guard is ok","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/uninitialized_slice_memory_guard.rs","byte_start":3539,"byte_end":3605,"line_start":36,"line_end":36,"column_start":1,"column_end":67}},{"value":"/         .init(|index| index * 2);","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/uninitialized_slice_memory_guard.rs","byte_start":3606,"byte_end":3643,"line_start":37,"line_end":37,"column_start":1,"column_end":38}},{"value":"/     // For now, memory contains content like [0, 2, 4, 6, ..., 196, 198]","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/uninitialized_slice_memory_guard.rs","byte_start":3644,"byte_end":3720,"line_start":38,"line_end":38,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/uninitialized_slice_memory_guard.rs","byte_start":3721,"byte_end":3724,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/     // Using memory","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/uninitialized_slice_memory_guard.rs","byte_start":3725,"byte_end":3748,"line_start":40,"line_end":40,"column_start":1,"column_end":24}},{"value":"/     // Sum of [0, 2, 4, 6, ..., 196, 198] = sum of [0, 1, 2, 3, ..., 98, 99] * 2 = ( 99 * (99+1) ) / 2 * 2","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/uninitialized_slice_memory_guard.rs","byte_start":3749,"byte_end":3859,"line_start":41,"line_end":41,"column_start":1,"column_end":111}},{"value":"/     let sum: usize = memory_guard.iter().sum();","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/uninitialized_slice_memory_guard.rs","byte_start":3860,"byte_end":3911,"line_start":42,"line_end":42,"column_start":1,"column_end":52}},{"value":"/     assert_eq!(sum, 99 * 100);","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/uninitialized_slice_memory_guard.rs","byte_start":3912,"byte_end":3946,"line_start":43,"line_end":43,"column_start":1,"column_end":35}},{"value":"/     // memory_guard dropped here","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/uninitialized_slice_memory_guard.rs","byte_start":3947,"byte_end":3983,"line_start":44,"line_end":44,"column_start":1,"column_end":37}},{"value":"/ }","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/uninitialized_slice_memory_guard.rs","byte_start":3984,"byte_end":3989,"line_start":45,"line_end":45,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/uninitialized_slice_memory_guard.rs","byte_start":3990,"byte_end":3993,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ // uninit_memory_guard is available again now","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/uninitialized_slice_memory_guard.rs","byte_start":3994,"byte_end":4043,"line_start":47,"line_end":47,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/uninitialized_slice_memory_guard.rs","byte_start":4044,"byte_end":4047,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ {","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/uninitialized_slice_memory_guard.rs","byte_start":4048,"byte_end":4053,"line_start":49,"line_end":49,"column_start":1,"column_end":6}},{"value":"/     // Initializing memory","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/uninitialized_slice_memory_guard.rs","byte_start":4054,"byte_end":4084,"line_start":50,"line_end":50,"column_start":1,"column_end":31}},{"value":"/     let mut memory_guard = uninit_memory_guard.init(|index| index * index);","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/uninitialized_slice_memory_guard.rs","byte_start":4085,"byte_end":4164,"line_start":51,"line_end":51,"column_start":1,"column_end":80}},{"value":"/     // For now, memory contains content like [0, 1, 4, 9, ..., 9604, 9801]","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/uninitialized_slice_memory_guard.rs","byte_start":4165,"byte_end":4243,"line_start":52,"line_end":52,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/uninitialized_slice_memory_guard.rs","byte_start":4244,"byte_end":4247,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/     // Using memory","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/uninitialized_slice_memory_guard.rs","byte_start":4248,"byte_end":4271,"line_start":54,"line_end":54,"column_start":1,"column_end":24}},{"value":"/     // Sum of [0, 1, 4, 9, ..., 9604, 9801] = 99 * (99 + 1) * (2 * 99 + 1) / 6","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/uninitialized_slice_memory_guard.rs","byte_start":4272,"byte_end":4354,"line_start":55,"line_end":55,"column_start":1,"column_end":83}},{"value":"/     let sum: usize = memory_guard.iter().sum();","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/uninitialized_slice_memory_guard.rs","byte_start":4355,"byte_end":4406,"line_start":56,"line_end":56,"column_start":1,"column_end":52}},{"value":"/     assert_eq!(sum, 99 * (99 + 1) * (2 * 99 + 1) / 6);","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/uninitialized_slice_memory_guard.rs","byte_start":4407,"byte_end":4465,"line_start":57,"line_end":57,"column_start":1,"column_end":59}},{"value":"/     // memory_guard dropped here","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/uninitialized_slice_memory_guard.rs","byte_start":4466,"byte_end":4502,"line_start":58,"line_end":58,"column_start":1,"column_end":37}},{"value":"/ }","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/uninitialized_slice_memory_guard.rs","byte_start":4503,"byte_end":4508,"line_start":59,"line_end":59,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/uninitialized_slice_memory_guard.rs","byte_start":4509,"byte_end":4512,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/uninitialized_slice_memory_guard.rs","byte_start":4513,"byte_end":4520,"line_start":61,"line_end":61,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/uninitialized_slice_memory_guard.rs","byte_start":4521,"byte_end":4524,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"/ [SliceMemoryGuard]: struct.SliceMemoryGuard.html","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/uninitialized_slice_memory_guard.rs","byte_start":4525,"byte_end":4577,"line_start":63,"line_end":63,"column_start":1,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":26},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/uninitialized_slice_memory_guard.rs","byte_start":4784,"byte_end":4787,"line_start":71,"line_end":71,"column_start":19,"column_end":22},"name":"new","qualname":"<UninitializedSliceMemoryGuard>::new","value":"pub unsafe fn new(&'a mut [MaybeUninit<T>]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Initialize memory guard\n","sig":null,"attributes":[{"value":"/ Initialize memory guard","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/uninitialized_slice_memory_guard.rs","byte_start":4724,"byte_end":4751,"line_start":69,"line_end":69,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/uninitialized_slice_memory_guard.rs","byte_start":4756,"byte_end":4765,"line_start":70,"line_end":70,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":27},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/uninitialized_slice_memory_guard.rs","byte_start":4927,"byte_end":4930,"line_start":77,"line_end":77,"column_start":12,"column_end":15},"name":"len","qualname":"<UninitializedSliceMemoryGuard>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get the length of memory slice\n","sig":null,"attributes":[{"value":"/ Get the length of memory slice","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/uninitialized_slice_memory_guard.rs","byte_start":4867,"byte_end":4901,"line_start":75,"line_end":75,"column_start":5,"column_end":39}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/uninitialized_slice_memory_guard.rs","byte_start":4906,"byte_end":4915,"line_start":76,"line_end":76,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":28},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/uninitialized_slice_memory_guard.rs","byte_start":5214,"byte_end":5219,"line_start":89,"line_end":89,"column_start":12,"column_end":17},"name":"slice","qualname":"<UninitializedSliceMemoryGuard>::slice","value":"pub fn slice<impl RangeBounds<usize>: RangeBounds<usize>>(Self,\n                                                          impl RangeBounds<usize>)\n-> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct new memory guard with new bounds.","sig":null,"attributes":[{"value":"/ Construct new memory guard with new bounds.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/uninitialized_slice_memory_guard.rs","byte_start":4986,"byte_end":5033,"line_start":81,"line_end":81,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/uninitialized_slice_memory_guard.rs","byte_start":5038,"byte_end":5041,"line_start":82,"line_end":82,"column_start":5,"column_end":8}},{"value":"/ Can be used to shrink memory.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/uninitialized_slice_memory_guard.rs","byte_start":5046,"byte_end":5079,"line_start":83,"line_end":83,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/uninitialized_slice_memory_guard.rs","byte_start":5084,"byte_end":5087,"line_start":84,"line_end":84,"column_start":5,"column_end":8}},{"value":"/ ### Panics","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/uninitialized_slice_memory_guard.rs","byte_start":5092,"byte_end":5106,"line_start":85,"line_end":85,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/uninitialized_slice_memory_guard.rs","byte_start":5111,"byte_end":5114,"line_start":86,"line_end":86,"column_start":5,"column_end":8}},{"value":"/ Panic can be reached when given `range` is out of memory's range.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/uninitialized_slice_memory_guard.rs","byte_start":5119,"byte_end":5188,"line_start":87,"line_end":87,"column_start":5,"column_end":74}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/uninitialized_slice_memory_guard.rs","byte_start":5193,"byte_end":5202,"line_start":88,"line_end":88,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":30},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/uninitialized_slice_memory_guard.rs","byte_start":5911,"byte_end":5915,"line_start":108,"line_end":108,"column_start":12,"column_end":16},"name":"init","qualname":"<UninitializedSliceMemoryGuard>::init","value":"pub fn init<impl FnMut(usize) -> T: FnMut(usize) ->\n            T>(Self, impl FnMut(usize) -> T) -> SliceMemoryGuard","parent":null,"children":[],"decl_id":null,"docs":" Initialize memory and make new guard of initialized memory.\n Given `init` closure will be used to initialize elements of memory slice.\n","sig":null,"attributes":[{"value":"/ Initialize memory and make new guard of initialized memory.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/uninitialized_slice_memory_guard.rs","byte_start":5740,"byte_end":5803,"line_start":105,"line_end":105,"column_start":5,"column_end":68}},{"value":"/ Given `init` closure will be used to initialize elements of memory slice.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/uninitialized_slice_memory_guard.rs","byte_start":5808,"byte_end":5885,"line_start":106,"line_end":106,"column_start":5,"column_end":82}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/uninitialized_slice_memory_guard.rs","byte_start":5890,"byte_end":5899,"line_start":107,"line_end":107,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":32},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/uninitialized_slice_memory_guard.rs","byte_start":6433,"byte_end":6445,"line_start":122,"line_end":122,"column_start":12,"column_end":24},"name":"init_copy_of","qualname":"<UninitializedSliceMemoryGuard>::init_copy_of","value":"pub fn init_copy_of(Self, &[T]) -> SliceMemoryGuard where T: Clone","parent":null,"children":[],"decl_id":null,"docs":" Initialize memory and make new guard of initialized memory.\n Given `source` slice will be used to initialize elements of memory slice.\n Returned guard will contain sliced memory to `source`'s length.","sig":null,"attributes":[{"value":"/ Initialize memory and make new guard of initialized memory.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/uninitialized_slice_memory_guard.rs","byte_start":6072,"byte_end":6135,"line_start":114,"line_end":114,"column_start":5,"column_end":68}},{"value":"/ Given `source` slice will be used to initialize elements of memory slice.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/uninitialized_slice_memory_guard.rs","byte_start":6140,"byte_end":6217,"line_start":115,"line_end":115,"column_start":5,"column_end":82}},{"value":"/ Returned guard will contain sliced memory to `source`'s length.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/uninitialized_slice_memory_guard.rs","byte_start":6222,"byte_end":6289,"line_start":116,"line_end":116,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/uninitialized_slice_memory_guard.rs","byte_start":6294,"byte_end":6297,"line_start":117,"line_end":117,"column_start":5,"column_end":8}},{"value":"/ ### Panics","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/uninitialized_slice_memory_guard.rs","byte_start":6302,"byte_end":6316,"line_start":118,"line_end":118,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/uninitialized_slice_memory_guard.rs","byte_start":6321,"byte_end":6324,"line_start":119,"line_end":119,"column_start":5,"column_end":8}},{"value":"/ Panic can be reached when given `source`'s range is out of memory's range.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/uninitialized_slice_memory_guard.rs","byte_start":6329,"byte_end":6407,"line_start":120,"line_end":120,"column_start":5,"column_end":83}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/uninitialized_slice_memory_guard.rs","byte_start":6412,"byte_end":6421,"line_start":121,"line_end":121,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":34},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/uninitialized_slice_memory_guard.rs","byte_start":6978,"byte_end":6992,"line_start":136,"line_end":136,"column_start":12,"column_end":26},"name":"init_with_iter","qualname":"<UninitializedSliceMemoryGuard>::init_with_iter","value":"pub fn init_with_iter<impl ExactSizeIterator<Item = T>: ExactSizeIterator<Item\n                      = T>>(Self, impl ExactSizeIterator<Item = T>)\n-> SliceMemoryGuard","parent":null,"children":[],"decl_id":null,"docs":" Initialize memory and make new guard of initialized memory.\n Given `iter` exact-size iterator will be used to initialize elements of memory slice.\n Returned guard will contain sliced memory to `iter`'s length.","sig":null,"attributes":[{"value":"/ Initialize memory and make new guard of initialized memory.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/uninitialized_slice_memory_guard.rs","byte_start":6608,"byte_end":6671,"line_start":128,"line_end":128,"column_start":5,"column_end":68}},{"value":"/ Given `iter` exact-size iterator will be used to initialize elements of memory slice.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/uninitialized_slice_memory_guard.rs","byte_start":6676,"byte_end":6765,"line_start":129,"line_end":129,"column_start":5,"column_end":94}},{"value":"/ Returned guard will contain sliced memory to `iter`'s length.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/uninitialized_slice_memory_guard.rs","byte_start":6770,"byte_end":6835,"line_start":130,"line_end":130,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/uninitialized_slice_memory_guard.rs","byte_start":6840,"byte_end":6843,"line_start":131,"line_end":131,"column_start":5,"column_end":8}},{"value":"/ ### Panics","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/uninitialized_slice_memory_guard.rs","byte_start":6848,"byte_end":6862,"line_start":132,"line_end":132,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/uninitialized_slice_memory_guard.rs","byte_start":6867,"byte_end":6870,"line_start":133,"line_end":133,"column_start":5,"column_end":8}},{"value":"/ Panic can be reached when given `iter`'s length is out of memory's range.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/uninitialized_slice_memory_guard.rs","byte_start":6875,"byte_end":6952,"line_start":134,"line_end":134,"column_start":5,"column_end":82}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/uninitialized_slice_memory_guard.rs","byte_start":6957,"byte_end":6966,"line_start":135,"line_end":135,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":37},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/uninitialized_slice_memory_guard.rs","byte_start":7515,"byte_end":7533,"line_start":147,"line_end":147,"column_start":12,"column_end":30},"name":"init_with_dyn_iter","qualname":"<UninitializedSliceMemoryGuard>::init_with_dyn_iter","value":"pub fn init_with_dyn_iter<impl Iterator<Item = T>: Iterator<Item =\n                          T>>(Self, impl Iterator<Item = T>)\n-> Result<SliceMemoryGuard, Vec<T>>","parent":null,"children":[],"decl_id":null,"docs":" Initialize memory guard using given iterator.\n Automatically shrink's memory to given items' count.\n `Ok(guard)` will be returned in this case.","sig":null,"attributes":[{"value":"/ Initialize memory guard using given iterator.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/uninitialized_slice_memory_guard.rs","byte_start":7156,"byte_end":7205,"line_start":140,"line_end":140,"column_start":5,"column_end":54}},{"value":"/ Automatically shrink's memory to given items' count.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/uninitialized_slice_memory_guard.rs","byte_start":7210,"byte_end":7266,"line_start":141,"line_end":141,"column_start":5,"column_end":61}},{"value":"/ `Ok(guard)` will be returned in this case.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/uninitialized_slice_memory_guard.rs","byte_start":7271,"byte_end":7317,"line_start":142,"line_end":142,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/uninitialized_slice_memory_guard.rs","byte_start":7322,"byte_end":7325,"line_start":143,"line_end":143,"column_start":5,"column_end":8}},{"value":"/ If items' count is too large to place in memory, moves it into new `Vec` and continue collecting into it.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/uninitialized_slice_memory_guard.rs","byte_start":7330,"byte_end":7439,"line_start":144,"line_end":144,"column_start":5,"column_end":114}},{"value":"/ `Err(vec)` will be returned in this case.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/uninitialized_slice_memory_guard.rs","byte_start":7444,"byte_end":7489,"line_start":145,"line_end":145,"column_start":5,"column_end":50}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/uninitialized_slice_memory_guard.rs","byte_start":7494,"byte_end":7503,"line_start":146,"line_end":146,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":39},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/uninitialized_slice_memory_guard.rs","byte_start":7925,"byte_end":7931,"line_start":156,"line_end":156,"column_start":12,"column_end":18},"name":"borrow","qualname":"<UninitializedSliceMemoryGuard>::borrow","value":"pub fn borrow(&mut Self) -> UninitializedSliceMemoryGuard<, T>","parent":null,"children":[],"decl_id":null,"docs":" Create new uninit memory guard with less or equal lifetime to original guard's lifetime.\n This function should be used to reuse memory because init-API consumes the guard.\n","sig":null,"attributes":[{"value":"/ Create new uninit memory guard with less or equal lifetime to original guard's lifetime.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/uninitialized_slice_memory_guard.rs","byte_start":7717,"byte_end":7809,"line_start":153,"line_end":153,"column_start":5,"column_end":97}},{"value":"/ This function should be used to reuse memory because init-API consumes the guard.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/uninitialized_slice_memory_guard.rs","byte_start":7814,"byte_end":7899,"line_start":154,"line_end":154,"column_start":5,"column_end":90}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/uninitialized_slice_memory_guard.rs","byte_start":7904,"byte_end":7913,"line_start":155,"line_end":155,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":66},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/slice_memory_guard.rs","byte_start":9608,"byte_end":9624,"line_start":41,"line_end":41,"column_start":12,"column_end":28},"name":"SliceMemoryGuard","qualname":"::guards::slice_memory_guard::SliceMemoryGuard","value":"SliceMemoryGuard {  }","parent":null,"children":[{"krate":0,"index":69}],"decl_id":null,"docs":" Guard-struct used for correctly initialize uninitialized memory and `drop` it when guard goes out of scope.\n Usually, you *should not* use this struct to handle your memory.","sig":null,"attributes":[{"value":"/ Guard-struct used for correctly initialize uninitialized memory and `drop` it when guard goes out of scope.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/slice_memory_guard.rs","byte_start":8392,"byte_end":8503,"line_start":8,"line_end":8,"column_start":1,"column_end":112}},{"value":"/ Usually, you *should not* use this struct to handle your memory.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/slice_memory_guard.rs","byte_start":8504,"byte_end":8572,"line_start":9,"line_end":9,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/slice_memory_guard.rs","byte_start":8573,"byte_end":8576,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ ### Safety","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/slice_memory_guard.rs","byte_start":8577,"byte_end":8591,"line_start":11,"line_end":11,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/slice_memory_guard.rs","byte_start":8592,"byte_end":8595,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ If you use this struct manually, remember: `&mut [MaybeUninit<T>]`'s content will be overwriten while initialization.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/slice_memory_guard.rs","byte_start":8596,"byte_end":8717,"line_start":13,"line_end":13,"column_start":1,"column_end":122}},{"value":"/ So it is *not safe* to apply this struct to already initialized data and it can lead to *memory leaks*.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/slice_memory_guard.rs","byte_start":8718,"byte_end":8825,"line_start":14,"line_end":14,"column_start":1,"column_end":108}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/slice_memory_guard.rs","byte_start":8826,"byte_end":8829,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ ### Example","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/slice_memory_guard.rs","byte_start":8830,"byte_end":8845,"line_start":16,"line_end":16,"column_start":1,"column_end":16}},{"value":"/ ```rust","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/slice_memory_guard.rs","byte_start":8846,"byte_end":8857,"line_start":17,"line_end":17,"column_start":1,"column_end":12}},{"value":"/ use inplace_it::SliceMemoryGuard;","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/slice_memory_guard.rs","byte_start":8858,"byte_end":8895,"line_start":18,"line_end":18,"column_start":1,"column_end":38}},{"value":"/ use std::mem::MaybeUninit;","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/slice_memory_guard.rs","byte_start":8896,"byte_end":8926,"line_start":19,"line_end":19,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/slice_memory_guard.rs","byte_start":8927,"byte_end":8930,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ // Placing uninitialized memory","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/slice_memory_guard.rs","byte_start":8931,"byte_end":8966,"line_start":21,"line_end":21,"column_start":1,"column_end":36}},{"value":"/ let mut memory: [MaybeUninit<usize>; 100] = unsafe { MaybeUninit::uninit().assume_init() };","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/slice_memory_guard.rs","byte_start":8967,"byte_end":9062,"line_start":22,"line_end":22,"column_start":1,"column_end":96}},{"value":"/ // Initializing guard","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/slice_memory_guard.rs","byte_start":9063,"byte_end":9088,"line_start":23,"line_end":23,"column_start":1,"column_end":26}},{"value":"/ let mut memory_guard = unsafe {","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/slice_memory_guard.rs","byte_start":9089,"byte_end":9124,"line_start":24,"line_end":24,"column_start":1,"column_end":36}},{"value":"/     SliceMemoryGuard::new(","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/slice_memory_guard.rs","byte_start":9125,"byte_end":9155,"line_start":25,"line_end":25,"column_start":1,"column_end":31}},{"value":"/         // Borrowing memory","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/slice_memory_guard.rs","byte_start":9156,"byte_end":9187,"line_start":26,"line_end":26,"column_start":1,"column_end":32}},{"value":"/         &mut memory,","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/slice_memory_guard.rs","byte_start":9188,"byte_end":9212,"line_start":27,"line_end":27,"column_start":1,"column_end":25}},{"value":"/         // Forwarding initializer","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/slice_memory_guard.rs","byte_start":9213,"byte_end":9250,"line_start":28,"line_end":28,"column_start":1,"column_end":38}},{"value":"/         |index| index * 2","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/slice_memory_guard.rs","byte_start":9251,"byte_end":9280,"line_start":29,"line_end":29,"column_start":1,"column_end":30}},{"value":"/     )","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/slice_memory_guard.rs","byte_start":9281,"byte_end":9290,"line_start":30,"line_end":30,"column_start":1,"column_end":10}},{"value":"/ };","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/slice_memory_guard.rs","byte_start":9291,"byte_end":9297,"line_start":31,"line_end":31,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/slice_memory_guard.rs","byte_start":9298,"byte_end":9301,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ // For now, memory contains content like [0, 2, 4, 6, ..., 196, 198]","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/slice_memory_guard.rs","byte_start":9302,"byte_end":9374,"line_start":33,"line_end":33,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/slice_memory_guard.rs","byte_start":9375,"byte_end":9378,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ // Using memory","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/slice_memory_guard.rs","byte_start":9379,"byte_end":9398,"line_start":35,"line_end":35,"column_start":1,"column_end":20}},{"value":"/ // Sum of [0, 2, 4, 6, ..., 196, 198] = sum of [0, 1, 2, 3, ..., 98, 99] * 2 = ( 99 * (99+1) ) / 2 * 2","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/slice_memory_guard.rs","byte_start":9399,"byte_end":9505,"line_start":36,"line_end":36,"column_start":1,"column_end":107}},{"value":"/ let sum: usize = memory_guard.iter().sum();","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/slice_memory_guard.rs","byte_start":9506,"byte_end":9553,"line_start":37,"line_end":37,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(sum, 99 * 100);","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/slice_memory_guard.rs","byte_start":9554,"byte_end":9584,"line_start":38,"line_end":38,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/slice_memory_guard.rs","byte_start":9585,"byte_end":9588,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/slice_memory_guard.rs","byte_start":9589,"byte_end":9596,"line_start":40,"line_end":40,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":73},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/slice_memory_guard.rs","byte_start":9777,"byte_end":9780,"line_start":48,"line_end":48,"column_start":19,"column_end":22},"name":"new","qualname":"<SliceMemoryGuard>::new","value":"pub unsafe fn new<impl FnMut(usize) -> T: FnMut(usize) ->\n                  T>(&'a mut [MaybeUninit<T>], impl FnMut(usize) -> T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Initialize memory guard\n","sig":null,"attributes":[{"value":"/ Initialize memory guard","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/slice_memory_guard.rs","byte_start":9717,"byte_end":9744,"line_start":46,"line_end":46,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/slice_memory_guard.rs","byte_start":9749,"byte_end":9758,"line_start":47,"line_end":47,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":75},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/slice_memory_guard.rs","byte_start":10395,"byte_end":10408,"line_start":62,"line_end":62,"column_start":19,"column_end":32},"name":"new_from_iter","qualname":"<SliceMemoryGuard>::new_from_iter","value":"pub unsafe fn new_from_iter<impl Iterator<Item = T>: Iterator<Item =\n                            T>>(&'a mut [MaybeUninit<T>],\n                                impl Iterator<Item = T>)\n-> Result<Self, Vec<T>>","parent":null,"children":[],"decl_id":null,"docs":" Initialize memory guard using given iterator.\n Automatically shrink's memory to given items' count.\n `Ok(guard)` will be returned in this case.","sig":null,"attributes":[{"value":"/ Initialize memory guard using given iterator.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/slice_memory_guard.rs","byte_start":10029,"byte_end":10078,"line_start":55,"line_end":55,"column_start":5,"column_end":54}},{"value":"/ Automatically shrink's memory to given items' count.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/slice_memory_guard.rs","byte_start":10083,"byte_end":10139,"line_start":56,"line_end":56,"column_start":5,"column_end":61}},{"value":"/ `Ok(guard)` will be returned in this case.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/slice_memory_guard.rs","byte_start":10144,"byte_end":10190,"line_start":57,"line_end":57,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/slice_memory_guard.rs","byte_start":10195,"byte_end":10198,"line_start":58,"line_end":58,"column_start":5,"column_end":8}},{"value":"/ If items' count is too large to place in memory, moves it into new `Vec` and continue collecting into it.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/slice_memory_guard.rs","byte_start":10203,"byte_end":10312,"line_start":59,"line_end":59,"column_start":5,"column_end":114}},{"value":"/ `Err(vec)` will be returned in this case.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/slice_memory_guard.rs","byte_start":10317,"byte_end":10362,"line_start":60,"line_end":60,"column_start":5,"column_end":50}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/slice_memory_guard.rs","byte_start":10367,"byte_end":10376,"line_start":61,"line_end":61,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":99},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/fixed_array.rs","byte_start":14093,"byte_end":14103,"line_start":10,"line_end":10,"column_start":11,"column_end":21},"name":"FixedArray","qualname":"::fixed_array::FixedArray","value":"FixedArray","parent":null,"children":[{"krate":0,"index":100},{"krate":0,"index":101},{"krate":0,"index":102},{"krate":0,"index":103}],"decl_id":null,"docs":" This trait is a extended copy of unstable\n [core::array::FixedSizeArray](core::array::FixedSizeArray).","sig":null,"attributes":[{"value":"/ This trait is a extended copy of unstable","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/fixed_array.rs","byte_start":13729,"byte_end":13774,"line_start":4,"line_end":4,"column_start":1,"column_end":46}},{"value":"/ [core::array::FixedSizeArray](core::array::FixedSizeArray).","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/fixed_array.rs","byte_start":13775,"byte_end":13838,"line_start":5,"line_end":5,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/fixed_array.rs","byte_start":13839,"byte_end":13842,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ This is not a perfect solution. Inheritance from `AsRef<[T]> + AsMut<[T]>` would be preferable.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/fixed_array.rs","byte_start":13843,"byte_end":13942,"line_start":7,"line_end":7,"column_start":1,"column_end":100}},{"value":"/ But until we cannot implement `std` traits for `std` types so that inheritance limits us","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/fixed_array.rs","byte_start":13943,"byte_end":14035,"line_start":8,"line_end":8,"column_start":1,"column_end":93}},{"value":"/ and we cannot use `[T; n]` where `n > 32`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/fixed_array.rs","byte_start":14036,"byte_end":14082,"line_start":9,"line_end":9,"column_start":1,"column_end":47}}]},{"kind":"Type","id":{"krate":0,"index":100},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/fixed_array.rs","byte_start":14115,"byte_end":14119,"line_start":11,"line_end":11,"column_start":10,"column_end":14},"name":"Item","qualname":"::fixed_array::FixedArray::Item","value":"type Item;","parent":{"krate":0,"index":99},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":101},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/fixed_array.rs","byte_start":14131,"byte_end":14134,"line_start":12,"line_end":12,"column_start":11,"column_end":14},"name":"LEN","qualname":"::fixed_array::FixedArray::LEN","value":"usize","parent":{"krate":0,"index":99},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":102},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/fixed_array.rs","byte_start":14150,"byte_end":14158,"line_start":13,"line_end":13,"column_start":8,"column_end":16},"name":"as_slice","qualname":"::fixed_array::FixedArray::as_slice","value":"pub fn as_slice(&Self) -> &[Self::Item]","parent":{"krate":0,"index":99},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":103},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/fixed_array.rs","byte_start":14191,"byte_end":14203,"line_start":14,"line_end":14,"column_start":8,"column_end":20},"name":"as_slice_mut","qualname":"::fixed_array::FixedArray::as_slice_mut","value":"pub fn as_slice_mut(&mut Self) -> &mut [Self::Item]","parent":{"krate":0,"index":99},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":106},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/fixed_array.rs","byte_start":17972,"byte_end":17989,"line_start":104,"line_end":104,"column_start":8,"column_end":25},"name":"try_inplace_array","qualname":"::fixed_array::try_inplace_array","value":"pub fn try_inplace_array<T, R, Consumer>(usize, Consumer)\n-> Result<R, Consumer> where\nConsumer: FnOnce(UninitializedSliceMemoryGuard<, T>) -> R","parent":null,"children":[],"decl_id":null,"docs":" `try_inplace_array` trying to place an array of `T` on the stack and pass the guard of memory into the\n `consumer` closure. `consumer`'s result will be returned as `Ok(result)`.","sig":null,"attributes":[{"value":"/ `try_inplace_array` trying to place an array of `T` on the stack and pass the guard of memory into the","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/fixed_array.rs","byte_start":16351,"byte_end":16457,"line_start":67,"line_end":67,"column_start":1,"column_end":107}},{"value":"/ `consumer` closure. `consumer`'s result will be returned as `Ok(result)`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/fixed_array.rs","byte_start":16458,"byte_end":16535,"line_start":68,"line_end":68,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/fixed_array.rs","byte_start":16536,"byte_end":16539,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ If the result of array of `T` is more than 4096 then `Err(consumer)` will be returned.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/fixed_array.rs","byte_start":16540,"byte_end":16630,"line_start":70,"line_end":70,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/fixed_array.rs","byte_start":16631,"byte_end":16634,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/ Sometimes size of allocated array might be more than requested. For sizes larger than 32,","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/fixed_array.rs","byte_start":16635,"byte_end":16728,"line_start":72,"line_end":72,"column_start":1,"column_end":94}},{"value":"/ the following formula is used: `roundUp(size/32)*32`. This is a simplification that used","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/fixed_array.rs","byte_start":16729,"byte_end":16821,"line_start":73,"line_end":73,"column_start":1,"column_end":93}},{"value":"/ for keeping code short, simple and able to optimize.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/fixed_array.rs","byte_start":16822,"byte_end":16878,"line_start":74,"line_end":74,"column_start":1,"column_end":57}},{"value":"/ For example, for requested 50 item `[T; 64]` will be allocated.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/fixed_array.rs","byte_start":16879,"byte_end":16946,"line_start":75,"line_end":75,"column_start":1,"column_end":68}},{"value":"/ For 120 items - `[T; 128]` and so on.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/fixed_array.rs","byte_start":16947,"byte_end":16988,"line_start":76,"line_end":76,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/fixed_array.rs","byte_start":16989,"byte_end":16992,"line_start":77,"line_end":77,"column_start":1,"column_end":4}},{"value":"/ Note that rounding size up is working for fixed-sized arrays only. If function decides to","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/fixed_array.rs","byte_start":16993,"byte_end":17086,"line_start":78,"line_end":78,"column_start":1,"column_end":94}},{"value":"/ allocate a vector then its size will be equal to requested.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/fixed_array.rs","byte_start":17087,"byte_end":17150,"line_start":79,"line_end":79,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/fixed_array.rs","byte_start":17151,"byte_end":17154,"line_start":80,"line_end":80,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/fixed_array.rs","byte_start":17155,"byte_end":17169,"line_start":81,"line_end":81,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/fixed_array.rs","byte_start":17170,"byte_end":17173,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/fixed_array.rs","byte_start":17174,"byte_end":17185,"line_start":83,"line_end":83,"column_start":1,"column_end":12}},{"value":"/ use inplace_it::{","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/fixed_array.rs","byte_start":17186,"byte_end":17207,"line_start":84,"line_end":84,"column_start":1,"column_end":22}},{"value":"/     try_inplace_array,","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/fixed_array.rs","byte_start":17208,"byte_end":17234,"line_start":85,"line_end":85,"column_start":1,"column_end":27}},{"value":"/     UninitializedSliceMemoryGuard,","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/fixed_array.rs","byte_start":17235,"byte_end":17273,"line_start":86,"line_end":86,"column_start":1,"column_end":39}},{"value":"/ };","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/fixed_array.rs","byte_start":17274,"byte_end":17280,"line_start":87,"line_end":87,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/fixed_array.rs","byte_start":17281,"byte_end":17284,"line_start":88,"line_end":88,"column_start":1,"column_end":4}},{"value":"/ let sum = try_inplace_array(100, |uninit_guard: UninitializedSliceMemoryGuard<u16>| {","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/fixed_array.rs","byte_start":17285,"byte_end":17374,"line_start":89,"line_end":89,"column_start":1,"column_end":90}},{"value":"/     assert_eq!(uninit_guard.len(), 128);","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/fixed_array.rs","byte_start":17375,"byte_end":17419,"line_start":90,"line_end":90,"column_start":1,"column_end":45}},{"value":"/     // For now, our memory is placed/allocated but uninitialized.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/fixed_array.rs","byte_start":17420,"byte_end":17489,"line_start":91,"line_end":91,"column_start":1,"column_end":70}},{"value":"/     // Let's initialize it!","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/fixed_array.rs","byte_start":17490,"byte_end":17521,"line_start":92,"line_end":92,"column_start":1,"column_end":32}},{"value":"/     let guard = uninit_guard.init(|index| index as u16 * 2);","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/fixed_array.rs","byte_start":17522,"byte_end":17586,"line_start":93,"line_end":93,"column_start":1,"column_end":65}},{"value":"/     // For now, memory contains content like [0, 2, 4, 6, ..., 252, 254]","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/fixed_array.rs","byte_start":17587,"byte_end":17663,"line_start":94,"line_end":94,"column_start":1,"column_end":77}},{"value":"/     let sum: u16 = guard.iter().sum();","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/fixed_array.rs","byte_start":17664,"byte_end":17706,"line_start":95,"line_end":95,"column_start":1,"column_end":43}},{"value":"/     sum","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/fixed_array.rs","byte_start":17707,"byte_end":17718,"line_start":96,"line_end":96,"column_start":1,"column_end":12}},{"value":"/ });","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/fixed_array.rs","byte_start":17719,"byte_end":17726,"line_start":97,"line_end":97,"column_start":1,"column_end":8}},{"value":"/ // Sum of [0, 2, 4, 6, ..., 252, 254] = sum of [0, 1, 2, 3, ..., 126, 127] * 2 = ( 127 * (127+1) ) / 2 * 2","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/fixed_array.rs","byte_start":17727,"byte_end":17837,"line_start":98,"line_end":98,"column_start":1,"column_end":111}},{"value":"/ match sum {","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/fixed_array.rs","byte_start":17838,"byte_end":17853,"line_start":99,"line_end":99,"column_start":1,"column_end":16}},{"value":"/     Ok(sum) => assert_eq!(sum, 127 * 128),","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/fixed_array.rs","byte_start":17854,"byte_end":17900,"line_start":100,"line_end":100,"column_start":1,"column_end":47}},{"value":"/     Err(_) => unreachable!(\"Placing fails\"),","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/fixed_array.rs","byte_start":17901,"byte_end":17949,"line_start":101,"line_end":101,"column_start":1,"column_end":49}},{"value":"/ };","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/fixed_array.rs","byte_start":17950,"byte_end":17956,"line_start":102,"line_end":102,"column_start":1,"column_end":7}},{"value":"/ ```","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/fixed_array.rs","byte_start":17957,"byte_end":17964,"line_start":103,"line_end":103,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":124},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/alloc_array.rs","byte_start":26329,"byte_end":26340,"line_start":11,"line_end":11,"column_start":8,"column_end":19},"name":"alloc_array","qualname":"::alloc_array::alloc_array","value":"pub fn alloc_array<T, R, Consumer: FnOnce(UninitializedSliceMemoryGuard<, T>)\n                   -> R>(usize, Consumer) -> R","parent":null,"children":[],"decl_id":null,"docs":" `alloc_array` is used when `inplace_or_alloc_array` realize that the size of requested array of `T`\n is too large and should be replaced in the heap.","sig":null,"attributes":[{"value":"/ `alloc_array` is used when `inplace_or_alloc_array` realize that the size of requested array of `T`","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/alloc_array.rs","byte_start":25944,"byte_end":26047,"line_start":5,"line_end":5,"column_start":1,"column_end":104}},{"value":"/ is too large and should be replaced in the heap.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/alloc_array.rs","byte_start":26048,"byte_end":26100,"line_start":6,"line_end":6,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/alloc_array.rs","byte_start":26101,"byte_end":26104,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ It allocates a vector with `size` elements and fills it up with help of `init` closure","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/alloc_array.rs","byte_start":26105,"byte_end":26195,"line_start":8,"line_end":8,"column_start":1,"column_end":91}},{"value":"/ and then pass a reference to a slice of the vector into the `consumer` closure.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/alloc_array.rs","byte_start":26196,"byte_end":26279,"line_start":9,"line_end":9,"column_start":1,"column_end":84}},{"value":"/ `consumer`'s result will be returned.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/alloc_array.rs","byte_start":26280,"byte_end":26321,"line_start":10,"line_end":10,"column_start":1,"column_end":42}}]},{"kind":"Function","id":{"krate":0,"index":128},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/alloc_array.rs","byte_start":28342,"byte_end":28364,"line_start":56,"line_end":56,"column_start":8,"column_end":30},"name":"inplace_or_alloc_array","qualname":"::alloc_array::inplace_or_alloc_array","value":"pub fn inplace_or_alloc_array<T, R, Consumer>(usize, Consumer) -> R where\nConsumer: FnOnce(UninitializedSliceMemoryGuard<, T>) -> R","parent":null,"children":[],"decl_id":null,"docs":" `inplace_or_alloc_array` is a central function of this crate.\n  It's trying to place an array of `T` on the stack and pass the guard of memory into the\n `consumer` closure. `consumer`'s result will be returned.","sig":null,"attributes":[{"value":"/ `inplace_or_alloc_array` is a central function of this crate.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/alloc_array.rs","byte_start":26716,"byte_end":26781,"line_start":21,"line_end":21,"column_start":1,"column_end":66}},{"value":"/  It's trying to place an array of `T` on the stack and pass the guard of memory into the","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/alloc_array.rs","byte_start":26782,"byte_end":26874,"line_start":22,"line_end":22,"column_start":1,"column_end":93}},{"value":"/ `consumer` closure. `consumer`'s result will be returned.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/alloc_array.rs","byte_start":26875,"byte_end":26936,"line_start":23,"line_end":23,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/alloc_array.rs","byte_start":26937,"byte_end":26940,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ If the result of array of `T` is more than 4096 then the vector will be allocated","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/alloc_array.rs","byte_start":26941,"byte_end":27026,"line_start":25,"line_end":25,"column_start":1,"column_end":86}},{"value":"/ in the heap and will be used instead of stack-based fixed-size array.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/alloc_array.rs","byte_start":27027,"byte_end":27100,"line_start":26,"line_end":26,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/alloc_array.rs","byte_start":27101,"byte_end":27104,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ Sometimes size of allocated array might be more than requested. For sizes larger than 32,","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/alloc_array.rs","byte_start":27105,"byte_end":27198,"line_start":28,"line_end":28,"column_start":1,"column_end":94}},{"value":"/ the following formula is used: `roundUp(size/32)*32`. This is a simplification that used","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/alloc_array.rs","byte_start":27199,"byte_end":27291,"line_start":29,"line_end":29,"column_start":1,"column_end":93}},{"value":"/ for keeping code short, simple and able to optimize.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/alloc_array.rs","byte_start":27292,"byte_end":27348,"line_start":30,"line_end":30,"column_start":1,"column_end":57}},{"value":"/ For example, for requested 50 item `[T; 64]` will be allocated.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/alloc_array.rs","byte_start":27349,"byte_end":27416,"line_start":31,"line_end":31,"column_start":1,"column_end":68}},{"value":"/ For 120 items - `[T; 128]` and so on.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/alloc_array.rs","byte_start":27417,"byte_end":27458,"line_start":32,"line_end":32,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/alloc_array.rs","byte_start":27459,"byte_end":27462,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ Note that rounding size up is working for fixed-sized arrays only. If function decides to","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/alloc_array.rs","byte_start":27463,"byte_end":27556,"line_start":34,"line_end":34,"column_start":1,"column_end":94}},{"value":"/ allocate a vector then its size will be equal to requested.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/alloc_array.rs","byte_start":27557,"byte_end":27620,"line_start":35,"line_end":35,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/alloc_array.rs","byte_start":27621,"byte_end":27624,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/alloc_array.rs","byte_start":27625,"byte_end":27639,"line_start":37,"line_end":37,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/alloc_array.rs","byte_start":27640,"byte_end":27643,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/alloc_array.rs","byte_start":27644,"byte_end":27655,"line_start":39,"line_end":39,"column_start":1,"column_end":12}},{"value":"/ use inplace_it::{","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/alloc_array.rs","byte_start":27656,"byte_end":27677,"line_start":40,"line_end":40,"column_start":1,"column_end":22}},{"value":"/     inplace_or_alloc_array,","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/alloc_array.rs","byte_start":27678,"byte_end":27709,"line_start":41,"line_end":41,"column_start":1,"column_end":32}},{"value":"/     UninitializedSliceMemoryGuard,","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/alloc_array.rs","byte_start":27710,"byte_end":27748,"line_start":42,"line_end":42,"column_start":1,"column_end":39}},{"value":"/ };","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/alloc_array.rs","byte_start":27749,"byte_end":27755,"line_start":43,"line_end":43,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/alloc_array.rs","byte_start":27756,"byte_end":27759,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ let sum: u16 = inplace_or_alloc_array(100, |uninit_guard: UninitializedSliceMemoryGuard<u16>| {","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/alloc_array.rs","byte_start":27760,"byte_end":27859,"line_start":45,"line_end":45,"column_start":1,"column_end":100}},{"value":"/     assert_eq!(uninit_guard.len(), 128);","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/alloc_array.rs","byte_start":27860,"byte_end":27904,"line_start":46,"line_end":46,"column_start":1,"column_end":45}},{"value":"/     // For now, our memory is placed/allocated but uninitialized.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/alloc_array.rs","byte_start":27905,"byte_end":27974,"line_start":47,"line_end":47,"column_start":1,"column_end":70}},{"value":"/     // Let's initialize it!","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/alloc_array.rs","byte_start":27975,"byte_end":28006,"line_start":48,"line_end":48,"column_start":1,"column_end":32}},{"value":"/     let guard = uninit_guard.init(|index| index as u16 * 2);","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/alloc_array.rs","byte_start":28007,"byte_end":28071,"line_start":49,"line_end":49,"column_start":1,"column_end":65}},{"value":"/     // For now, memory contains content like [0, 2, 4, 6, ..., 252, 254]","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/alloc_array.rs","byte_start":28072,"byte_end":28148,"line_start":50,"line_end":50,"column_start":1,"column_end":77}},{"value":"/     guard.iter().sum()","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/alloc_array.rs","byte_start":28149,"byte_end":28175,"line_start":51,"line_end":51,"column_start":1,"column_end":27}},{"value":"/ });","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/alloc_array.rs","byte_start":28176,"byte_end":28183,"line_start":52,"line_end":52,"column_start":1,"column_end":8}},{"value":"/ // Sum of [0, 2, 4, 6, ..., 252, 254] = sum of [0, 1, 2, 3, ..., 126, 127] * 2 = ( 127 * (127+1) ) / 2 * 2","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/alloc_array.rs","byte_start":28184,"byte_end":28294,"line_start":53,"line_end":53,"column_start":1,"column_end":111}},{"value":"/ assert_eq!(sum, 127 * 128);","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/alloc_array.rs","byte_start":28295,"byte_end":28326,"line_start":54,"line_end":54,"column_start":1,"column_end":32}},{"value":"/ ```","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/alloc_array.rs","byte_start":28327,"byte_end":28334,"line_start":55,"line_end":55,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":132},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/alloc_array.rs","byte_start":29581,"byte_end":29607,"line_start":90,"line_end":90,"column_start":8,"column_end":34},"name":"inplace_or_alloc_from_iter","qualname":"::alloc_array::inplace_or_alloc_from_iter","value":"pub fn inplace_or_alloc_from_iter<Iter, R, Consumer>(Iter, Consumer) -> R\nwhere Iter: Iterator, Consumer: FnOnce(&mut [Iter::Item]) -> R","parent":null,"children":[],"decl_id":null,"docs":" `inplace_or_alloc_from_iter` is helper function used to easy trying to place data from `Iterator`.","sig":null,"attributes":[{"value":"/ `inplace_or_alloc_from_iter` is helper function used to easy trying to place data from `Iterator`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/alloc_array.rs","byte_start":28626,"byte_end":28728,"line_start":65,"line_end":65,"column_start":1,"column_end":103}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/alloc_array.rs","byte_start":28729,"byte_end":28732,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ It tries to get upper bound of `size_hint` of iterator and forward it to `inplace_or_alloc_array` function.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/alloc_array.rs","byte_start":28733,"byte_end":28844,"line_start":67,"line_end":67,"column_start":1,"column_end":112}},{"value":"/ It there is not upper bound hint from iterator, then it just `collect` your data into `Vec`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/alloc_array.rs","byte_start":28845,"byte_end":28941,"line_start":68,"line_end":68,"column_start":1,"column_end":97}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/alloc_array.rs","byte_start":28942,"byte_end":28945,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ If iterator contains more data that `size_hint` said","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/alloc_array.rs","byte_start":28946,"byte_end":29002,"line_start":70,"line_end":70,"column_start":1,"column_end":57}},{"value":"/ (and more than `try_inplace_array` function placed on stack),","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/alloc_array.rs","byte_start":29003,"byte_end":29068,"line_start":71,"line_end":71,"column_start":1,"column_end":66}},{"value":"/ then items will be moved and collected (by iterating) into `Vec` also.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/alloc_array.rs","byte_start":29069,"byte_end":29143,"line_start":72,"line_end":72,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/alloc_array.rs","byte_start":29144,"byte_end":29147,"line_start":73,"line_end":73,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/alloc_array.rs","byte_start":29148,"byte_end":29162,"line_start":74,"line_end":74,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/alloc_array.rs","byte_start":29163,"byte_end":29166,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/alloc_array.rs","byte_start":29167,"byte_end":29178,"line_start":76,"line_end":76,"column_start":1,"column_end":12}},{"value":"/ // Some random number to demonstrate","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/alloc_array.rs","byte_start":29179,"byte_end":29219,"line_start":77,"line_end":77,"column_start":1,"column_end":41}},{"value":"/ let count = 42;","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/alloc_array.rs","byte_start":29220,"byte_end":29239,"line_start":78,"line_end":78,"column_start":1,"column_end":20}},{"value":"/ let iterator = 0..count;","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/alloc_array.rs","byte_start":29240,"byte_end":29268,"line_start":79,"line_end":79,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/alloc_array.rs","byte_start":29269,"byte_end":29272,"line_start":80,"line_end":80,"column_start":1,"column_end":4}},{"value":"/ let result = ::inplace_it::inplace_or_alloc_from_iter(iterator.clone(), |mem| {","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/alloc_array.rs","byte_start":29273,"byte_end":29356,"line_start":81,"line_end":81,"column_start":1,"column_end":84}},{"value":"/      assert_eq!(mem.len(), count);","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/alloc_array.rs","byte_start":29357,"byte_end":29395,"line_start":82,"line_end":82,"column_start":1,"column_end":39}},{"value":"/      assert!(mem.iter().cloned().eq(iterator));","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/alloc_array.rs","byte_start":29396,"byte_end":29447,"line_start":83,"line_end":83,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/alloc_array.rs","byte_start":29448,"byte_end":29451,"line_start":84,"line_end":84,"column_start":1,"column_end":4}},{"value":"/      // Some result","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/alloc_array.rs","byte_start":29452,"byte_end":29475,"line_start":85,"line_end":85,"column_start":1,"column_end":24}},{"value":"/      format!(\"{}\", mem.len())","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/alloc_array.rs","byte_start":29476,"byte_end":29509,"line_start":86,"line_end":86,"column_start":1,"column_end":34}},{"value":"/  });","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/alloc_array.rs","byte_start":29510,"byte_end":29518,"line_start":87,"line_end":87,"column_start":1,"column_end":9}},{"value":"/  assert_eq!(result, format!(\"{}\", count));","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/alloc_array.rs","byte_start":29519,"byte_end":29565,"line_start":88,"line_end":88,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/alloc_array.rs","byte_start":29566,"byte_end":29573,"line_start":89,"line_end":89,"column_start":1,"column_end":8}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/uninitialized_slice_memory_guard.rs","byte_start":4681,"byte_end":4710,"line_start":68,"line_end":68,"column_start":13,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":26},{"krate":0,"index":27},{"krate":0,"index":28},{"krate":0,"index":30},{"krate":0,"index":32},{"krate":0,"index":34},{"krate":0,"index":37},{"krate":0,"index":39}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/slice_memory_guard.rs","byte_start":9687,"byte_end":9703,"line_start":45,"line_end":45,"column_start":13,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":73},{"krate":0,"index":75}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/slice_memory_guard.rs","byte_start":11922,"byte_end":11938,"line_start":102,"line_end":102,"column_start":23,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":80},{"krate":0,"index":81}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/slice_memory_guard.rs","byte_start":12129,"byte_end":12145,"line_start":111,"line_end":111,"column_start":26,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":85}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/slice_memory_guard.rs","byte_start":12332,"byte_end":12348,"line_start":118,"line_end":118,"column_start":22,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":89}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/uninitialized_slice_memory_guard.rs","byte_start":4681,"byte_end":4710,"line_start":68,"line_end":68,"column_start":13,"column_end":42},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":19},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/slice_memory_guard.rs","byte_start":9687,"byte_end":9703,"line_start":45,"line_end":45,"column_start":13,"column_end":29},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":66},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/slice_memory_guard.rs","byte_start":11922,"byte_end":11938,"line_start":102,"line_end":102,"column_start":23,"column_end":39},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":66},"to":{"krate":2,"index":3047}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/slice_memory_guard.rs","byte_start":12129,"byte_end":12145,"line_start":111,"line_end":111,"column_start":26,"column_end":42},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":66},"to":{"krate":2,"index":3060}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/inplace_it-0.3.3/src/guards/slice_memory_guard.rs","byte_start":12332,"byte_end":12348,"line_start":118,"line_end":118,"column_start":22,"column_end":38},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":66},"to":{"krate":2,"index":3071}}]}