{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1","program":"/home/mramirez/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","parking_lot","--edition=2018","/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"default\"","-C","metadata=7a0eedc39faf7a68","-C","extra-filename=-7a0eedc39faf7a68","--out-dir","/home/mramirez/code/projects/games/bug_game/target/rls/debug/deps","-L","dependency=/home/mramirez/code/projects/games/bug_game/target/rls/debug/deps","--extern","instant=/home/mramirez/code/projects/games/bug_game/target/rls/debug/deps/libinstant-0b1c453e5687e648.rmeta","--extern","lock_api=/home/mramirez/code/projects/games/bug_game/target/rls/debug/deps/liblock_api-9ddae300d8fc24ed.rmeta","--extern","parking_lot_core=/home/mramirez/code/projects/games/bug_game/target/rls/debug/deps/libparking_lot_core-552c01f13a1a4a95.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/mramirez/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu"],"output":"/home/mramirez/code/projects/games/bug_game/target/rls/debug/deps/libparking_lot-7a0eedc39faf7a68.rmeta"},"prelude":{"crate_id":{"name":"parking_lot","disambiguator":[3894759868336387025,8072076019355388178]},"crate_root":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src","external_crates":[{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[397594041871667817,11704163070354659695]}},{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","num":2,"id":{"name":"core","disambiguator":[17044353007700780372,2918200604221815240]}},{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[15333840167806743833,9889193056877993824]}},{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[4550415707075219492,6623162258675921486]}},{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[8289379911494056514,13856099756999900329]}},{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[10514502805115346386,576110030083780649]}},{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[9878185313679130060,1975285035821961205]}},{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[4010603182529655334,7152219772350788052]}},{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[1807637986128902209,18379128151258407121]}},{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[11140927657351163542,6267109750485550558]}},{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[13809795498598848728,13320395723520943315]}},{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/lib.rs","num":12,"id":{"name":"std_detect","disambiguator":[13869841232067652907,9875669357213642224]}},{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/lib.rs","num":13,"id":{"name":"addr2line","disambiguator":[15533050656730733495,14669839968799848603]}},{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/lib.rs","num":14,"id":{"name":"gimli","disambiguator":[14371692877540073659,8181723439448527964]}},{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/lib.rs","num":15,"id":{"name":"object","disambiguator":[639541300699627395,1995254029228069844]}},{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/lib.rs","num":16,"id":{"name":"miniz_oxide","disambiguator":[12482123824895737424,11765111494567609733]}},{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/lib.rs","num":17,"id":{"name":"adler","disambiguator":[1169880241773671279,8605314106566979368]}},{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/lib.rs","num":18,"id":{"name":"panic_unwind","disambiguator":[5016943468141875609,13494347935157563341]}},{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","num":19,"id":{"name":"instant","disambiguator":[2494301214941809838,3417201065660113335]}},{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","num":20,"id":{"name":"cfg_if","disambiguator":[3051334588151808042,8832791441195491324]}},{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","num":21,"id":{"name":"time","disambiguator":[16519224481542627666,17944326992154206493]}},{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","num":22,"id":{"name":"const_fn","disambiguator":[2777252313191701291,1017343796442275934]}},{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","num":23,"id":{"name":"standback","disambiguator":[1588321579415658865,5592685596715400632]}},{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","num":24,"id":{"name":"time_macros","disambiguator":[9388189040968802315,10595252542461141236]}},{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","num":25,"id":{"name":"proc_macro_hack","disambiguator":[16895374442432975484,12510436695677007252]}},{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","num":26,"id":{"name":"time_macros_impl","disambiguator":[5613590041393428902,4471233575065558911]}},{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","num":27,"id":{"name":"lock_api","disambiguator":[6843516370768696030,17695751663174820022]}},{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","num":28,"id":{"name":"scopeguard","disambiguator":[12809663318761188287,17456442378003341401]}},{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","num":29,"id":{"name":"parking_lot_core","disambiguator":[2008067363701943934,5547810312261868722]}},{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","num":30,"id":{"name":"smallvec","disambiguator":[4354219136568904731,3102245834082659568]}},{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","num":31,"id":{"name":"serde","disambiguator":[374628057754048923,1558107205218065689]}},{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","num":32,"id":{"name":"serde_derive","disambiguator":[14794970942164483416,15421136565882532469]}},{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","num":33,"id":{"name":"libc","disambiguator":[18406178008256737583,6506690069580327237]}}],"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/lib.rs","byte_start":333,"byte_end":2029,"line_start":8,"line_end":57,"column_start":1,"column_end":20}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":65},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/lib.rs","byte_start":1356,"byte_end":1363,"line_start":42,"line_end":42,"column_start":25,"column_end":32},"alias_span":null,"name":"Condvar","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":643},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/lib.rs","byte_start":1365,"byte_end":1382,"line_start":42,"line_end":42,"column_start":34,"column_end":51},"alias_span":null,"name":"WaitTimeoutResult","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":113},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/lib.rs","byte_start":1412,"byte_end":1428,"line_start":43,"line_end":43,"column_start":28,"column_end":44},"alias_span":null,"name":"const_fair_mutex","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":111},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/lib.rs","byte_start":1430,"byte_end":1439,"line_start":43,"line_end":43,"column_start":46,"column_end":55},"alias_span":null,"name":"FairMutex","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":115},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/lib.rs","byte_start":1441,"byte_end":1455,"line_start":43,"line_end":43,"column_start":57,"column_end":71},"alias_span":null,"name":"FairMutexGuard","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":118},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/lib.rs","byte_start":1457,"byte_end":1477,"line_start":43,"line_end":43,"column_start":73,"column_end":93},"alias_span":null,"name":"MappedFairMutexGuard","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":130},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/lib.rs","byte_start":1502,"byte_end":1513,"line_start":44,"line_end":44,"column_start":23,"column_end":34},"alias_span":null,"name":"const_mutex","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":135},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/lib.rs","byte_start":1515,"byte_end":1531,"line_start":44,"line_end":44,"column_start":36,"column_end":52},"alias_span":null,"name":"MappedMutexGuard","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":128},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/lib.rs","byte_start":1533,"byte_end":1538,"line_start":44,"line_end":44,"column_start":54,"column_end":59},"alias_span":null,"name":"Mutex","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":132},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/lib.rs","byte_start":1540,"byte_end":1550,"line_start":44,"line_end":44,"column_start":61,"column_end":71},"alias_span":null,"name":"MutexGuard","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":179},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/lib.rs","byte_start":1574,"byte_end":1578,"line_start":45,"line_end":45,"column_start":22,"column_end":26},"alias_span":null,"name":"Once","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":658},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/lib.rs","byte_start":1580,"byte_end":1589,"line_start":45,"line_end":45,"column_start":28,"column_end":37},"alias_span":null,"name":"OnceState","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":213},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/lib.rs","byte_start":1622,"byte_end":1634,"line_start":46,"line_end":46,"column_start":31,"column_end":43},"alias_span":null,"name":"RawFairMutex","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":279},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/lib.rs","byte_start":1661,"byte_end":1669,"line_start":47,"line_end":47,"column_start":26,"column_end":34},"alias_span":null,"name":"RawMutex","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":382},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/lib.rs","byte_start":1697,"byte_end":1706,"line_start":48,"line_end":48,"column_start":27,"column_end":36},"alias_span":null,"name":"RawRwLock","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":495},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/lib.rs","byte_start":1737,"byte_end":1758,"line_start":50,"line_end":50,"column_start":5,"column_end":26},"alias_span":null,"name":"const_reentrant_mutex","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":500},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/lib.rs","byte_start":1760,"byte_end":1785,"line_start":50,"line_end":50,"column_start":28,"column_end":53},"alias_span":null,"name":"MappedReentrantMutexGuard","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":487},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/lib.rs","byte_start":1787,"byte_end":1798,"line_start":50,"line_end":50,"column_start":55,"column_end":66},"alias_span":null,"name":"RawThreadId","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":488},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/lib.rs","byte_start":1787,"byte_end":1798,"line_start":50,"line_end":50,"column_start":55,"column_end":66},"alias_span":null,"name":"RawThreadId","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":493},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/lib.rs","byte_start":1800,"byte_end":1814,"line_start":50,"line_end":50,"column_start":68,"column_end":82},"alias_span":null,"name":"ReentrantMutex","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":497},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/lib.rs","byte_start":1820,"byte_end":1839,"line_start":51,"line_end":51,"column_start":5,"column_end":24},"alias_span":null,"name":"ReentrantMutexGuard","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":512},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/lib.rs","byte_start":1872,"byte_end":1884,"line_start":54,"line_end":54,"column_start":5,"column_end":17},"alias_span":null,"name":"const_rwlock","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":520},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/lib.rs","byte_start":1886,"byte_end":1907,"line_start":54,"line_end":54,"column_start":19,"column_end":40},"alias_span":null,"name":"MappedRwLockReadGuard","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":523},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/lib.rs","byte_start":1909,"byte_end":1931,"line_start":54,"line_end":54,"column_start":42,"column_end":64},"alias_span":null,"name":"MappedRwLockWriteGuard","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":510},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/lib.rs","byte_start":1933,"byte_end":1939,"line_start":54,"line_end":54,"column_start":66,"column_end":72},"alias_span":null,"name":"RwLock","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":514},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/lib.rs","byte_start":1941,"byte_end":1956,"line_start":54,"line_end":54,"column_start":74,"column_end":89},"alias_span":null,"name":"RwLockReadGuard","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":526},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/lib.rs","byte_start":1962,"byte_end":1987,"line_start":55,"line_end":55,"column_start":5,"column_end":30},"alias_span":null,"name":"RwLockUpgradableReadGuard","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":517},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/lib.rs","byte_start":1989,"byte_end":2005,"line_start":55,"line_end":55,"column_start":32,"column_end":48},"alias_span":null,"name":"RwLockWriteGuard","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":0},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/lib.rs","byte_start":2020,"byte_end":2028,"line_start":57,"line_end":57,"column_start":11,"column_end":19},"alias_span":null,"name":"lock_api","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/lib.rs","byte_start":333,"byte_end":2029,"line_start":8,"line_end":57,"column_start":1,"column_end":20},"name":"","qualname":"::","value":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":91},{"krate":0,"index":104},{"krate":0,"index":121},{"krate":0,"index":138},{"krate":0,"index":206},{"krate":0,"index":231},{"krate":0,"index":306},{"krate":0,"index":473},{"krate":0,"index":503},{"krate":0,"index":529},{"krate":0,"index":544},{"krate":0,"index":552},{"krate":0,"index":553},{"krate":0,"index":554},{"krate":0,"index":557},{"krate":0,"index":560},{"krate":0,"index":561},{"krate":0,"index":564},{"krate":0,"index":567},{"krate":0,"index":570},{"krate":0,"index":573},{"krate":0,"index":574},{"krate":0,"index":577},{"krate":0,"index":580},{"krate":0,"index":583},{"krate":0,"index":586},{"krate":0,"index":587},{"krate":0,"index":590},{"krate":0,"index":593},{"krate":0,"index":596},{"krate":0,"index":599},{"krate":0,"index":602},{"krate":0,"index":603},{"krate":0,"index":606},{"krate":0,"index":609},{"krate":0,"index":610},{"krate":0,"index":612},{"krate":0,"index":615},{"krate":0,"index":618},{"krate":0,"index":619},{"krate":0,"index":622},{"krate":0,"index":625},{"krate":0,"index":628},{"krate":0,"index":631},{"krate":0,"index":634},{"krate":0,"index":637},{"krate":0,"index":640}],"decl_id":null,"docs":" This library provides implementations of `Mutex`, `RwLock`, `Condvar` and\n `Once` that are smaller, faster and more flexible than those in the Rust\n standard library. It also provides a `ReentrantMutex` type.\n","sig":null,"attributes":[{"value":"/ This library provides implementations of `Mutex`, `RwLock`, `Condvar` and","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/lib.rs","byte_start":333,"byte_end":410,"line_start":8,"line_end":8,"column_start":1,"column_end":78}},{"value":"/ `Once` that are smaller, faster and more flexible than those in the Rust","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/lib.rs","byte_start":411,"byte_end":487,"line_start":9,"line_end":9,"column_start":1,"column_end":77}},{"value":"/ standard library. It also provides a `ReentrantMutex` type.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/lib.rs","byte_start":488,"byte_end":551,"line_start":10,"line_end":10,"column_start":1,"column_end":64}},{"value":"warn(missing_docs)","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/lib.rs","byte_start":553,"byte_end":575,"line_start":12,"line_end":12,"column_start":1,"column_end":23}},{"value":"warn(rust_2018_idioms)","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/lib.rs","byte_start":576,"byte_end":602,"line_start":13,"line_end":13,"column_start":1,"column_end":27}}]},{"kind":"Struct","id":{"krate":0,"index":643},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":2890,"byte_end":2907,"line_start":23,"line_end":23,"column_start":12,"column_end":29},"name":"WaitTimeoutResult","qualname":"::condvar::WaitTimeoutResult","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type indicating whether a timed wait on a condition variable returned\n due to a time out or not.\n","sig":null,"attributes":[{"value":"/ A type indicating whether a timed wait on a condition variable returned","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":2728,"byte_end":2803,"line_start":20,"line_end":20,"column_start":1,"column_end":76}},{"value":"/ due to a time out or not.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":2804,"byte_end":2833,"line_start":21,"line_end":21,"column_start":1,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":64},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":3028,"byte_end":3037,"line_start":28,"line_end":28,"column_start":12,"column_end":21},"name":"timed_out","qualname":"<WaitTimeoutResult>::timed_out","value":"pub fn timed_out(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether the wait was known to have timed out.\n","sig":null,"attributes":[{"value":"/ Returns whether the wait was known to have timed out.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":2945,"byte_end":3002,"line_start":26,"line_end":26,"column_start":5,"column_end":62}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":3007,"byte_end":3016,"line_start":27,"line_end":27,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":65},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":5432,"byte_end":5439,"line_start":90,"line_end":90,"column_start":12,"column_end":19},"name":"Condvar","qualname":"::condvar::Condvar","value":"Condvar {  }","parent":null,"children":[{"krate":0,"index":66}],"decl_id":null,"docs":" A Condition Variable","sig":null,"attributes":[{"value":"/ A Condition Variable","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":3078,"byte_end":3102,"line_start":33,"line_end":33,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":3103,"byte_end":3106,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ Condition variables represent the ability to block a thread such that it","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":3107,"byte_end":3183,"line_start":35,"line_end":35,"column_start":1,"column_end":77}},{"value":"/ consumes no CPU time while waiting for an event to occur. Condition","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":3184,"byte_end":3255,"line_start":36,"line_end":36,"column_start":1,"column_end":72}},{"value":"/ variables are typically associated with a boolean predicate (a condition)","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":3256,"byte_end":3333,"line_start":37,"line_end":37,"column_start":1,"column_end":78}},{"value":"/ and a mutex. The predicate is always verified inside of the mutex before","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":3334,"byte_end":3410,"line_start":38,"line_end":38,"column_start":1,"column_end":77}},{"value":"/ determining that thread must block.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":3411,"byte_end":3450,"line_start":39,"line_end":39,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":3451,"byte_end":3454,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ Note that this module places one additional restriction over the system","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":3455,"byte_end":3530,"line_start":41,"line_end":41,"column_start":1,"column_end":76}},{"value":"/ condition variables: each condvar can be used with only one mutex at a","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":3531,"byte_end":3605,"line_start":42,"line_end":42,"column_start":1,"column_end":75}},{"value":"/ time. Any attempt to use multiple mutexes on the same condition variable","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":3606,"byte_end":3682,"line_start":43,"line_end":43,"column_start":1,"column_end":77}},{"value":"/ simultaneously will result in a runtime panic. However it is possible to","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":3683,"byte_end":3759,"line_start":44,"line_end":44,"column_start":1,"column_end":77}},{"value":"/ switch to a different mutex if there are no threads currently waiting on","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":3760,"byte_end":3836,"line_start":45,"line_end":45,"column_start":1,"column_end":77}},{"value":"/ the condition variable.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":3837,"byte_end":3864,"line_start":46,"line_end":46,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":3865,"byte_end":3868,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ # Differences from the standard library `Condvar`","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":3869,"byte_end":3922,"line_start":48,"line_end":48,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":3923,"byte_end":3926,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ - No spurious wakeups: A wait will only return a non-timeout result if it","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":3927,"byte_end":4004,"line_start":50,"line_end":50,"column_start":1,"column_end":78}},{"value":"/   was woken up by `notify_one` or `notify_all`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":4005,"byte_end":4056,"line_start":51,"line_end":51,"column_start":1,"column_end":52}},{"value":"/ - `Condvar::notify_all` will only wake up a single thread, the rest are","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":4057,"byte_end":4132,"line_start":52,"line_end":52,"column_start":1,"column_end":76}},{"value":"/   requeued to wait for the `Mutex` to be unlocked by the thread that was","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":4133,"byte_end":4209,"line_start":53,"line_end":53,"column_start":1,"column_end":77}},{"value":"/   woken up.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":4210,"byte_end":4225,"line_start":54,"line_end":54,"column_start":1,"column_end":16}},{"value":"/ - Only requires 1 word of space, whereas the standard library boxes the","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":4226,"byte_end":4301,"line_start":55,"line_end":55,"column_start":1,"column_end":76}},{"value":"/   `Condvar` due to platform limitations.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":4302,"byte_end":4346,"line_start":56,"line_end":56,"column_start":1,"column_end":45}},{"value":"/ - Can be statically constructed (requires the `const_fn` nightly feature).","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":4347,"byte_end":4425,"line_start":57,"line_end":57,"column_start":1,"column_end":79}},{"value":"/ - Does not require any drop glue when dropped.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":4426,"byte_end":4476,"line_start":58,"line_end":58,"column_start":1,"column_end":51}},{"value":"/ - Inline fast path for the uncontended case.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":4477,"byte_end":4525,"line_start":59,"line_end":59,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":4526,"byte_end":4529,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":4530,"byte_end":4544,"line_start":61,"line_end":61,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":4545,"byte_end":4548,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":4549,"byte_end":4556,"line_start":63,"line_end":63,"column_start":1,"column_end":8}},{"value":"/ use parking_lot::{Mutex, Condvar};","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":4557,"byte_end":4595,"line_start":64,"line_end":64,"column_start":1,"column_end":39}},{"value":"/ use std::sync::Arc;","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":4596,"byte_end":4619,"line_start":65,"line_end":65,"column_start":1,"column_end":24}},{"value":"/ use std::thread;","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":4620,"byte_end":4640,"line_start":66,"line_end":66,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":4641,"byte_end":4644,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ let pair = Arc::new((Mutex::new(false), Condvar::new()));","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":4645,"byte_end":4706,"line_start":68,"line_end":68,"column_start":1,"column_end":62}},{"value":"/ let pair2 = pair.clone();","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":4707,"byte_end":4736,"line_start":69,"line_end":69,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":4737,"byte_end":4740,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ // Inside of our lock, spawn a new thread, and then wait for it to start","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":4741,"byte_end":4817,"line_start":71,"line_end":71,"column_start":1,"column_end":77}},{"value":"/ thread::spawn(move|| {","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":4818,"byte_end":4844,"line_start":72,"line_end":72,"column_start":1,"column_end":27}},{"value":"/     let &(ref lock, ref cvar) = &*pair2;","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":4845,"byte_end":4889,"line_start":73,"line_end":73,"column_start":1,"column_end":45}},{"value":"/     let mut started = lock.lock();","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":4890,"byte_end":4928,"line_start":74,"line_end":74,"column_start":1,"column_end":39}},{"value":"/     *started = true;","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":4929,"byte_end":4953,"line_start":75,"line_end":75,"column_start":1,"column_end":25}},{"value":"/     cvar.notify_one();","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":4954,"byte_end":4980,"line_start":76,"line_end":76,"column_start":1,"column_end":27}},{"value":"/ });","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":4981,"byte_end":4988,"line_start":77,"line_end":77,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":4989,"byte_end":4992,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"/ // wait for the thread to start up","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":4993,"byte_end":5031,"line_start":79,"line_end":79,"column_start":1,"column_end":39}},{"value":"/ let &(ref lock, ref cvar) = &*pair;","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":5032,"byte_end":5071,"line_start":80,"line_end":80,"column_start":1,"column_end":40}},{"value":"/ let mut started = lock.lock();","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":5072,"byte_end":5106,"line_start":81,"line_end":81,"column_start":1,"column_end":35}},{"value":"/ if !*started {","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":5107,"byte_end":5125,"line_start":82,"line_end":82,"column_start":1,"column_end":19}},{"value":"/     cvar.wait(&mut started);","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":5126,"byte_end":5158,"line_start":83,"line_end":83,"column_start":1,"column_end":33}},{"value":"/ }","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":5159,"byte_end":5164,"line_start":84,"line_end":84,"column_start":1,"column_end":6}},{"value":"/ // Note that we used an if instead of a while loop above. This is only","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":5165,"byte_end":5239,"line_start":85,"line_end":85,"column_start":1,"column_end":75}},{"value":"/ // possible because parking_lot's Condvar will never spuriously wake up.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":5240,"byte_end":5316,"line_start":86,"line_end":86,"column_start":1,"column_end":77}},{"value":"/ // This means that wait() will only return after notify_one or notify_all is","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":5317,"byte_end":5397,"line_start":87,"line_end":87,"column_start":1,"column_end":81}},{"value":"/ // called.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":5398,"byte_end":5412,"line_start":88,"line_end":88,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":5413,"byte_end":5420,"line_start":89,"line_end":89,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":68},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":5617,"byte_end":5620,"line_start":98,"line_end":98,"column_start":18,"column_end":21},"name":"new","qualname":"<Condvar>::new","value":"pub const fn new() -> Condvar","parent":null,"children":[],"decl_id":null,"docs":" Creates a new condition variable which is ready to be waited on and\n notified.\n","sig":null,"attributes":[{"value":"/ Creates a new condition variable which is ready to be waited on and","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":5496,"byte_end":5567,"line_start":95,"line_end":95,"column_start":5,"column_end":76}},{"value":"/ notified.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":5572,"byte_end":5585,"line_start":96,"line_end":96,"column_start":5,"column_end":18}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":5590,"byte_end":5599,"line_start":97,"line_end":97,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":69},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":6446,"byte_end":6456,"line_start":128,"line_end":128,"column_start":12,"column_end":22},"name":"notify_one","qualname":"<Condvar>::notify_one","value":"pub fn notify_one(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Wakes up one blocked thread on this condvar.","sig":null,"attributes":[{"value":"/ Wakes up one blocked thread on this condvar.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":5727,"byte_end":5775,"line_start":104,"line_end":104,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":5780,"byte_end":5783,"line_start":105,"line_end":105,"column_start":5,"column_end":8}},{"value":"/ Returns whether a thread was woken up.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":5788,"byte_end":5830,"line_start":106,"line_end":106,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":5835,"byte_end":5838,"line_start":107,"line_end":107,"column_start":5,"column_end":8}},{"value":"/ If there is a blocked thread on this condition variable, then it will","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":5843,"byte_end":5916,"line_start":108,"line_end":108,"column_start":5,"column_end":78}},{"value":"/ be woken up from its call to `wait` or `wait_timeout`. Calls to","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":5921,"byte_end":5988,"line_start":109,"line_end":109,"column_start":5,"column_end":72}},{"value":"/ `notify_one` are not buffered in any way.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":5993,"byte_end":6038,"line_start":110,"line_end":110,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":6043,"byte_end":6046,"line_start":111,"line_end":111,"column_start":5,"column_end":8}},{"value":"/ To wake up all threads, see `notify_all()`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":6051,"byte_end":6098,"line_start":112,"line_end":112,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":6103,"byte_end":6106,"line_start":113,"line_end":113,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":6111,"byte_end":6125,"line_start":114,"line_end":114,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":6130,"byte_end":6133,"line_start":115,"line_end":115,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":6138,"byte_end":6145,"line_start":116,"line_end":116,"column_start":5,"column_end":12}},{"value":"/ use parking_lot::Condvar;","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":6150,"byte_end":6179,"line_start":117,"line_end":117,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":6184,"byte_end":6187,"line_start":118,"line_end":118,"column_start":5,"column_end":8}},{"value":"/ let condvar = Condvar::new();","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":6192,"byte_end":6225,"line_start":119,"line_end":119,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":6230,"byte_end":6233,"line_start":120,"line_end":120,"column_start":5,"column_end":8}},{"value":"/ // do something with condvar, share it with other threads","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":6238,"byte_end":6299,"line_start":121,"line_end":121,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":6304,"byte_end":6307,"line_start":122,"line_end":122,"column_start":5,"column_end":8}},{"value":"/ if !condvar.notify_one() {","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":6312,"byte_end":6342,"line_start":123,"line_end":123,"column_start":5,"column_end":35}},{"value":"/     println!(\"Nobody was listening for this.\");","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":6347,"byte_end":6398,"line_start":124,"line_end":124,"column_start":5,"column_end":56}},{"value":"/ }","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":6403,"byte_end":6408,"line_start":125,"line_end":125,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":6413,"byte_end":6420,"line_start":126,"line_end":126,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":6425,"byte_end":6434,"line_start":127,"line_end":127,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":73},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":8909,"byte_end":8919,"line_start":189,"line_end":189,"column_start":12,"column_end":22},"name":"notify_all","qualname":"<Condvar>::notify_all","value":"pub fn notify_all(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Wakes up all blocked threads on this condvar.","sig":null,"attributes":[{"value":"/ Wakes up all blocked threads on this condvar.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":8542,"byte_end":8591,"line_start":179,"line_end":179,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":8596,"byte_end":8599,"line_start":180,"line_end":180,"column_start":5,"column_end":8}},{"value":"/ Returns the number of threads woken up.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":8604,"byte_end":8647,"line_start":181,"line_end":181,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":8652,"byte_end":8655,"line_start":182,"line_end":182,"column_start":5,"column_end":8}},{"value":"/ This method will ensure that any current waiters on the condition","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":8660,"byte_end":8729,"line_start":183,"line_end":183,"column_start":5,"column_end":74}},{"value":"/ variable are awoken. Calls to `notify_all()` are not buffered in any","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":8734,"byte_end":8806,"line_start":184,"line_end":184,"column_start":5,"column_end":77}},{"value":"/ way.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":8811,"byte_end":8819,"line_start":185,"line_end":185,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":8824,"byte_end":8827,"line_start":186,"line_end":186,"column_start":5,"column_end":8}},{"value":"/ To wake up only one thread, see `notify_one()`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":8832,"byte_end":8883,"line_start":187,"line_end":187,"column_start":5,"column_end":56}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":8888,"byte_end":8897,"line_start":188,"line_end":188,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":77},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":11932,"byte_end":11936,"line_start":259,"line_end":259,"column_start":12,"column_end":16},"name":"wait","qualname":"<Condvar>::wait","value":"pub fn wait<T: ?Sized>(&Self, &mut MutexGuard<, T>)","parent":null,"children":[],"decl_id":null,"docs":" Blocks the current thread until this condition variable receives a\n notification.","sig":null,"attributes":[{"value":"/ Blocks the current thread until this condition variable receives a","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":11283,"byte_end":11353,"line_start":245,"line_end":245,"column_start":5,"column_end":75}},{"value":"/ notification.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":11358,"byte_end":11375,"line_start":246,"line_end":246,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":11380,"byte_end":11383,"line_start":247,"line_end":247,"column_start":5,"column_end":8}},{"value":"/ This function will atomically unlock the mutex specified (represented by","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":11388,"byte_end":11464,"line_start":248,"line_end":248,"column_start":5,"column_end":81}},{"value":"/ `mutex_guard`) and block the current thread. This means that any calls","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":11469,"byte_end":11543,"line_start":249,"line_end":249,"column_start":5,"column_end":79}},{"value":"/ to `notify_*()` which happen logically after the mutex is unlocked are","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":11548,"byte_end":11622,"line_start":250,"line_end":250,"column_start":5,"column_end":79}},{"value":"/ candidates to wake this thread up. When this function call returns, the","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":11627,"byte_end":11702,"line_start":251,"line_end":251,"column_start":5,"column_end":80}},{"value":"/ lock specified will have been re-acquired.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":11707,"byte_end":11753,"line_start":252,"line_end":252,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":11758,"byte_end":11761,"line_start":253,"line_end":253,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":11766,"byte_end":11778,"line_start":254,"line_end":254,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":11783,"byte_end":11786,"line_start":255,"line_end":255,"column_start":5,"column_end":8}},{"value":"/ This function will panic if another thread is waiting on the `Condvar`","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":11791,"byte_end":11865,"line_start":256,"line_end":256,"column_start":5,"column_end":79}},{"value":"/ with a different `Mutex` object.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":11870,"byte_end":11906,"line_start":257,"line_end":257,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":11911,"byte_end":11920,"line_start":258,"line_end":258,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":79},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":13211,"byte_end":13221,"line_start":287,"line_end":287,"column_start":12,"column_end":22},"name":"wait_until","qualname":"<Condvar>::wait_until","value":"pub fn wait_until<T: ?Sized>(&Self, &mut MutexGuard<, T>, Instant)\n-> WaitTimeoutResult","parent":null,"children":[],"decl_id":null,"docs":" Waits on this condition variable for a notification, timing out after\n the specified time instant.","sig":null,"attributes":[{"value":"/ Waits on this condition variable for a notification, timing out after","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":12094,"byte_end":12167,"line_start":263,"line_end":263,"column_start":5,"column_end":78}},{"value":"/ the specified time instant.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":12172,"byte_end":12203,"line_start":264,"line_end":264,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":12208,"byte_end":12211,"line_start":265,"line_end":265,"column_start":5,"column_end":8}},{"value":"/ The semantics of this function are equivalent to `wait()` except that","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":12216,"byte_end":12289,"line_start":266,"line_end":266,"column_start":5,"column_end":78}},{"value":"/ the thread will be blocked roughly until `timeout` is reached. This","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":12294,"byte_end":12365,"line_start":267,"line_end":267,"column_start":5,"column_end":76}},{"value":"/ method should not be used for precise timing due to anomalies such as","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":12370,"byte_end":12443,"line_start":268,"line_end":268,"column_start":5,"column_end":78}},{"value":"/ preemption or platform differences that may not cause the maximum","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":12448,"byte_end":12517,"line_start":269,"line_end":269,"column_start":5,"column_end":74}},{"value":"/ amount of time waited to be precisely `timeout`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":12522,"byte_end":12574,"line_start":270,"line_end":270,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":12579,"byte_end":12582,"line_start":271,"line_end":271,"column_start":5,"column_end":8}},{"value":"/ Note that the best effort is made to ensure that the time waited is","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":12587,"byte_end":12658,"line_start":272,"line_end":272,"column_start":5,"column_end":76}},{"value":"/ measured with a monotonic clock, and not affected by the changes made to","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":12663,"byte_end":12739,"line_start":273,"line_end":273,"column_start":5,"column_end":81}},{"value":"/ the system time.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":12744,"byte_end":12764,"line_start":274,"line_end":274,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":12769,"byte_end":12772,"line_start":275,"line_end":275,"column_start":5,"column_end":8}},{"value":"/ The returned `WaitTimeoutResult` value indicates if the timeout is","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":12777,"byte_end":12847,"line_start":276,"line_end":276,"column_start":5,"column_end":75}},{"value":"/ known to have elapsed.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":12852,"byte_end":12878,"line_start":277,"line_end":277,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":12883,"byte_end":12886,"line_start":278,"line_end":278,"column_start":5,"column_end":8}},{"value":"/ Like `wait`, the lock specified will be re-acquired when this function","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":12891,"byte_end":12965,"line_start":279,"line_end":279,"column_start":5,"column_end":79}},{"value":"/ returns, regardless of whether the timeout elapsed or not.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":12970,"byte_end":13032,"line_start":280,"line_end":280,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":13037,"byte_end":13040,"line_start":281,"line_end":281,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":13045,"byte_end":13057,"line_start":282,"line_end":282,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":13062,"byte_end":13065,"line_start":283,"line_end":283,"column_start":5,"column_end":8}},{"value":"/ This function will panic if another thread is waiting on the `Condvar`","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":13070,"byte_end":13144,"line_start":284,"line_end":284,"column_start":5,"column_end":79}},{"value":"/ with a different `Mutex` object.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":13149,"byte_end":13185,"line_start":285,"line_end":285,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":13190,"byte_end":13199,"line_start":286,"line_end":286,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":85},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":17615,"byte_end":17623,"line_start":391,"line_end":391,"column_start":12,"column_end":20},"name":"wait_for","qualname":"<Condvar>::wait_for","value":"pub fn wait_for<T: ?Sized>(&Self, &mut MutexGuard<, T>, Duration)\n-> WaitTimeoutResult","parent":null,"children":[],"decl_id":null,"docs":" Waits on this condition variable for a notification, timing out after a\n specified duration.","sig":null,"attributes":[{"value":"/ Waits on this condition variable for a notification, timing out after a","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":16365,"byte_end":16440,"line_start":366,"line_end":366,"column_start":5,"column_end":80}},{"value":"/ specified duration.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":16445,"byte_end":16468,"line_start":367,"line_end":367,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":16473,"byte_end":16476,"line_start":368,"line_end":368,"column_start":5,"column_end":8}},{"value":"/ The semantics of this function are equivalent to `wait()` except that","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":16481,"byte_end":16554,"line_start":369,"line_end":369,"column_start":5,"column_end":78}},{"value":"/ the thread will be blocked for roughly no longer than `timeout`. This","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":16559,"byte_end":16632,"line_start":370,"line_end":370,"column_start":5,"column_end":78}},{"value":"/ method should not be used for precise timing due to anomalies such as","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":16637,"byte_end":16710,"line_start":371,"line_end":371,"column_start":5,"column_end":78}},{"value":"/ preemption or platform differences that may not cause the maximum","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":16715,"byte_end":16784,"line_start":372,"line_end":372,"column_start":5,"column_end":74}},{"value":"/ amount of time waited to be precisely `timeout`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":16789,"byte_end":16841,"line_start":373,"line_end":373,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":16846,"byte_end":16849,"line_start":374,"line_end":374,"column_start":5,"column_end":8}},{"value":"/ Note that the best effort is made to ensure that the time waited is","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":16854,"byte_end":16925,"line_start":375,"line_end":375,"column_start":5,"column_end":76}},{"value":"/ measured with a monotonic clock, and not affected by the changes made to","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":16930,"byte_end":17006,"line_start":376,"line_end":376,"column_start":5,"column_end":81}},{"value":"/ the system time.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":17011,"byte_end":17031,"line_start":377,"line_end":377,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":17036,"byte_end":17039,"line_start":378,"line_end":378,"column_start":5,"column_end":8}},{"value":"/ The returned `WaitTimeoutResult` value indicates if the timeout is","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":17044,"byte_end":17114,"line_start":379,"line_end":379,"column_start":5,"column_end":75}},{"value":"/ known to have elapsed.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":17119,"byte_end":17145,"line_start":380,"line_end":380,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":17150,"byte_end":17153,"line_start":381,"line_end":381,"column_start":5,"column_end":8}},{"value":"/ Like `wait`, the lock specified will be re-acquired when this function","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":17158,"byte_end":17232,"line_start":382,"line_end":382,"column_start":5,"column_end":79}},{"value":"/ returns, regardless of whether the timeout elapsed or not.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":17237,"byte_end":17299,"line_start":383,"line_end":383,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":17304,"byte_end":17307,"line_start":384,"line_end":384,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":17312,"byte_end":17324,"line_start":385,"line_end":385,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":17329,"byte_end":17332,"line_start":386,"line_end":386,"column_start":5,"column_end":8}},{"value":"/ Panics if the given `timeout` is so large that it can't be added to the current time.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":17337,"byte_end":17426,"line_start":387,"line_end":387,"column_start":5,"column_end":94}},{"value":"/ This panic is not possible if the crate is built with the `nightly` feature, then a too","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":17431,"byte_end":17522,"line_start":388,"line_end":388,"column_start":5,"column_end":96}},{"value":"/ large `timeout` becomes equivalent to just calling `wait`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":17527,"byte_end":17589,"line_start":389,"line_end":389,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":17594,"byte_end":17603,"line_start":390,"line_end":390,"column_start":5,"column_end":14}}]},{"kind":"Type","id":{"krate":0,"index":96},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/elision.rs","byte_start":37912,"byte_end":37919,"line_start":12,"line_end":12,"column_start":10,"column_end":17},"name":"IntType","qualname":"::elision::AtomicElisionExt::IntType","value":"type IntType;","parent":{"krate":0,"index":95},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":111},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/fair_mutex.rs","byte_start":44671,"byte_end":44680,"line_start":81,"line_end":81,"column_start":10,"column_end":19},"name":"FairMutex","qualname":"::fair_mutex::FairMutex","value":"lock_api::Mutex<RawFairMutex, T>","parent":null,"children":[],"decl_id":null,"docs":" A mutual exclusive primitive that is always fair, useful for protecting shared data","sig":null,"attributes":[{"value":"/ A mutual exclusive primitive that is always fair, useful for protecting shared data","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/fair_mutex.rs","byte_start":41504,"byte_end":41591,"line_start":11,"line_end":11,"column_start":1,"column_end":88}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/fair_mutex.rs","byte_start":41592,"byte_end":41595,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ This mutex will block threads waiting for the lock to become available. The","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/fair_mutex.rs","byte_start":41596,"byte_end":41675,"line_start":13,"line_end":13,"column_start":1,"column_end":80}},{"value":"/ mutex can also be statically initialized or created via a `new`","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/fair_mutex.rs","byte_start":41676,"byte_end":41743,"line_start":14,"line_end":14,"column_start":1,"column_end":68}},{"value":"/ constructor. Each mutex has a type parameter which represents the data that","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/fair_mutex.rs","byte_start":41744,"byte_end":41823,"line_start":15,"line_end":15,"column_start":1,"column_end":80}},{"value":"/ it is protecting. The data can only be accessed through the RAII guards","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/fair_mutex.rs","byte_start":41824,"byte_end":41899,"line_start":16,"line_end":16,"column_start":1,"column_end":76}},{"value":"/ returned from `lock` and `try_lock`, which guarantees that the data is only","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/fair_mutex.rs","byte_start":41900,"byte_end":41979,"line_start":17,"line_end":17,"column_start":1,"column_end":80}},{"value":"/ ever accessed when the mutex is locked.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/fair_mutex.rs","byte_start":41980,"byte_end":42023,"line_start":18,"line_end":18,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/fair_mutex.rs","byte_start":42024,"byte_end":42027,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ The regular mutex provided by `parking_lot` uses eventual locking fairness","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/fair_mutex.rs","byte_start":42028,"byte_end":42106,"line_start":20,"line_end":20,"column_start":1,"column_end":79}},{"value":"/ (after some time it will default to the fair algorithm), but eventual","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/fair_mutex.rs","byte_start":42107,"byte_end":42180,"line_start":21,"line_end":21,"column_start":1,"column_end":74}},{"value":"/ fairness does not provide the same garantees a always fair method would.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/fair_mutex.rs","byte_start":42181,"byte_end":42257,"line_start":22,"line_end":22,"column_start":1,"column_end":77}},{"value":"/ Fair mutexes are generally slower, but sometimes needed. This wrapper was","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/fair_mutex.rs","byte_start":42258,"byte_end":42335,"line_start":23,"line_end":23,"column_start":1,"column_end":78}},{"value":"/ created to avoid using a unfair protocol when it's forbidden by mistake.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/fair_mutex.rs","byte_start":42336,"byte_end":42412,"line_start":24,"line_end":24,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/fair_mutex.rs","byte_start":42413,"byte_end":42416,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ In a fair mutex the lock is provided to whichever thread asked first,","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/fair_mutex.rs","byte_start":42417,"byte_end":42490,"line_start":26,"line_end":26,"column_start":1,"column_end":74}},{"value":"/ they form a queue and always follow the first-in first-out order. This","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/fair_mutex.rs","byte_start":42491,"byte_end":42565,"line_start":27,"line_end":27,"column_start":1,"column_end":75}},{"value":"/ means some thread in the queue won't be able to steal the lock and use it fast","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/fair_mutex.rs","byte_start":42566,"byte_end":42648,"line_start":28,"line_end":28,"column_start":1,"column_end":83}},{"value":"/ to increase throughput, at the cost of latency. Since the response time will grow","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/fair_mutex.rs","byte_start":42649,"byte_end":42734,"line_start":29,"line_end":29,"column_start":1,"column_end":86}},{"value":"/ for some threads that are waiting for the lock and losing to faster but later ones,","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/fair_mutex.rs","byte_start":42735,"byte_end":42822,"line_start":30,"line_end":30,"column_start":1,"column_end":88}},{"value":"/ but it may make sending more responses possible.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/fair_mutex.rs","byte_start":42823,"byte_end":42875,"line_start":31,"line_end":31,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/fair_mutex.rs","byte_start":42876,"byte_end":42879,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ A fair mutex may not be interesting if threads have different priorities (this is known as","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/fair_mutex.rs","byte_start":42880,"byte_end":42974,"line_start":33,"line_end":33,"column_start":1,"column_end":95}},{"value":"/ priority inversion).","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/fair_mutex.rs","byte_start":42975,"byte_end":42999,"line_start":34,"line_end":34,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/fair_mutex.rs","byte_start":43000,"byte_end":43003,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ # Differences from the standard library `Mutex`","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/fair_mutex.rs","byte_start":43004,"byte_end":43055,"line_start":36,"line_end":36,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/fair_mutex.rs","byte_start":43056,"byte_end":43059,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ - No poisoning, the lock is released normally on panic.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/fair_mutex.rs","byte_start":43060,"byte_end":43119,"line_start":38,"line_end":38,"column_start":1,"column_end":60}},{"value":"/ - Only requires 1 byte of space, whereas the standard library boxes the","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/fair_mutex.rs","byte_start":43120,"byte_end":43195,"line_start":39,"line_end":39,"column_start":1,"column_end":76}},{"value":"/   `FairMutex` due to platform limitations.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/fair_mutex.rs","byte_start":43196,"byte_end":43242,"line_start":40,"line_end":40,"column_start":1,"column_end":47}},{"value":"/ - Can be statically constructed (requires the `const_fn` nightly feature).","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/fair_mutex.rs","byte_start":43243,"byte_end":43321,"line_start":41,"line_end":41,"column_start":1,"column_end":79}},{"value":"/ - Does not require any drop glue when dropped.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/fair_mutex.rs","byte_start":43322,"byte_end":43372,"line_start":42,"line_end":42,"column_start":1,"column_end":51}},{"value":"/ - Inline fast path for the uncontended case.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/fair_mutex.rs","byte_start":43373,"byte_end":43421,"line_start":43,"line_end":43,"column_start":1,"column_end":49}},{"value":"/ - Efficient handling of micro-contention using adaptive spinning.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/fair_mutex.rs","byte_start":43422,"byte_end":43491,"line_start":44,"line_end":44,"column_start":1,"column_end":70}},{"value":"/ - Allows raw locking & unlocking without a guard.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/fair_mutex.rs","byte_start":43492,"byte_end":43545,"line_start":45,"line_end":45,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/fair_mutex.rs","byte_start":43546,"byte_end":43549,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/fair_mutex.rs","byte_start":43550,"byte_end":43564,"line_start":47,"line_end":47,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/fair_mutex.rs","byte_start":43565,"byte_end":43568,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/fair_mutex.rs","byte_start":43569,"byte_end":43576,"line_start":49,"line_end":49,"column_start":1,"column_end":8}},{"value":"/ use parking_lot::FairMutex;","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/fair_mutex.rs","byte_start":43577,"byte_end":43608,"line_start":50,"line_end":50,"column_start":1,"column_end":32}},{"value":"/ use std::sync::{Arc, mpsc::channel};","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/fair_mutex.rs","byte_start":43609,"byte_end":43649,"line_start":51,"line_end":51,"column_start":1,"column_end":41}},{"value":"/ use std::thread;","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/fair_mutex.rs","byte_start":43650,"byte_end":43670,"line_start":52,"line_end":52,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/fair_mutex.rs","byte_start":43671,"byte_end":43674,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ const N: usize = 10;","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/fair_mutex.rs","byte_start":43675,"byte_end":43699,"line_start":54,"line_end":54,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/fair_mutex.rs","byte_start":43700,"byte_end":43703,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ // Spawn a few threads to increment a shared variable (non-atomically), and","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/fair_mutex.rs","byte_start":43704,"byte_end":43783,"line_start":56,"line_end":56,"column_start":1,"column_end":80}},{"value":"/ // let the main thread know once all increments are done.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/fair_mutex.rs","byte_start":43784,"byte_end":43845,"line_start":57,"line_end":57,"column_start":1,"column_end":62}},{"value":"/ //","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/fair_mutex.rs","byte_start":43846,"byte_end":43852,"line_start":58,"line_end":58,"column_start":1,"column_end":7}},{"value":"/ // Here we're using an Arc to share memory among threads, and the data inside","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/fair_mutex.rs","byte_start":43853,"byte_end":43934,"line_start":59,"line_end":59,"column_start":1,"column_end":82}},{"value":"/ // the Arc is protected with a mutex.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/fair_mutex.rs","byte_start":43935,"byte_end":43976,"line_start":60,"line_end":60,"column_start":1,"column_end":42}},{"value":"/ let data = Arc::new(FairMutex::new(0));","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/fair_mutex.rs","byte_start":43977,"byte_end":44020,"line_start":61,"line_end":61,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/fair_mutex.rs","byte_start":44021,"byte_end":44024,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"/ let (tx, rx) = channel();","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/fair_mutex.rs","byte_start":44025,"byte_end":44054,"line_start":63,"line_end":63,"column_start":1,"column_end":30}},{"value":"/ for _ in 0..10 {","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/fair_mutex.rs","byte_start":44055,"byte_end":44075,"line_start":64,"line_end":64,"column_start":1,"column_end":21}},{"value":"/     let (data, tx) = (Arc::clone(&data), tx.clone());","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/fair_mutex.rs","byte_start":44076,"byte_end":44133,"line_start":65,"line_end":65,"column_start":1,"column_end":58}},{"value":"/     thread::spawn(move || {","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/fair_mutex.rs","byte_start":44134,"byte_end":44165,"line_start":66,"line_end":66,"column_start":1,"column_end":32}},{"value":"/         // The shared state can only be accessed once the lock is held.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/fair_mutex.rs","byte_start":44166,"byte_end":44241,"line_start":67,"line_end":67,"column_start":1,"column_end":76}},{"value":"/         // Our non-atomic increment is safe because we're the only thread","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/fair_mutex.rs","byte_start":44242,"byte_end":44319,"line_start":68,"line_end":68,"column_start":1,"column_end":78}},{"value":"/         // which can access the shared state when the lock is held.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/fair_mutex.rs","byte_start":44320,"byte_end":44391,"line_start":69,"line_end":69,"column_start":1,"column_end":72}},{"value":"/         let mut data = data.lock();","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/fair_mutex.rs","byte_start":44392,"byte_end":44431,"line_start":70,"line_end":70,"column_start":1,"column_end":40}},{"value":"/         *data += 1;","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/fair_mutex.rs","byte_start":44432,"byte_end":44455,"line_start":71,"line_end":71,"column_start":1,"column_end":24}},{"value":"/         if *data == N {","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/fair_mutex.rs","byte_start":44456,"byte_end":44483,"line_start":72,"line_end":72,"column_start":1,"column_end":28}},{"value":"/             tx.send(()).unwrap();","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/fair_mutex.rs","byte_start":44484,"byte_end":44521,"line_start":73,"line_end":73,"column_start":1,"column_end":38}},{"value":"/         }","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/fair_mutex.rs","byte_start":44522,"byte_end":44535,"line_start":74,"line_end":74,"column_start":1,"column_end":14}},{"value":"/         // the lock is unlocked here when `data` goes out of scope.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/fair_mutex.rs","byte_start":44536,"byte_end":44607,"line_start":75,"line_end":75,"column_start":1,"column_end":72}},{"value":"/     });","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/fair_mutex.rs","byte_start":44608,"byte_end":44619,"line_start":76,"line_end":76,"column_start":1,"column_end":12}},{"value":"/ }","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/fair_mutex.rs","byte_start":44620,"byte_end":44625,"line_start":77,"line_end":77,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/fair_mutex.rs","byte_start":44626,"byte_end":44629,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"/ rx.recv().unwrap();","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/fair_mutex.rs","byte_start":44630,"byte_end":44653,"line_start":79,"line_end":79,"column_start":1,"column_end":24}},{"value":"/ ```","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/fair_mutex.rs","byte_start":44654,"byte_end":44661,"line_start":80,"line_end":80,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":113},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/fair_mutex.rs","byte_start":44879,"byte_end":44895,"line_start":86,"line_end":86,"column_start":14,"column_end":30},"name":"const_fair_mutex","qualname":"::fair_mutex::const_fair_mutex","value":"pub const fn const_fair_mutex<T>(T) -> FairMutex<T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new fair mutex in an unlocked state ready for use.","sig":null,"attributes":[{"value":"/ Creates a new fair mutex in an unlocked state ready for use.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/fair_mutex.rs","byte_start":44721,"byte_end":44785,"line_start":83,"line_end":83,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/fair_mutex.rs","byte_start":44786,"byte_end":44789,"line_start":84,"line_end":84,"column_start":1,"column_end":4}},{"value":"/ This allows creating a fair mutex in a constant context on stable Rust.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/fair_mutex.rs","byte_start":44790,"byte_end":44865,"line_start":85,"line_end":85,"column_start":1,"column_end":76}}]},{"kind":"Type","id":{"krate":0,"index":115},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/fair_mutex.rs","byte_start":45280,"byte_end":45294,"line_start":95,"line_end":95,"column_start":10,"column_end":24},"name":"FairMutexGuard","qualname":"::fair_mutex::FairMutexGuard","value":"lock_api::MutexGuard","parent":null,"children":[],"decl_id":null,"docs":" An RAII implementation of a \"scoped lock\" of a mutex. When this structure is\n dropped (falls out of scope), the lock will be unlocked.","sig":null,"attributes":[{"value":"/ An RAII implementation of a \"scoped lock\" of a mutex. When this structure is","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/fair_mutex.rs","byte_start":45002,"byte_end":45082,"line_start":90,"line_end":90,"column_start":1,"column_end":81}},{"value":"/ dropped (falls out of scope), the lock will be unlocked.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/fair_mutex.rs","byte_start":45083,"byte_end":45143,"line_start":91,"line_end":91,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/fair_mutex.rs","byte_start":45144,"byte_end":45147,"line_start":92,"line_end":92,"column_start":1,"column_end":4}},{"value":"/ The data protected by the mutex can be accessed through this guard via its","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/fair_mutex.rs","byte_start":45148,"byte_end":45226,"line_start":93,"line_end":93,"column_start":1,"column_end":79}},{"value":"/ `Deref` and `DerefMut` implementations.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/fair_mutex.rs","byte_start":45227,"byte_end":45270,"line_start":94,"line_end":94,"column_start":1,"column_end":44}}]},{"kind":"Type","id":{"krate":0,"index":118},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/fair_mutex.rs","byte_start":45734,"byte_end":45754,"line_start":104,"line_end":104,"column_start":10,"column_end":30},"name":"MappedFairMutexGuard","qualname":"::fair_mutex::MappedFairMutexGuard","value":"lock_api::MappedMutexGuard","parent":null,"children":[],"decl_id":null,"docs":" An RAII mutex guard returned by `FairMutexGuard::map`, which can point to a\n subfield of the protected data.","sig":null,"attributes":[{"value":"/ An RAII mutex guard returned by `FairMutexGuard::map`, which can point to a","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/fair_mutex.rs","byte_start":45348,"byte_end":45427,"line_start":97,"line_end":97,"column_start":1,"column_end":80}},{"value":"/ subfield of the protected data.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/fair_mutex.rs","byte_start":45428,"byte_end":45463,"line_start":98,"line_end":98,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/fair_mutex.rs","byte_start":45464,"byte_end":45467,"line_start":99,"line_end":99,"column_start":1,"column_end":4}},{"value":"/ The main difference between `MappedFairMutexGuard` and `FairMutexGuard` is that the","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/fair_mutex.rs","byte_start":45468,"byte_end":45555,"line_start":100,"line_end":100,"column_start":1,"column_end":88}},{"value":"/ former doesn't support temporarily unlocking and re-locking, since that","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/fair_mutex.rs","byte_start":45556,"byte_end":45631,"line_start":101,"line_end":101,"column_start":1,"column_end":76}},{"value":"/ could introduce soundness issues if the locked object is modified by another","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/fair_mutex.rs","byte_start":45632,"byte_end":45712,"line_start":102,"line_end":102,"column_start":1,"column_end":81}},{"value":"/ thread.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/fair_mutex.rs","byte_start":45713,"byte_end":45724,"line_start":103,"line_end":103,"column_start":1,"column_end":12}}]},{"kind":"Type","id":{"krate":0,"index":128},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/mutex.rs","byte_start":54049,"byte_end":54054,"line_start":87,"line_end":87,"column_start":10,"column_end":15},"name":"Mutex","qualname":"::mutex::Mutex","value":"lock_api::Mutex<RawMutex, T>","parent":null,"children":[],"decl_id":null,"docs":" A mutual exclusion primitive useful for protecting shared data","sig":null,"attributes":[{"value":"/ A mutual exclusion primitive useful for protecting shared data","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/mutex.rs","byte_start":50674,"byte_end":50740,"line_start":11,"line_end":11,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/mutex.rs","byte_start":50741,"byte_end":50744,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ This mutex will block threads waiting for the lock to become available. The","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/mutex.rs","byte_start":50745,"byte_end":50824,"line_start":13,"line_end":13,"column_start":1,"column_end":80}},{"value":"/ mutex can also be statically initialized or created via a `new`","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/mutex.rs","byte_start":50825,"byte_end":50892,"line_start":14,"line_end":14,"column_start":1,"column_end":68}},{"value":"/ constructor. Each mutex has a type parameter which represents the data that","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/mutex.rs","byte_start":50893,"byte_end":50972,"line_start":15,"line_end":15,"column_start":1,"column_end":80}},{"value":"/ it is protecting. The data can only be accessed through the RAII guards","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/mutex.rs","byte_start":50973,"byte_end":51048,"line_start":16,"line_end":16,"column_start":1,"column_end":76}},{"value":"/ returned from `lock` and `try_lock`, which guarantees that the data is only","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/mutex.rs","byte_start":51049,"byte_end":51128,"line_start":17,"line_end":17,"column_start":1,"column_end":80}},{"value":"/ ever accessed when the mutex is locked.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/mutex.rs","byte_start":51129,"byte_end":51172,"line_start":18,"line_end":18,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/mutex.rs","byte_start":51173,"byte_end":51176,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ # Fairness","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/mutex.rs","byte_start":51177,"byte_end":51191,"line_start":20,"line_end":20,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/mutex.rs","byte_start":51192,"byte_end":51195,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ A typical unfair lock can often end up in a situation where a single thread","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/mutex.rs","byte_start":51196,"byte_end":51275,"line_start":22,"line_end":22,"column_start":1,"column_end":80}},{"value":"/ quickly acquires and releases the same mutex in succession, which can starve","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/mutex.rs","byte_start":51276,"byte_end":51356,"line_start":23,"line_end":23,"column_start":1,"column_end":81}},{"value":"/ other threads waiting to acquire the mutex. While this improves throughput","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/mutex.rs","byte_start":51357,"byte_end":51435,"line_start":24,"line_end":24,"column_start":1,"column_end":79}},{"value":"/ because it doesn't force a context switch when a thread tries to re-acquire","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/mutex.rs","byte_start":51436,"byte_end":51515,"line_start":25,"line_end":25,"column_start":1,"column_end":80}},{"value":"/ a mutex it has just released, this can starve other threads.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/mutex.rs","byte_start":51516,"byte_end":51580,"line_start":26,"line_end":26,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/mutex.rs","byte_start":51581,"byte_end":51584,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ This mutex uses [eventual fairness](https://trac.webkit.org/changeset/203350)","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/mutex.rs","byte_start":51585,"byte_end":51666,"line_start":28,"line_end":28,"column_start":1,"column_end":82}},{"value":"/ to ensure that the lock will be fair on average without sacrificing","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/mutex.rs","byte_start":51667,"byte_end":51738,"line_start":29,"line_end":29,"column_start":1,"column_end":72}},{"value":"/ throughput. This is done by forcing a fair unlock on average every 0.5ms,","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/mutex.rs","byte_start":51739,"byte_end":51816,"line_start":30,"line_end":30,"column_start":1,"column_end":78}},{"value":"/ which will force the lock to go to the next thread waiting for the mutex.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/mutex.rs","byte_start":51817,"byte_end":51894,"line_start":31,"line_end":31,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/mutex.rs","byte_start":51895,"byte_end":51898,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ Additionally, any critical section longer than 1ms will always use a fair","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/mutex.rs","byte_start":51899,"byte_end":51976,"line_start":33,"line_end":33,"column_start":1,"column_end":78}},{"value":"/ unlock, which has a negligible impact on throughput considering the length","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/mutex.rs","byte_start":51977,"byte_end":52055,"line_start":34,"line_end":34,"column_start":1,"column_end":79}},{"value":"/ of the critical section.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/mutex.rs","byte_start":52056,"byte_end":52084,"line_start":35,"line_end":35,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/mutex.rs","byte_start":52085,"byte_end":52088,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ You can also force a fair unlock by calling `MutexGuard::unlock_fair` when","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/mutex.rs","byte_start":52089,"byte_end":52167,"line_start":37,"line_end":37,"column_start":1,"column_end":79}},{"value":"/ unlocking a mutex instead of simply dropping the `MutexGuard`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/mutex.rs","byte_start":52168,"byte_end":52234,"line_start":38,"line_end":38,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/mutex.rs","byte_start":52235,"byte_end":52238,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ # Differences from the standard library `Mutex`","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/mutex.rs","byte_start":52239,"byte_end":52290,"line_start":40,"line_end":40,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/mutex.rs","byte_start":52291,"byte_end":52294,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ - No poisoning, the lock is released normally on panic.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/mutex.rs","byte_start":52295,"byte_end":52354,"line_start":42,"line_end":42,"column_start":1,"column_end":60}},{"value":"/ - Only requires 1 byte of space, whereas the standard library boxes the","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/mutex.rs","byte_start":52355,"byte_end":52430,"line_start":43,"line_end":43,"column_start":1,"column_end":76}},{"value":"/   `Mutex` due to platform limitations.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/mutex.rs","byte_start":52431,"byte_end":52473,"line_start":44,"line_end":44,"column_start":1,"column_end":43}},{"value":"/ - Can be statically constructed (requires the `const_fn` nightly feature).","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/mutex.rs","byte_start":52474,"byte_end":52552,"line_start":45,"line_end":45,"column_start":1,"column_end":79}},{"value":"/ - Does not require any drop glue when dropped.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/mutex.rs","byte_start":52553,"byte_end":52603,"line_start":46,"line_end":46,"column_start":1,"column_end":51}},{"value":"/ - Inline fast path for the uncontended case.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/mutex.rs","byte_start":52604,"byte_end":52652,"line_start":47,"line_end":47,"column_start":1,"column_end":49}},{"value":"/ - Efficient handling of micro-contention using adaptive spinning.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/mutex.rs","byte_start":52653,"byte_end":52722,"line_start":48,"line_end":48,"column_start":1,"column_end":70}},{"value":"/ - Allows raw locking & unlocking without a guard.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/mutex.rs","byte_start":52723,"byte_end":52776,"line_start":49,"line_end":49,"column_start":1,"column_end":54}},{"value":"/ - Supports eventual fairness so that the mutex is fair on average.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/mutex.rs","byte_start":52777,"byte_end":52847,"line_start":50,"line_end":50,"column_start":1,"column_end":71}},{"value":"/ - Optionally allows making the mutex fair by calling `MutexGuard::unlock_fair`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/mutex.rs","byte_start":52848,"byte_end":52931,"line_start":51,"line_end":51,"column_start":1,"column_end":84}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/mutex.rs","byte_start":52932,"byte_end":52935,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/mutex.rs","byte_start":52936,"byte_end":52950,"line_start":53,"line_end":53,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/mutex.rs","byte_start":52951,"byte_end":52954,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/mutex.rs","byte_start":52955,"byte_end":52962,"line_start":55,"line_end":55,"column_start":1,"column_end":8}},{"value":"/ use parking_lot::Mutex;","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/mutex.rs","byte_start":52963,"byte_end":52990,"line_start":56,"line_end":56,"column_start":1,"column_end":28}},{"value":"/ use std::sync::{Arc, mpsc::channel};","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/mutex.rs","byte_start":52991,"byte_end":53031,"line_start":57,"line_end":57,"column_start":1,"column_end":41}},{"value":"/ use std::thread;","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/mutex.rs","byte_start":53032,"byte_end":53052,"line_start":58,"line_end":58,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/mutex.rs","byte_start":53053,"byte_end":53056,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ const N: usize = 10;","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/mutex.rs","byte_start":53057,"byte_end":53081,"line_start":60,"line_end":60,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/mutex.rs","byte_start":53082,"byte_end":53085,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ // Spawn a few threads to increment a shared variable (non-atomically), and","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/mutex.rs","byte_start":53086,"byte_end":53165,"line_start":62,"line_end":62,"column_start":1,"column_end":80}},{"value":"/ // let the main thread know once all increments are done.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/mutex.rs","byte_start":53166,"byte_end":53227,"line_start":63,"line_end":63,"column_start":1,"column_end":62}},{"value":"/ //","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/mutex.rs","byte_start":53228,"byte_end":53234,"line_start":64,"line_end":64,"column_start":1,"column_end":7}},{"value":"/ // Here we're using an Arc to share memory among threads, and the data inside","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/mutex.rs","byte_start":53235,"byte_end":53316,"line_start":65,"line_end":65,"column_start":1,"column_end":82}},{"value":"/ // the Arc is protected with a mutex.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/mutex.rs","byte_start":53317,"byte_end":53358,"line_start":66,"line_end":66,"column_start":1,"column_end":42}},{"value":"/ let data = Arc::new(Mutex::new(0));","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/mutex.rs","byte_start":53359,"byte_end":53398,"line_start":67,"line_end":67,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/mutex.rs","byte_start":53399,"byte_end":53402,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/ let (tx, rx) = channel();","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/mutex.rs","byte_start":53403,"byte_end":53432,"line_start":69,"line_end":69,"column_start":1,"column_end":30}},{"value":"/ for _ in 0..10 {","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/mutex.rs","byte_start":53433,"byte_end":53453,"line_start":70,"line_end":70,"column_start":1,"column_end":21}},{"value":"/     let (data, tx) = (Arc::clone(&data), tx.clone());","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/mutex.rs","byte_start":53454,"byte_end":53511,"line_start":71,"line_end":71,"column_start":1,"column_end":58}},{"value":"/     thread::spawn(move || {","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/mutex.rs","byte_start":53512,"byte_end":53543,"line_start":72,"line_end":72,"column_start":1,"column_end":32}},{"value":"/         // The shared state can only be accessed once the lock is held.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/mutex.rs","byte_start":53544,"byte_end":53619,"line_start":73,"line_end":73,"column_start":1,"column_end":76}},{"value":"/         // Our non-atomic increment is safe because we're the only thread","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/mutex.rs","byte_start":53620,"byte_end":53697,"line_start":74,"line_end":74,"column_start":1,"column_end":78}},{"value":"/         // which can access the shared state when the lock is held.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/mutex.rs","byte_start":53698,"byte_end":53769,"line_start":75,"line_end":75,"column_start":1,"column_end":72}},{"value":"/         let mut data = data.lock();","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/mutex.rs","byte_start":53770,"byte_end":53809,"line_start":76,"line_end":76,"column_start":1,"column_end":40}},{"value":"/         *data += 1;","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/mutex.rs","byte_start":53810,"byte_end":53833,"line_start":77,"line_end":77,"column_start":1,"column_end":24}},{"value":"/         if *data == N {","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/mutex.rs","byte_start":53834,"byte_end":53861,"line_start":78,"line_end":78,"column_start":1,"column_end":28}},{"value":"/             tx.send(()).unwrap();","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/mutex.rs","byte_start":53862,"byte_end":53899,"line_start":79,"line_end":79,"column_start":1,"column_end":38}},{"value":"/         }","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/mutex.rs","byte_start":53900,"byte_end":53913,"line_start":80,"line_end":80,"column_start":1,"column_end":14}},{"value":"/         // the lock is unlocked here when `data` goes out of scope.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/mutex.rs","byte_start":53914,"byte_end":53985,"line_start":81,"line_end":81,"column_start":1,"column_end":72}},{"value":"/     });","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/mutex.rs","byte_start":53986,"byte_end":53997,"line_start":82,"line_end":82,"column_start":1,"column_end":12}},{"value":"/ }","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/mutex.rs","byte_start":53998,"byte_end":54003,"line_start":83,"line_end":83,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/mutex.rs","byte_start":54004,"byte_end":54007,"line_start":84,"line_end":84,"column_start":1,"column_end":4}},{"value":"/ rx.recv().unwrap();","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/mutex.rs","byte_start":54008,"byte_end":54031,"line_start":85,"line_end":85,"column_start":1,"column_end":24}},{"value":"/ ```","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/mutex.rs","byte_start":54032,"byte_end":54039,"line_start":86,"line_end":86,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":130},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/mutex.rs","byte_start":54239,"byte_end":54250,"line_start":92,"line_end":92,"column_start":14,"column_end":25},"name":"const_mutex","qualname":"::mutex::const_mutex","value":"pub const fn const_mutex<T>(T) -> Mutex<T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new mutex in an unlocked state ready for use.","sig":null,"attributes":[{"value":"/ Creates a new mutex in an unlocked state ready for use.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/mutex.rs","byte_start":54091,"byte_end":54150,"line_start":89,"line_end":89,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/mutex.rs","byte_start":54151,"byte_end":54154,"line_start":90,"line_end":90,"column_start":1,"column_end":4}},{"value":"/ This allows creating a mutex in a constant context on stable Rust.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/mutex.rs","byte_start":54155,"byte_end":54225,"line_start":91,"line_end":91,"column_start":1,"column_end":71}}]},{"kind":"Type","id":{"krate":0,"index":132},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/mutex.rs","byte_start":54623,"byte_end":54633,"line_start":101,"line_end":101,"column_start":10,"column_end":20},"name":"MutexGuard","qualname":"::mutex::MutexGuard","value":"lock_api::MutexGuard","parent":null,"children":[],"decl_id":null,"docs":" An RAII implementation of a \"scoped lock\" of a mutex. When this structure is\n dropped (falls out of scope), the lock will be unlocked.","sig":null,"attributes":[{"value":"/ An RAII implementation of a \"scoped lock\" of a mutex. When this structure is","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/mutex.rs","byte_start":54345,"byte_end":54425,"line_start":96,"line_end":96,"column_start":1,"column_end":81}},{"value":"/ dropped (falls out of scope), the lock will be unlocked.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/mutex.rs","byte_start":54426,"byte_end":54486,"line_start":97,"line_end":97,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/mutex.rs","byte_start":54487,"byte_end":54490,"line_start":98,"line_end":98,"column_start":1,"column_end":4}},{"value":"/ The data protected by the mutex can be accessed through this guard via its","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/mutex.rs","byte_start":54491,"byte_end":54569,"line_start":99,"line_end":99,"column_start":1,"column_end":79}},{"value":"/ `Deref` and `DerefMut` implementations.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/mutex.rs","byte_start":54570,"byte_end":54613,"line_start":100,"line_end":100,"column_start":1,"column_end":44}}]},{"kind":"Type","id":{"krate":0,"index":135},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/mutex.rs","byte_start":55057,"byte_end":55073,"line_start":110,"line_end":110,"column_start":10,"column_end":26},"name":"MappedMutexGuard","qualname":"::mutex::MappedMutexGuard","value":"lock_api::MappedMutexGuard","parent":null,"children":[],"decl_id":null,"docs":" An RAII mutex guard returned by `MutexGuard::map`, which can point to a\n subfield of the protected data.","sig":null,"attributes":[{"value":"/ An RAII mutex guard returned by `MutexGuard::map`, which can point to a","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/mutex.rs","byte_start":54683,"byte_end":54758,"line_start":103,"line_end":103,"column_start":1,"column_end":76}},{"value":"/ subfield of the protected data.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/mutex.rs","byte_start":54759,"byte_end":54794,"line_start":104,"line_end":104,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/mutex.rs","byte_start":54795,"byte_end":54798,"line_start":105,"line_end":105,"column_start":1,"column_end":4}},{"value":"/ The main difference between `MappedMutexGuard` and `MutexGuard` is that the","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/mutex.rs","byte_start":54799,"byte_end":54878,"line_start":106,"line_end":106,"column_start":1,"column_end":80}},{"value":"/ former doesn't support temporarily unlocking and re-locking, since that","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/mutex.rs","byte_start":54879,"byte_end":54954,"line_start":107,"line_end":107,"column_start":1,"column_end":76}},{"value":"/ could introduce soundness issues if the locked object is modified by another","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/mutex.rs","byte_start":54955,"byte_end":55035,"line_start":108,"line_end":108,"column_start":1,"column_end":81}},{"value":"/ thread.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/mutex.rs","byte_start":55036,"byte_end":55047,"line_start":109,"line_end":109,"column_start":1,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":659},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/once.rs","byte_start":61157,"byte_end":61160,"line_start":24,"line_end":24,"column_start":5,"column_end":8},"name":"New","qualname":"::once::OnceState::New","value":"OnceState::New","parent":{"krate":0,"index":658},"children":[],"decl_id":null,"docs":" A closure has not been executed yet\n","sig":null,"attributes":[{"value":"/ A closure has not been executed yet","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/once.rs","byte_start":61113,"byte_end":61152,"line_start":23,"line_end":23,"column_start":5,"column_end":44}}]},{"kind":"TupleVariant","id":{"krate":0,"index":661},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/once.rs","byte_start":61212,"byte_end":61220,"line_start":27,"line_end":27,"column_start":5,"column_end":13},"name":"Poisoned","qualname":"::once::OnceState::Poisoned","value":"OnceState::Poisoned","parent":{"krate":0,"index":658},"children":[],"decl_id":null,"docs":" A closure was executed but panicked.\n","sig":null,"attributes":[{"value":"/ A closure was executed but panicked.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/once.rs","byte_start":61167,"byte_end":61207,"line_start":26,"line_end":26,"column_start":5,"column_end":45}}]},{"kind":"TupleVariant","id":{"krate":0,"index":663},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/once.rs","byte_start":61278,"byte_end":61288,"line_start":30,"line_end":30,"column_start":5,"column_end":15},"name":"InProgress","qualname":"::once::OnceState::InProgress","value":"OnceState::InProgress","parent":{"krate":0,"index":658},"children":[],"decl_id":null,"docs":" A thread is currently executing a closure.\n","sig":null,"attributes":[{"value":"/ A thread is currently executing a closure.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/once.rs","byte_start":61227,"byte_end":61273,"line_start":29,"line_end":29,"column_start":5,"column_end":51}}]},{"kind":"TupleVariant","id":{"krate":0,"index":665},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/once.rs","byte_start":61341,"byte_end":61345,"line_start":33,"line_end":33,"column_start":5,"column_end":9},"name":"Done","qualname":"::once::OnceState::Done","value":"OnceState::Done","parent":{"krate":0,"index":658},"children":[],"decl_id":null,"docs":" A closure has completed successfully.\n","sig":null,"attributes":[{"value":"/ A closure has completed successfully.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/once.rs","byte_start":61295,"byte_end":61336,"line_start":32,"line_end":32,"column_start":5,"column_end":46}}]},{"kind":"Enum","id":{"krate":0,"index":658},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/once.rs","byte_start":61097,"byte_end":61106,"line_start":22,"line_end":22,"column_start":10,"column_end":19},"name":"OnceState","qualname":"::once::OnceState","value":"pub enum OnceState { New, Poisoned, InProgress, Done, }","parent":null,"children":[{"krate":0,"index":659},{"krate":0,"index":661},{"krate":0,"index":663},{"krate":0,"index":665}],"decl_id":null,"docs":" Current state of a `Once`.\n","sig":null,"attributes":[{"value":"/ Current state of a `Once`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/once.rs","byte_start":61012,"byte_end":61042,"line_start":20,"line_end":20,"column_start":1,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":177},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/once.rs","byte_start":61625,"byte_end":61633,"line_start":42,"line_end":42,"column_start":12,"column_end":20},"name":"poisoned","qualname":"<OnceState>::poisoned","value":"pub fn poisoned(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether the associated `Once` has been poisoned.","sig":null,"attributes":[{"value":"/ Returns whether the associated `Once` has been poisoned.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/once.rs","byte_start":61371,"byte_end":61431,"line_start":37,"line_end":37,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/once.rs","byte_start":61436,"byte_end":61439,"line_start":38,"line_end":38,"column_start":5,"column_end":8}},{"value":"/ Once an initialization routine for a `Once` has panicked it will forever","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/once.rs","byte_start":61444,"byte_end":61520,"line_start":39,"line_end":39,"column_start":5,"column_end":81}},{"value":"/ indicate to future forced initialization routines that it is poisoned.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/once.rs","byte_start":61525,"byte_end":61599,"line_start":40,"line_end":40,"column_start":5,"column_end":79}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/once.rs","byte_start":61604,"byte_end":61613,"line_start":41,"line_end":41,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":178},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/once.rs","byte_start":61869,"byte_end":61873,"line_start":52,"line_end":52,"column_start":12,"column_end":16},"name":"done","qualname":"<OnceState>::done","value":"pub fn done(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether the associated `Once` has successfully executed a\n closure.\n","sig":null,"attributes":[{"value":"/ Returns whether the associated `Once` has successfully executed a","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/once.rs","byte_start":61757,"byte_end":61826,"line_start":49,"line_end":49,"column_start":5,"column_end":74}},{"value":"/ closure.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/once.rs","byte_start":61831,"byte_end":61843,"line_start":50,"line_end":50,"column_start":5,"column_end":17}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/once.rs","byte_start":61848,"byte_end":61857,"line_start":51,"line_end":51,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":179},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/once.rs","byte_start":62694,"byte_end":62698,"line_start":83,"line_end":83,"column_start":12,"column_end":16},"name":"Once","qualname":"::once::Once","value":"","parent":null,"children":[],"decl_id":null,"docs":" A synchronization primitive which can be used to run a one-time\n initialization. Useful for one-time initialization for globals, FFI or\n related functionality.","sig":null,"attributes":[{"value":"/ A synchronization primitive which can be used to run a one-time","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/once.rs","byte_start":61991,"byte_end":62058,"line_start":60,"line_end":60,"column_start":1,"column_end":68}},{"value":"/ initialization. Useful for one-time initialization for globals, FFI or","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/once.rs","byte_start":62059,"byte_end":62133,"line_start":61,"line_end":61,"column_start":1,"column_end":75}},{"value":"/ related functionality.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/once.rs","byte_start":62134,"byte_end":62160,"line_start":62,"line_end":62,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/once.rs","byte_start":62161,"byte_end":62164,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ # Differences from the standard library `Once`","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/once.rs","byte_start":62165,"byte_end":62215,"line_start":64,"line_end":64,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/once.rs","byte_start":62216,"byte_end":62219,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/ - Only requires 1 byte of space, instead of 1 word.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/once.rs","byte_start":62220,"byte_end":62275,"line_start":66,"line_end":66,"column_start":1,"column_end":56}},{"value":"/ - Not required to be `'static`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/once.rs","byte_start":62276,"byte_end":62311,"line_start":67,"line_end":67,"column_start":1,"column_end":36}},{"value":"/ - Relaxed memory barriers in the fast path, which can significantly improve","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/once.rs","byte_start":62312,"byte_end":62391,"line_start":68,"line_end":68,"column_start":1,"column_end":80}},{"value":"/   performance on some architectures.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/once.rs","byte_start":62392,"byte_end":62432,"line_start":69,"line_end":69,"column_start":1,"column_end":41}},{"value":"/ - Efficient handling of micro-contention using adaptive spinning.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/once.rs","byte_start":62433,"byte_end":62502,"line_start":70,"line_end":70,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/once.rs","byte_start":62503,"byte_end":62506,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/once.rs","byte_start":62507,"byte_end":62521,"line_start":72,"line_end":72,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/once.rs","byte_start":62522,"byte_end":62525,"line_start":73,"line_end":73,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/once.rs","byte_start":62526,"byte_end":62533,"line_start":74,"line_end":74,"column_start":1,"column_end":8}},{"value":"/ use parking_lot::Once;","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/once.rs","byte_start":62534,"byte_end":62560,"line_start":75,"line_end":75,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/once.rs","byte_start":62561,"byte_end":62564,"line_start":76,"line_end":76,"column_start":1,"column_end":4}},{"value":"/ static START: Once = Once::new();","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/once.rs","byte_start":62565,"byte_end":62602,"line_start":77,"line_end":77,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/once.rs","byte_start":62603,"byte_end":62606,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"/ START.call_once(|| {","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/once.rs","byte_start":62607,"byte_end":62631,"line_start":79,"line_end":79,"column_start":1,"column_end":25}},{"value":"/     // run initialization here","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/once.rs","byte_start":62632,"byte_end":62666,"line_start":80,"line_end":80,"column_start":1,"column_end":35}},{"value":"/ });","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/once.rs","byte_start":62667,"byte_end":62674,"line_start":81,"line_end":81,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/once.rs","byte_start":62675,"byte_end":62682,"line_start":82,"line_end":82,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":183},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/once.rs","byte_start":62790,"byte_end":62793,"line_start":88,"line_end":88,"column_start":18,"column_end":21},"name":"new","qualname":"<Once>::new","value":"pub const fn new() -> Once","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `Once` value.\n","sig":null,"attributes":[{"value":"/ Creates a new `Once` value.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/once.rs","byte_start":62727,"byte_end":62758,"line_start":86,"line_end":86,"column_start":5,"column_end":36}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/once.rs","byte_start":62763,"byte_end":62772,"line_start":87,"line_end":87,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":184},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/once.rs","byte_start":62919,"byte_end":62924,"line_start":94,"line_end":94,"column_start":12,"column_end":17},"name":"state","qualname":"<Once>::state","value":"pub fn state(&Self) -> OnceState","parent":null,"children":[],"decl_id":null,"docs":" Returns the current state of this `Once`.\n","sig":null,"attributes":[{"value":"/ Returns the current state of this `Once`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/once.rs","byte_start":62848,"byte_end":62893,"line_start":92,"line_end":92,"column_start":5,"column_end":50}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/once.rs","byte_start":62898,"byte_end":62907,"line_start":93,"line_end":93,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":185},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/once.rs","byte_start":65197,"byte_end":65206,"line_start":157,"line_end":157,"column_start":12,"column_end":21},"name":"call_once","qualname":"<Once>::call_once","value":"pub fn call_once<F>(&Self, F) where F: FnOnce() -> ()","parent":null,"children":[],"decl_id":null,"docs":" Performs an initialization routine once and only once. The given closure\n will be executed if this is the first time `call_once` has been called,\n and otherwise the routine will *not* be invoked.","sig":null,"attributes":[{"value":"/ Performs an initialization routine once and only once. The given closure","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/once.rs","byte_start":63281,"byte_end":63357,"line_start":107,"line_end":107,"column_start":5,"column_end":81}},{"value":"/ will be executed if this is the first time `call_once` has been called,","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/once.rs","byte_start":63362,"byte_end":63437,"line_start":108,"line_end":108,"column_start":5,"column_end":80}},{"value":"/ and otherwise the routine will *not* be invoked.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/once.rs","byte_start":63442,"byte_end":63494,"line_start":109,"line_end":109,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/once.rs","byte_start":63499,"byte_end":63502,"line_start":110,"line_end":110,"column_start":5,"column_end":8}},{"value":"/ This method will block the calling thread if another initialization","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/once.rs","byte_start":63507,"byte_end":63578,"line_start":111,"line_end":111,"column_start":5,"column_end":76}},{"value":"/ routine is currently running.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/once.rs","byte_start":63583,"byte_end":63616,"line_start":112,"line_end":112,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/once.rs","byte_start":63621,"byte_end":63624,"line_start":113,"line_end":113,"column_start":5,"column_end":8}},{"value":"/ When this function returns, it is guaranteed that some initialization","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/once.rs","byte_start":63629,"byte_end":63702,"line_start":114,"line_end":114,"column_start":5,"column_end":78}},{"value":"/ has run and completed (it may not be the closure specified). It is also","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/once.rs","byte_start":63707,"byte_end":63782,"line_start":115,"line_end":115,"column_start":5,"column_end":80}},{"value":"/ guaranteed that any memory writes performed by the executed closure can","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/once.rs","byte_start":63787,"byte_end":63862,"line_start":116,"line_end":116,"column_start":5,"column_end":80}},{"value":"/ be reliably observed by other threads at this point (there is a","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/once.rs","byte_start":63867,"byte_end":63934,"line_start":117,"line_end":117,"column_start":5,"column_end":72}},{"value":"/ happens-before relation between the closure and code executing after the","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/once.rs","byte_start":63939,"byte_end":64015,"line_start":118,"line_end":118,"column_start":5,"column_end":81}},{"value":"/ return).","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/once.rs","byte_start":64020,"byte_end":64032,"line_start":119,"line_end":119,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/once.rs","byte_start":64037,"byte_end":64040,"line_start":120,"line_end":120,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/once.rs","byte_start":64045,"byte_end":64059,"line_start":121,"line_end":121,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/once.rs","byte_start":64064,"byte_end":64067,"line_start":122,"line_end":122,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/once.rs","byte_start":64072,"byte_end":64079,"line_start":123,"line_end":123,"column_start":5,"column_end":12}},{"value":"/ use parking_lot::Once;","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/once.rs","byte_start":64084,"byte_end":64110,"line_start":124,"line_end":124,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/once.rs","byte_start":64115,"byte_end":64118,"line_start":125,"line_end":125,"column_start":5,"column_end":8}},{"value":"/ static mut VAL: usize = 0;","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/once.rs","byte_start":64123,"byte_end":64153,"line_start":126,"line_end":126,"column_start":5,"column_end":35}},{"value":"/ static INIT: Once = Once::new();","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/once.rs","byte_start":64158,"byte_end":64194,"line_start":127,"line_end":127,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/once.rs","byte_start":64199,"byte_end":64202,"line_start":128,"line_end":128,"column_start":5,"column_end":8}},{"value":"/ // Accessing a `static mut` is unsafe much of the time, but if we do so","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/once.rs","byte_start":64207,"byte_end":64282,"line_start":129,"line_end":129,"column_start":5,"column_end":80}},{"value":"/ // in a synchronized fashion (e.g. write once or read all) then we're","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/once.rs","byte_start":64287,"byte_end":64360,"line_start":130,"line_end":130,"column_start":5,"column_end":78}},{"value":"/ // good to go!","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/once.rs","byte_start":64365,"byte_end":64383,"line_start":131,"line_end":131,"column_start":5,"column_end":23}},{"value":"/ //","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/once.rs","byte_start":64388,"byte_end":64394,"line_start":132,"line_end":132,"column_start":5,"column_end":11}},{"value":"/ // This function will only call `expensive_computation` once, and will","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/once.rs","byte_start":64399,"byte_end":64473,"line_start":133,"line_end":133,"column_start":5,"column_end":79}},{"value":"/ // otherwise always return the value returned from the first invocation.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/once.rs","byte_start":64478,"byte_end":64554,"line_start":134,"line_end":134,"column_start":5,"column_end":81}},{"value":"/ fn get_cached_val() -> usize {","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/once.rs","byte_start":64559,"byte_end":64593,"line_start":135,"line_end":135,"column_start":5,"column_end":39}},{"value":"/     unsafe {","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/once.rs","byte_start":64598,"byte_end":64614,"line_start":136,"line_end":136,"column_start":5,"column_end":21}},{"value":"/         INIT.call_once(|| {","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/once.rs","byte_start":64619,"byte_end":64650,"line_start":137,"line_end":137,"column_start":5,"column_end":36}},{"value":"/             VAL = expensive_computation();","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/once.rs","byte_start":64655,"byte_end":64701,"line_start":138,"line_end":138,"column_start":5,"column_end":51}},{"value":"/         });","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/once.rs","byte_start":64706,"byte_end":64721,"line_start":139,"line_end":139,"column_start":5,"column_end":20}},{"value":"/         VAL","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/once.rs","byte_start":64726,"byte_end":64741,"line_start":140,"line_end":140,"column_start":5,"column_end":20}},{"value":"/     }","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/once.rs","byte_start":64746,"byte_end":64755,"line_start":141,"line_end":141,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/once.rs","byte_start":64760,"byte_end":64765,"line_start":142,"line_end":142,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/once.rs","byte_start":64770,"byte_end":64773,"line_start":143,"line_end":143,"column_start":5,"column_end":8}},{"value":"/ fn expensive_computation() -> usize {","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/once.rs","byte_start":64778,"byte_end":64819,"line_start":144,"line_end":144,"column_start":5,"column_end":46}},{"value":"/     // ...","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/once.rs","byte_start":64824,"byte_end":64838,"line_start":145,"line_end":145,"column_start":5,"column_end":19}},{"value":"/ # 2","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/once.rs","byte_start":64843,"byte_end":64850,"line_start":146,"line_end":146,"column_start":5,"column_end":12}},{"value":"/ }","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/once.rs","byte_start":64855,"byte_end":64860,"line_start":147,"line_end":147,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/once.rs","byte_start":64865,"byte_end":64872,"line_start":148,"line_end":148,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/once.rs","byte_start":64877,"byte_end":64880,"line_start":149,"line_end":149,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/once.rs","byte_start":64885,"byte_end":64897,"line_start":150,"line_end":150,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/once.rs","byte_start":64902,"byte_end":64905,"line_start":151,"line_end":151,"column_start":5,"column_end":8}},{"value":"/ The closure `f` will only be executed once if this is called","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/once.rs","byte_start":64910,"byte_end":64974,"line_start":152,"line_end":152,"column_start":5,"column_end":69}},{"value":"/ concurrently amongst many threads. If that closure panics, however, then","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/once.rs","byte_start":64979,"byte_end":65055,"line_start":153,"line_end":153,"column_start":5,"column_end":81}},{"value":"/ it will *poison* this `Once` instance, causing all future invocations of","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/once.rs","byte_start":65060,"byte_end":65136,"line_start":154,"line_end":154,"column_start":5,"column_end":81}},{"value":"/ `call_once` to also panic.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/once.rs","byte_start":65141,"byte_end":65171,"line_start":155,"line_end":155,"column_start":5,"column_end":35}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/once.rs","byte_start":65176,"byte_end":65185,"line_start":156,"line_end":156,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":188},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/once.rs","byte_start":65957,"byte_end":65972,"line_start":179,"line_end":179,"column_start":12,"column_end":27},"name":"call_once_force","qualname":"<Once>::call_once_force","value":"pub fn call_once_force<F>(&Self, F) where F: FnOnce(OnceState) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Performs the same function as `call_once` except ignores poisoning.","sig":null,"attributes":[{"value":"/ Performs the same function as `call_once` except ignores poisoning.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/once.rs","byte_start":65474,"byte_end":65545,"line_start":169,"line_end":169,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/once.rs","byte_start":65550,"byte_end":65553,"line_start":170,"line_end":170,"column_start":5,"column_end":8}},{"value":"/ If this `Once` has been poisoned (some initialization panicked) then","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/once.rs","byte_start":65558,"byte_end":65630,"line_start":171,"line_end":171,"column_start":5,"column_end":77}},{"value":"/ this function will continue to attempt to call initialization functions","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/once.rs","byte_start":65635,"byte_end":65710,"line_start":172,"line_end":172,"column_start":5,"column_end":80}},{"value":"/ until one of them doesn't panic.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/once.rs","byte_start":65715,"byte_end":65751,"line_start":173,"line_end":173,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/once.rs","byte_start":65756,"byte_end":65759,"line_start":174,"line_end":174,"column_start":5,"column_end":8}},{"value":"/ The closure `f` is yielded a structure which can be used to query the","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/once.rs","byte_start":65764,"byte_end":65837,"line_start":175,"line_end":175,"column_start":5,"column_end":78}},{"value":"/ state of this `Once` (whether initialization has previously panicked or","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/once.rs","byte_start":65842,"byte_end":65917,"line_start":176,"line_end":176,"column_start":5,"column_end":80}},{"value":"/ not).","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/once.rs","byte_start":65922,"byte_end":65931,"line_start":177,"line_end":177,"column_start":5,"column_end":14}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/once.rs","byte_start":65936,"byte_end":65945,"line_start":178,"line_end":178,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":213},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/raw_fair_mutex.rs","byte_start":74771,"byte_end":74783,"line_start":12,"line_end":12,"column_start":12,"column_end":24},"name":"RawFairMutex","qualname":"::raw_fair_mutex::RawFairMutex","value":"","parent":null,"children":[],"decl_id":null,"docs":" Raw fair mutex type backed by the parking lot.\n","sig":null,"attributes":[{"value":"/ Raw fair mutex type backed by the parking lot.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/raw_fair_mutex.rs","byte_start":74709,"byte_end":74759,"line_start":11,"line_end":11,"column_start":1,"column_end":51}}]},{"kind":"Struct","id":{"krate":0,"index":279},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/raw_mutex.rs","byte_start":77325,"byte_end":77333,"line_start":32,"line_end":32,"column_start":12,"column_end":20},"name":"RawMutex","qualname":"::raw_mutex::RawMutex","value":"RawMutex {  }","parent":null,"children":[{"krate":0,"index":280}],"decl_id":null,"docs":" Raw mutex type backed by the parking lot.\n","sig":null,"attributes":[{"value":"/ Raw mutex type backed by the parking lot.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/raw_mutex.rs","byte_start":77268,"byte_end":77313,"line_start":31,"line_end":31,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":382},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/raw_rwlock.rs","byte_start":90316,"byte_end":90325,"line_start":56,"line_end":56,"column_start":12,"column_end":21},"name":"RawRwLock","qualname":"::raw_rwlock::RawRwLock","value":"RawRwLock {  }","parent":null,"children":[{"krate":0,"index":383}],"decl_id":null,"docs":" Raw reader-writer lock type backed by the parking lot.\n","sig":null,"attributes":[{"value":"/ Raw reader-writer lock type backed by the parking lot.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/raw_rwlock.rs","byte_start":90246,"byte_end":90304,"line_start":55,"line_end":55,"column_start":1,"column_end":59}}]},{"kind":"Struct","id":{"krate":0,"index":487},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/remutex.rs","byte_start":126295,"byte_end":126306,"line_start":13,"line_end":13,"column_start":12,"column_end":23},"name":"RawThreadId","qualname":"::remutex::RawThreadId","value":"","parent":null,"children":[],"decl_id":null,"docs":" Implementation of the `GetThreadId` trait for `lock_api::ReentrantMutex`.\n","sig":null,"attributes":[{"value":"/ Implementation of the `GetThreadId` trait for `lock_api::ReentrantMutex`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/remutex.rs","byte_start":126206,"byte_end":126283,"line_start":12,"line_end":12,"column_start":1,"column_end":78}}]},{"kind":"Type","id":{"krate":0,"index":493},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/remutex.rs","byte_start":127377,"byte_end":127391,"line_start":41,"line_end":41,"column_start":10,"column_end":24},"name":"ReentrantMutex","qualname":"::remutex::ReentrantMutex","value":"lock_api::ReentrantMutex<RawMutex, RawThreadId, T>","parent":null,"children":[],"decl_id":null,"docs":" A mutex which can be recursively locked by a single thread.","sig":null,"attributes":[{"value":"/ A mutex which can be recursively locked by a single thread.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/remutex.rs","byte_start":126906,"byte_end":126969,"line_start":30,"line_end":30,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/remutex.rs","byte_start":126970,"byte_end":126973,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ This type is identical to `Mutex` except for the following points:","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/remutex.rs","byte_start":126974,"byte_end":127044,"line_start":32,"line_end":32,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/remutex.rs","byte_start":127045,"byte_end":127048,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ - Locking multiple times from the same thread will work correctly instead of","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/remutex.rs","byte_start":127049,"byte_end":127129,"line_start":34,"line_end":34,"column_start":1,"column_end":81}},{"value":"/   deadlocking.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/remutex.rs","byte_start":127130,"byte_end":127148,"line_start":35,"line_end":35,"column_start":1,"column_end":19}},{"value":"/ - `ReentrantMutexGuard` does not give mutable references to the locked data.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/remutex.rs","byte_start":127149,"byte_end":127229,"line_start":36,"line_end":36,"column_start":1,"column_end":81}},{"value":"/   Use a `RefCell` if you need this.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/remutex.rs","byte_start":127230,"byte_end":127269,"line_start":37,"line_end":37,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/remutex.rs","byte_start":127270,"byte_end":127273,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ See [`Mutex`](type.Mutex.html) for more details about the underlying mutex","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/remutex.rs","byte_start":127274,"byte_end":127352,"line_start":39,"line_end":39,"column_start":1,"column_end":79}},{"value":"/ primitive.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/remutex.rs","byte_start":127353,"byte_end":127367,"line_start":40,"line_end":40,"column_start":1,"column_end":15}}]},{"kind":"Function","id":{"krate":0,"index":495},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/remutex.rs","byte_start":127618,"byte_end":127639,"line_start":46,"line_end":46,"column_start":14,"column_end":35},"name":"const_reentrant_mutex","qualname":"::remutex::const_reentrant_mutex","value":"pub const fn const_reentrant_mutex<T>(T) -> ReentrantMutex<T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new reentrant mutex in an unlocked state ready for use.","sig":null,"attributes":[{"value":"/ Creates a new reentrant mutex in an unlocked state ready for use.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/remutex.rs","byte_start":127450,"byte_end":127519,"line_start":43,"line_end":43,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/remutex.rs","byte_start":127520,"byte_end":127523,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ This allows creating a reentrant mutex in a constant context on stable Rust.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/remutex.rs","byte_start":127524,"byte_end":127604,"line_start":45,"line_end":45,"column_start":1,"column_end":81}}]},{"kind":"Type","id":{"krate":0,"index":497},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/remutex.rs","byte_start":128101,"byte_end":128120,"line_start":59,"line_end":59,"column_start":10,"column_end":29},"name":"ReentrantMutexGuard","qualname":"::remutex::ReentrantMutexGuard","value":"lock_api::ReentrantMutexGuard","parent":null,"children":[],"decl_id":null,"docs":" An RAII implementation of a \"scoped lock\" of a reentrant mutex. When this structure\n is dropped (falls out of scope), the lock will be unlocked.","sig":null,"attributes":[{"value":"/ An RAII implementation of a \"scoped lock\" of a reentrant mutex. When this structure","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/remutex.rs","byte_start":127829,"byte_end":127916,"line_start":54,"line_end":54,"column_start":1,"column_end":88}},{"value":"/ is dropped (falls out of scope), the lock will be unlocked.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/remutex.rs","byte_start":127917,"byte_end":127980,"line_start":55,"line_end":55,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/remutex.rs","byte_start":127981,"byte_end":127984,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ The data protected by the mutex can be accessed through this guard via its","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/remutex.rs","byte_start":127985,"byte_end":128063,"line_start":57,"line_end":57,"column_start":1,"column_end":79}},{"value":"/ `Deref` implementation.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/remutex.rs","byte_start":128064,"byte_end":128091,"line_start":58,"line_end":58,"column_start":1,"column_end":28}}]},{"kind":"Type","id":{"krate":0,"index":500},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/remutex.rs","byte_start":128593,"byte_end":128618,"line_start":68,"line_end":68,"column_start":10,"column_end":35},"name":"MappedReentrantMutexGuard","qualname":"::remutex::MappedReentrantMutexGuard","value":"lock_api::MappedReentrantMutexGuard","parent":null,"children":[],"decl_id":null,"docs":" An RAII mutex guard returned by `ReentrantMutexGuard::map`, which can point to a\n subfield of the protected data.","sig":null,"attributes":[{"value":"/ An RAII mutex guard returned by `ReentrantMutexGuard::map`, which can point to a","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/remutex.rs","byte_start":128192,"byte_end":128276,"line_start":61,"line_end":61,"column_start":1,"column_end":85}},{"value":"/ subfield of the protected data.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/remutex.rs","byte_start":128277,"byte_end":128312,"line_start":62,"line_end":62,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/remutex.rs","byte_start":128313,"byte_end":128316,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ The main difference between `MappedReentrantMutexGuard` and `ReentrantMutexGuard` is that the","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/remutex.rs","byte_start":128317,"byte_end":128414,"line_start":64,"line_end":64,"column_start":1,"column_end":98}},{"value":"/ former doesn't support temporarily unlocking and re-locking, since that","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/remutex.rs","byte_start":128415,"byte_end":128490,"line_start":65,"line_end":65,"column_start":1,"column_end":76}},{"value":"/ could introduce soundness issues if the locked object is modified by another","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/remutex.rs","byte_start":128491,"byte_end":128571,"line_start":66,"line_end":66,"column_start":1,"column_end":81}},{"value":"/ thread.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/remutex.rs","byte_start":128572,"byte_end":128583,"line_start":67,"line_end":67,"column_start":1,"column_end":12}}]},{"kind":"Type","id":{"krate":0,"index":510},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/rwlock.rs","byte_start":134675,"byte_end":134681,"line_start":89,"line_end":89,"column_start":10,"column_end":16},"name":"RwLock","qualname":"::rwlock::RwLock","value":"lock_api::RwLock<RawRwLock, T>","parent":null,"children":[],"decl_id":null,"docs":" A reader-writer lock","sig":null,"attributes":[{"value":"/ A reader-writer lock","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/rwlock.rs","byte_start":131116,"byte_end":131140,"line_start":11,"line_end":11,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/rwlock.rs","byte_start":131141,"byte_end":131144,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ This type of lock allows a number of readers or at most one writer at any","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/rwlock.rs","byte_start":131145,"byte_end":131222,"line_start":13,"line_end":13,"column_start":1,"column_end":78}},{"value":"/ point in time. The write portion of this lock typically allows modification","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/rwlock.rs","byte_start":131223,"byte_end":131302,"line_start":14,"line_end":14,"column_start":1,"column_end":80}},{"value":"/ of the underlying data (exclusive access) and the read portion of this lock","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/rwlock.rs","byte_start":131303,"byte_end":131382,"line_start":15,"line_end":15,"column_start":1,"column_end":80}},{"value":"/ typically allows for read-only access (shared access).","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/rwlock.rs","byte_start":131383,"byte_end":131441,"line_start":16,"line_end":16,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/rwlock.rs","byte_start":131442,"byte_end":131445,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ This lock uses a task-fair locking policy which avoids both reader and","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/rwlock.rs","byte_start":131446,"byte_end":131520,"line_start":18,"line_end":18,"column_start":1,"column_end":75}},{"value":"/ writer starvation. This means that readers trying to acquire the lock will","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/rwlock.rs","byte_start":131521,"byte_end":131599,"line_start":19,"line_end":19,"column_start":1,"column_end":79}},{"value":"/ block even if the lock is unlocked when there are writers waiting to acquire","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/rwlock.rs","byte_start":131600,"byte_end":131680,"line_start":20,"line_end":20,"column_start":1,"column_end":81}},{"value":"/ the lock. Because of this, attempts to recursively acquire a read lock","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/rwlock.rs","byte_start":131681,"byte_end":131755,"line_start":21,"line_end":21,"column_start":1,"column_end":75}},{"value":"/ within a single thread may result in a deadlock.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/rwlock.rs","byte_start":131756,"byte_end":131808,"line_start":22,"line_end":22,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/rwlock.rs","byte_start":131809,"byte_end":131812,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ The type parameter `T` represents the data that this lock protects. It is","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/rwlock.rs","byte_start":131813,"byte_end":131890,"line_start":24,"line_end":24,"column_start":1,"column_end":78}},{"value":"/ required that `T` satisfies `Send` to be shared across threads and `Sync` to","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/rwlock.rs","byte_start":131891,"byte_end":131971,"line_start":25,"line_end":25,"column_start":1,"column_end":81}},{"value":"/ allow concurrent access through readers. The RAII guards returned from the","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/rwlock.rs","byte_start":131972,"byte_end":132050,"line_start":26,"line_end":26,"column_start":1,"column_end":79}},{"value":"/ locking methods implement `Deref` (and `DerefMut` for the `write` methods)","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/rwlock.rs","byte_start":132051,"byte_end":132129,"line_start":27,"line_end":27,"column_start":1,"column_end":79}},{"value":"/ to allow access to the contained of the lock.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/rwlock.rs","byte_start":132130,"byte_end":132179,"line_start":28,"line_end":28,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/rwlock.rs","byte_start":132180,"byte_end":132183,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ # Fairness","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/rwlock.rs","byte_start":132184,"byte_end":132198,"line_start":30,"line_end":30,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/rwlock.rs","byte_start":132199,"byte_end":132202,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ A typical unfair lock can often end up in a situation where a single thread","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/rwlock.rs","byte_start":132203,"byte_end":132282,"line_start":32,"line_end":32,"column_start":1,"column_end":80}},{"value":"/ quickly acquires and releases the same lock in succession, which can starve","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/rwlock.rs","byte_start":132283,"byte_end":132362,"line_start":33,"line_end":33,"column_start":1,"column_end":80}},{"value":"/ other threads waiting to acquire the rwlock. While this improves throughput","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/rwlock.rs","byte_start":132363,"byte_end":132442,"line_start":34,"line_end":34,"column_start":1,"column_end":80}},{"value":"/ because it doesn't force a context switch when a thread tries to re-acquire","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/rwlock.rs","byte_start":132443,"byte_end":132522,"line_start":35,"line_end":35,"column_start":1,"column_end":80}},{"value":"/ a rwlock it has just released, this can starve other threads.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/rwlock.rs","byte_start":132523,"byte_end":132588,"line_start":36,"line_end":36,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/rwlock.rs","byte_start":132589,"byte_end":132592,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ This rwlock uses [eventual fairness](https://trac.webkit.org/changeset/203350)","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/rwlock.rs","byte_start":132593,"byte_end":132675,"line_start":38,"line_end":38,"column_start":1,"column_end":83}},{"value":"/ to ensure that the lock will be fair on average without sacrificing","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/rwlock.rs","byte_start":132676,"byte_end":132747,"line_start":39,"line_end":39,"column_start":1,"column_end":72}},{"value":"/ throughput. This is done by forcing a fair unlock on average every 0.5ms,","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/rwlock.rs","byte_start":132748,"byte_end":132825,"line_start":40,"line_end":40,"column_start":1,"column_end":78}},{"value":"/ which will force the lock to go to the next thread waiting for the rwlock.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/rwlock.rs","byte_start":132826,"byte_end":132904,"line_start":41,"line_end":41,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/rwlock.rs","byte_start":132905,"byte_end":132908,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ Additionally, any critical section longer than 1ms will always use a fair","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/rwlock.rs","byte_start":132909,"byte_end":132986,"line_start":43,"line_end":43,"column_start":1,"column_end":78}},{"value":"/ unlock, which has a negligible impact on throughput considering the length","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/rwlock.rs","byte_start":132987,"byte_end":133065,"line_start":44,"line_end":44,"column_start":1,"column_end":79}},{"value":"/ of the critical section.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/rwlock.rs","byte_start":133066,"byte_end":133094,"line_start":45,"line_end":45,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/rwlock.rs","byte_start":133095,"byte_end":133098,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ You can also force a fair unlock by calling `RwLockReadGuard::unlock_fair`","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/rwlock.rs","byte_start":133099,"byte_end":133177,"line_start":47,"line_end":47,"column_start":1,"column_end":79}},{"value":"/ or `RwLockWriteGuard::unlock_fair` when unlocking a mutex instead of simply","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/rwlock.rs","byte_start":133178,"byte_end":133257,"line_start":48,"line_end":48,"column_start":1,"column_end":80}},{"value":"/ dropping the guard.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/rwlock.rs","byte_start":133258,"byte_end":133281,"line_start":49,"line_end":49,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/rwlock.rs","byte_start":133282,"byte_end":133285,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ # Differences from the standard library `RwLock`","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/rwlock.rs","byte_start":133286,"byte_end":133338,"line_start":51,"line_end":51,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/rwlock.rs","byte_start":133339,"byte_end":133342,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ - Supports atomically downgrading a write lock into a read lock.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/rwlock.rs","byte_start":133343,"byte_end":133411,"line_start":53,"line_end":53,"column_start":1,"column_end":69}},{"value":"/ - Task-fair locking policy instead of an unspecified platform default.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/rwlock.rs","byte_start":133412,"byte_end":133486,"line_start":54,"line_end":54,"column_start":1,"column_end":75}},{"value":"/ - No poisoning, the lock is released normally on panic.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/rwlock.rs","byte_start":133487,"byte_end":133546,"line_start":55,"line_end":55,"column_start":1,"column_end":60}},{"value":"/ - Only requires 1 word of space, whereas the standard library boxes the","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/rwlock.rs","byte_start":133547,"byte_end":133622,"line_start":56,"line_end":56,"column_start":1,"column_end":76}},{"value":"/   `RwLock` due to platform limitations.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/rwlock.rs","byte_start":133623,"byte_end":133666,"line_start":57,"line_end":57,"column_start":1,"column_end":44}},{"value":"/ - Can be statically constructed (requires the `const_fn` nightly feature).","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/rwlock.rs","byte_start":133667,"byte_end":133745,"line_start":58,"line_end":58,"column_start":1,"column_end":79}},{"value":"/ - Does not require any drop glue when dropped.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/rwlock.rs","byte_start":133746,"byte_end":133796,"line_start":59,"line_end":59,"column_start":1,"column_end":51}},{"value":"/ - Inline fast path for the uncontended case.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/rwlock.rs","byte_start":133797,"byte_end":133845,"line_start":60,"line_end":60,"column_start":1,"column_end":49}},{"value":"/ - Efficient handling of micro-contention using adaptive spinning.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/rwlock.rs","byte_start":133846,"byte_end":133915,"line_start":61,"line_end":61,"column_start":1,"column_end":70}},{"value":"/ - Allows raw locking & unlocking without a guard.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/rwlock.rs","byte_start":133916,"byte_end":133969,"line_start":62,"line_end":62,"column_start":1,"column_end":54}},{"value":"/ - Supports eventual fairness so that the rwlock is fair on average.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/rwlock.rs","byte_start":133970,"byte_end":134041,"line_start":63,"line_end":63,"column_start":1,"column_end":72}},{"value":"/ - Optionally allows making the rwlock fair by calling","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/rwlock.rs","byte_start":134042,"byte_end":134099,"line_start":64,"line_end":64,"column_start":1,"column_end":58}},{"value":"/   `RwLockReadGuard::unlock_fair` and `RwLockWriteGuard::unlock_fair`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/rwlock.rs","byte_start":134100,"byte_end":134173,"line_start":65,"line_end":65,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/rwlock.rs","byte_start":134174,"byte_end":134177,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/rwlock.rs","byte_start":134178,"byte_end":134192,"line_start":67,"line_end":67,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/rwlock.rs","byte_start":134193,"byte_end":134196,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/rwlock.rs","byte_start":134197,"byte_end":134204,"line_start":69,"line_end":69,"column_start":1,"column_end":8}},{"value":"/ use parking_lot::RwLock;","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/rwlock.rs","byte_start":134205,"byte_end":134233,"line_start":70,"line_end":70,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/rwlock.rs","byte_start":134234,"byte_end":134237,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/ let lock = RwLock::new(5);","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/rwlock.rs","byte_start":134238,"byte_end":134268,"line_start":72,"line_end":72,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/rwlock.rs","byte_start":134269,"byte_end":134272,"line_start":73,"line_end":73,"column_start":1,"column_end":4}},{"value":"/ // many reader locks can be held at once","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/rwlock.rs","byte_start":134273,"byte_end":134317,"line_start":74,"line_end":74,"column_start":1,"column_end":45}},{"value":"/ {","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/rwlock.rs","byte_start":134318,"byte_end":134323,"line_start":75,"line_end":75,"column_start":1,"column_end":6}},{"value":"/     let r1 = lock.read();","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/rwlock.rs","byte_start":134324,"byte_end":134353,"line_start":76,"line_end":76,"column_start":1,"column_end":30}},{"value":"/     let r2 = lock.read();","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/rwlock.rs","byte_start":134354,"byte_end":134383,"line_start":77,"line_end":77,"column_start":1,"column_end":30}},{"value":"/     assert_eq!(*r1, 5);","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/rwlock.rs","byte_start":134384,"byte_end":134411,"line_start":78,"line_end":78,"column_start":1,"column_end":28}},{"value":"/     assert_eq!(*r2, 5);","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/rwlock.rs","byte_start":134412,"byte_end":134439,"line_start":79,"line_end":79,"column_start":1,"column_end":28}},{"value":"/ } // read locks are dropped at this point","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/rwlock.rs","byte_start":134440,"byte_end":134485,"line_start":80,"line_end":80,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/rwlock.rs","byte_start":134486,"byte_end":134489,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ // only one write lock may be held, however","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/rwlock.rs","byte_start":134490,"byte_end":134537,"line_start":82,"line_end":82,"column_start":1,"column_end":48}},{"value":"/ {","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/rwlock.rs","byte_start":134538,"byte_end":134543,"line_start":83,"line_end":83,"column_start":1,"column_end":6}},{"value":"/     let mut w = lock.write();","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/rwlock.rs","byte_start":134544,"byte_end":134577,"line_start":84,"line_end":84,"column_start":1,"column_end":34}},{"value":"/     *w += 1;","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/rwlock.rs","byte_start":134578,"byte_end":134594,"line_start":85,"line_end":85,"column_start":1,"column_end":17}},{"value":"/     assert_eq!(*w, 6);","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/rwlock.rs","byte_start":134595,"byte_end":134621,"line_start":86,"line_end":86,"column_start":1,"column_end":27}},{"value":"/ } // write lock is dropped here","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/rwlock.rs","byte_start":134622,"byte_end":134657,"line_start":87,"line_end":87,"column_start":1,"column_end":36}},{"value":"/ ```","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/rwlock.rs","byte_start":134658,"byte_end":134665,"line_start":88,"line_end":88,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":512},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/rwlock.rs","byte_start":134878,"byte_end":134890,"line_start":94,"line_end":94,"column_start":14,"column_end":26},"name":"const_rwlock","qualname":"::rwlock::const_rwlock","value":"pub const fn const_rwlock<T>(T) -> RwLock<T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new instance of an `RwLock<T>` which is unlocked.","sig":null,"attributes":[{"value":"/ Creates a new instance of an `RwLock<T>` which is unlocked.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/rwlock.rs","byte_start":134720,"byte_end":134783,"line_start":91,"line_end":91,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/rwlock.rs","byte_start":134784,"byte_end":134787,"line_start":92,"line_end":92,"column_start":1,"column_end":4}},{"value":"/ This allows creating a `RwLock<T>` in a constant context on stable Rust.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/rwlock.rs","byte_start":134788,"byte_end":134864,"line_start":93,"line_end":93,"column_start":1,"column_end":77}}]},{"kind":"Type","id":{"krate":0,"index":514},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/rwlock.rs","byte_start":135084,"byte_end":135099,"line_start":100,"line_end":100,"column_start":10,"column_end":25},"name":"RwLockReadGuard","qualname":"::rwlock::RwLockReadGuard","value":"lock_api::RwLockReadGuard","parent":null,"children":[],"decl_id":null,"docs":" RAII structure used to release the shared read access of a lock when\n dropped.\n","sig":null,"attributes":[{"value":"/ RAII structure used to release the shared read access of a lock when","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/rwlock.rs","byte_start":134989,"byte_end":135061,"line_start":98,"line_end":98,"column_start":1,"column_end":73}},{"value":"/ dropped.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/rwlock.rs","byte_start":135062,"byte_end":135074,"line_start":99,"line_end":99,"column_start":1,"column_end":13}}]},{"kind":"Type","id":{"krate":0,"index":517},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/rwlock.rs","byte_start":135254,"byte_end":135270,"line_start":104,"line_end":104,"column_start":10,"column_end":26},"name":"RwLockWriteGuard","qualname":"::rwlock::RwLockWriteGuard","value":"lock_api::RwLockWriteGuard","parent":null,"children":[],"decl_id":null,"docs":" RAII structure used to release the exclusive write access of a lock when\n dropped.\n","sig":null,"attributes":[{"value":"/ RAII structure used to release the exclusive write access of a lock when","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/rwlock.rs","byte_start":135155,"byte_end":135231,"line_start":102,"line_end":102,"column_start":1,"column_end":77}},{"value":"/ dropped.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/rwlock.rs","byte_start":135232,"byte_end":135244,"line_start":103,"line_end":103,"column_start":1,"column_end":13}}]},{"kind":"Type","id":{"krate":0,"index":520},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/rwlock.rs","byte_start":135720,"byte_end":135741,"line_start":113,"line_end":113,"column_start":10,"column_end":31},"name":"MappedRwLockReadGuard","qualname":"::rwlock::MappedRwLockReadGuard","value":"lock_api::MappedRwLockReadGuard","parent":null,"children":[],"decl_id":null,"docs":" An RAII read lock guard returned by `RwLockReadGuard::map`, which can point to a\n subfield of the protected data.","sig":null,"attributes":[{"value":"/ An RAII read lock guard returned by `RwLockReadGuard::map`, which can point to a","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/rwlock.rs","byte_start":135327,"byte_end":135411,"line_start":106,"line_end":106,"column_start":1,"column_end":85}},{"value":"/ subfield of the protected data.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/rwlock.rs","byte_start":135412,"byte_end":135447,"line_start":107,"line_end":107,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/rwlock.rs","byte_start":135448,"byte_end":135451,"line_start":108,"line_end":108,"column_start":1,"column_end":4}},{"value":"/ The main difference between `MappedRwLockReadGuard` and `RwLockReadGuard` is that the","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/rwlock.rs","byte_start":135452,"byte_end":135541,"line_start":109,"line_end":109,"column_start":1,"column_end":90}},{"value":"/ former doesn't support temporarily unlocking and re-locking, since that","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/rwlock.rs","byte_start":135542,"byte_end":135617,"line_start":110,"line_end":110,"column_start":1,"column_end":76}},{"value":"/ could introduce soundness issues if the locked object is modified by another","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/rwlock.rs","byte_start":135618,"byte_end":135698,"line_start":111,"line_end":111,"column_start":1,"column_end":81}},{"value":"/ thread.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/rwlock.rs","byte_start":135699,"byte_end":135710,"line_start":112,"line_end":112,"column_start":1,"column_end":12}}]},{"kind":"Type","id":{"krate":0,"index":523},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/rwlock.rs","byte_start":136200,"byte_end":136222,"line_start":122,"line_end":122,"column_start":10,"column_end":32},"name":"MappedRwLockWriteGuard","qualname":"::rwlock::MappedRwLockWriteGuard","value":"lock_api::MappedRwLockWriteGuard","parent":null,"children":[],"decl_id":null,"docs":" An RAII write lock guard returned by `RwLockWriteGuard::map`, which can point to a\n subfield of the protected data.","sig":null,"attributes":[{"value":"/ An RAII write lock guard returned by `RwLockWriteGuard::map`, which can point to a","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/rwlock.rs","byte_start":135803,"byte_end":135889,"line_start":115,"line_end":115,"column_start":1,"column_end":87}},{"value":"/ subfield of the protected data.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/rwlock.rs","byte_start":135890,"byte_end":135925,"line_start":116,"line_end":116,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/rwlock.rs","byte_start":135926,"byte_end":135929,"line_start":117,"line_end":117,"column_start":1,"column_end":4}},{"value":"/ The main difference between `MappedRwLockWriteGuard` and `RwLockWriteGuard` is that the","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/rwlock.rs","byte_start":135930,"byte_end":136021,"line_start":118,"line_end":118,"column_start":1,"column_end":92}},{"value":"/ former doesn't support temporarily unlocking and re-locking, since that","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/rwlock.rs","byte_start":136022,"byte_end":136097,"line_start":119,"line_end":119,"column_start":1,"column_end":76}},{"value":"/ could introduce soundness issues if the locked object is modified by another","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/rwlock.rs","byte_start":136098,"byte_end":136178,"line_start":120,"line_end":120,"column_start":1,"column_end":81}},{"value":"/ thread.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/rwlock.rs","byte_start":136179,"byte_end":136190,"line_start":121,"line_end":121,"column_start":1,"column_end":12}}]},{"kind":"Type","id":{"krate":0,"index":526},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/rwlock.rs","byte_start":136384,"byte_end":136409,"line_start":126,"line_end":126,"column_start":10,"column_end":35},"name":"RwLockUpgradableReadGuard","qualname":"::rwlock::RwLockUpgradableReadGuard","value":"lock_api::RwLockUpgradableReadGuard","parent":null,"children":[],"decl_id":null,"docs":" RAII structure used to release the upgradable read access of a lock when\n dropped.\n","sig":null,"attributes":[{"value":"/ RAII structure used to release the upgradable read access of a lock when","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/rwlock.rs","byte_start":136285,"byte_end":136361,"line_start":124,"line_end":124,"column_start":1,"column_end":77}},{"value":"/ dropped.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/rwlock.rs","byte_start":136362,"byte_end":136374,"line_start":125,"line_end":125,"column_start":1,"column_end":13}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":2921,"byte_end":2938,"line_start":25,"line_end":25,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":64}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":5482,"byte_end":5489,"line_start":94,"line_end":94,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":68},{"krate":0,"index":69},{"krate":0,"index":70},{"krate":0,"index":73},{"krate":0,"index":74},{"krate":0,"index":77},{"krate":0,"index":79},{"krate":0,"index":81},{"krate":0,"index":85}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":17921,"byte_end":17928,"line_start":401,"line_end":401,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":88}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":18027,"byte_end":18034,"line_start":408,"line_end":408,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":90}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/elision.rs","byte_start":38700,"byte_end":38711,"line_start":37,"line_end":37,"column_start":27,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":101},{"krate":0,"index":102},{"krate":0,"index":103}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/once.rs","byte_start":61355,"byte_end":61364,"line_start":36,"line_end":36,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":177},{"krate":0,"index":178}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/once.rs","byte_start":62716,"byte_end":62720,"line_start":85,"line_end":85,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":183},{"krate":0,"index":184},{"krate":0,"index":185},{"krate":0,"index":188},{"krate":0,"index":191}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/once.rs","byte_start":69811,"byte_end":69821,"line_start":282,"line_end":282,"column_start":27,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":201}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/once.rs","byte_start":71063,"byte_end":71067,"line_start":318,"line_end":318,"column_start":18,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":203}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/once.rs","byte_start":71160,"byte_end":71164,"line_start":325,"line_end":325,"column_start":21,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":205}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/raw_fair_mutex.rs","byte_start":74831,"byte_end":74843,"line_start":14,"line_end":14,"column_start":36,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":217},{"krate":0,"index":218},{"krate":0,"index":219},{"krate":0,"index":220},{"krate":0,"index":221},{"krate":0,"index":222}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/raw_fair_mutex.rs","byte_start":75340,"byte_end":75352,"line_start":40,"line_end":40,"column_start":40,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":224},{"krate":0,"index":225}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/raw_fair_mutex.rs","byte_start":75553,"byte_end":75565,"line_start":52,"line_end":52,"column_start":41,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":227},{"krate":0,"index":228},{"krate":0,"index":229},{"krate":0,"index":230}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/raw_mutex.rs","byte_start":79156,"byte_end":79164,"line_start":58,"line_end":58,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":282},{"krate":0,"index":283},{"krate":0,"index":284},{"krate":0,"index":285},{"krate":0,"index":286},{"krate":0,"index":287}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/raw_mutex.rs","byte_start":80751,"byte_end":80759,"line_start":119,"line_end":119,"column_start":40,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":289},{"krate":0,"index":290}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/raw_mutex.rs","byte_start":81289,"byte_end":81297,"line_start":141,"line_end":141,"column_start":41,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":292},{"krate":0,"index":293},{"krate":0,"index":294},{"krate":0,"index":295}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Inherent","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/raw_mutex.rs","byte_start":82288,"byte_end":82296,"line_start":180,"line_end":180,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":297},{"krate":0,"index":298},{"krate":0,"index":299},{"krate":0,"index":303},{"krate":0,"index":305}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/raw_rwlock.rs","byte_start":90391,"byte_end":90400,"line_start":60,"line_end":60,"column_start":37,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":385},{"krate":0,"index":386},{"krate":0,"index":387},{"krate":0,"index":388},{"krate":0,"index":389},{"krate":0,"index":390},{"krate":0,"index":391},{"krate":0,"index":392},{"krate":0,"index":393}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/raw_rwlock.rs","byte_start":92655,"byte_end":92664,"line_start":149,"line_end":149,"column_start":41,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":395},{"krate":0,"index":396},{"krate":0,"index":397},{"krate":0,"index":398}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/raw_rwlock.rs","byte_start":93597,"byte_end":93606,"line_start":186,"line_end":186,"column_start":46,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":400}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/raw_rwlock.rs","byte_start":93974,"byte_end":93983,"line_start":200,"line_end":200,"column_start":42,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":402},{"krate":0,"index":403},{"krate":0,"index":404},{"krate":0,"index":405},{"krate":0,"index":406},{"krate":0,"index":407}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/raw_rwlock.rs","byte_start":95650,"byte_end":95659,"line_start":265,"line_end":265,"column_start":46,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":409},{"krate":0,"index":410}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/raw_rwlock.rs","byte_start":96257,"byte_end":96266,"line_start":289,"line_end":289,"column_start":51,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":412},{"krate":0,"index":413}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/raw_rwlock.rs","byte_start":97008,"byte_end":97017,"line_start":317,"line_end":317,"column_start":44,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":415},{"krate":0,"index":416},{"krate":0,"index":417},{"krate":0,"index":418},{"krate":0,"index":419}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/raw_rwlock.rs","byte_start":98920,"byte_end":98929,"line_start":392,"line_end":392,"column_start":48,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":421},{"krate":0,"index":422}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/raw_rwlock.rs","byte_start":99778,"byte_end":99787,"line_start":422,"line_end":422,"column_start":53,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":424},{"krate":0,"index":425}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/raw_rwlock.rs","byte_start":100490,"byte_end":100499,"line_start":447,"line_end":447,"column_start":49,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":427},{"krate":0,"index":428},{"krate":0,"index":429},{"krate":0,"index":430}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Inherent","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/raw_rwlock.rs","byte_start":101917,"byte_end":101926,"line_start":501,"line_end":501,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":432},{"krate":0,"index":433},{"krate":0,"index":434},{"krate":0,"index":435},{"krate":0,"index":436},{"krate":0,"index":438},{"krate":0,"index":440},{"krate":0,"index":442},{"krate":0,"index":444},{"krate":0,"index":446},{"krate":0,"index":448},{"krate":0,"index":449},{"krate":0,"index":450},{"krate":0,"index":452},{"krate":0,"index":454},{"krate":0,"index":455},{"krate":0,"index":456},{"krate":0,"index":457},{"krate":0,"index":461},{"krate":0,"index":466},{"krate":0,"index":471},{"krate":0,"index":472}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/remutex.rs","byte_start":126337,"byte_end":126348,"line_start":15,"line_end":15,"column_start":29,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":490},{"krate":0,"index":491}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/util.rs","byte_start":150101,"byte_end":150107,"line_start":16,"line_end":16,"column_start":35,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":541}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":2921,"byte_end":2938,"line_start":25,"line_end":25,"column_start":6,"column_end":23},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":643},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":5482,"byte_end":5489,"line_start":94,"line_end":94,"column_start":6,"column_end":13},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":65},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":17921,"byte_end":17928,"line_start":401,"line_end":401,"column_start":18,"column_end":25},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":65},"to":{"krate":2,"index":2803}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/condvar.rs","byte_start":18027,"byte_end":18034,"line_start":408,"line_end":408,"column_start":21,"column_end":28},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":65},"to":{"krate":2,"index":8829}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/elision.rs","byte_start":38700,"byte_end":38711,"line_start":37,"line_end":37,"column_start":27,"column_end":38},"kind":{"Impl":{"id":4}},"from":{"krate":2,"index":40304},"to":{"krate":0,"index":95}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/once.rs","byte_start":61355,"byte_end":61364,"line_start":36,"line_end":36,"column_start":6,"column_end":15},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":658},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/once.rs","byte_start":62716,"byte_end":62720,"line_start":85,"line_end":85,"column_start":6,"column_end":10},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":179},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/once.rs","byte_start":69811,"byte_end":69821,"line_start":282,"line_end":282,"column_start":27,"column_end":37},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":195},"to":{"krate":2,"index":3071}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/once.rs","byte_start":71063,"byte_end":71067,"line_start":318,"line_end":318,"column_start":18,"column_end":22},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":179},"to":{"krate":2,"index":2803}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/once.rs","byte_start":71160,"byte_end":71164,"line_start":325,"line_end":325,"column_start":21,"column_end":25},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":179},"to":{"krate":2,"index":8829}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/raw_fair_mutex.rs","byte_start":74831,"byte_end":74843,"line_start":14,"line_end":14,"column_start":36,"column_end":48},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":213},"to":{"krate":27,"index":32}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/raw_fair_mutex.rs","byte_start":75340,"byte_end":75352,"line_start":40,"line_end":40,"column_start":40,"column_end":52},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":213},"to":{"krate":27,"index":39}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/raw_fair_mutex.rs","byte_start":75553,"byte_end":75565,"line_start":52,"line_end":52,"column_start":41,"column_end":53},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":213},"to":{"krate":27,"index":42}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/raw_mutex.rs","byte_start":79156,"byte_end":79164,"line_start":58,"line_end":58,"column_start":36,"column_end":44},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":279},"to":{"krate":27,"index":32}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/raw_mutex.rs","byte_start":80751,"byte_end":80759,"line_start":119,"line_end":119,"column_start":40,"column_end":48},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":279},"to":{"krate":27,"index":39}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/raw_mutex.rs","byte_start":81289,"byte_end":81297,"line_start":141,"line_end":141,"column_start":41,"column_end":49},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":279},"to":{"krate":27,"index":42}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/raw_mutex.rs","byte_start":82288,"byte_end":82296,"line_start":180,"line_end":180,"column_start":6,"column_end":14},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":279},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/raw_rwlock.rs","byte_start":90391,"byte_end":90400,"line_start":60,"line_end":60,"column_start":37,"column_end":46},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":382},"to":{"krate":27,"index":509}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/raw_rwlock.rs","byte_start":92655,"byte_end":92664,"line_start":149,"line_end":149,"column_start":41,"column_end":50},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":382},"to":{"krate":27,"index":519}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/raw_rwlock.rs","byte_start":93597,"byte_end":93606,"line_start":186,"line_end":186,"column_start":46,"column_end":55},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":382},"to":{"krate":27,"index":524}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/raw_rwlock.rs","byte_start":93974,"byte_end":93983,"line_start":200,"line_end":200,"column_start":42,"column_end":51},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":382},"to":{"krate":27,"index":526}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/raw_rwlock.rs","byte_start":95650,"byte_end":95659,"line_start":265,"line_end":265,"column_start":46,"column_end":55},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":382},"to":{"krate":27,"index":533}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/raw_rwlock.rs","byte_start":96257,"byte_end":96266,"line_start":289,"line_end":289,"column_start":51,"column_end":60},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":382},"to":{"krate":27,"index":536}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/raw_rwlock.rs","byte_start":97008,"byte_end":97017,"line_start":317,"line_end":317,"column_start":44,"column_end":53},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":382},"to":{"krate":27,"index":539}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/raw_rwlock.rs","byte_start":98920,"byte_end":98929,"line_start":392,"line_end":392,"column_start":48,"column_end":57},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":382},"to":{"krate":27,"index":545}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/raw_rwlock.rs","byte_start":99778,"byte_end":99787,"line_start":422,"line_end":422,"column_start":53,"column_end":62},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":382},"to":{"krate":27,"index":548}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/raw_rwlock.rs","byte_start":100490,"byte_end":100499,"line_start":447,"line_end":447,"column_start":49,"column_end":58},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":382},"to":{"krate":27,"index":551}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/raw_rwlock.rs","byte_start":101917,"byte_end":101926,"line_start":501,"line_end":501,"column_start":6,"column_end":15},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":382},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/remutex.rs","byte_start":126337,"byte_end":126348,"line_start":15,"line_end":15,"column_start":29,"column_end":40},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":487},"to":{"krate":27,"index":264}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.11.1/src/util.rs","byte_start":150101,"byte_end":150107,"line_start":16,"line_end":16,"column_start":35,"column_end":41},"kind":{"Impl":{"id":29}},"from":{"krate":2,"index":39734},"to":{"krate":0,"index":536}}]}