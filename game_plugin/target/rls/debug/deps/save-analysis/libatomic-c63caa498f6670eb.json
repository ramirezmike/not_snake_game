{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0","program":"/home/mramirez/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","atomic","--edition=2018","/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"default\"","--cfg","feature=\"fallback\"","-C","metadata=c63caa498f6670eb","-C","extra-filename=-c63caa498f6670eb","--out-dir","/home/mramirez/code/projects/games/bug_game/target/rls/debug/deps","-L","dependency=/home/mramirez/code/projects/games/bug_game/target/rls/debug/deps","--cap-lints","allow","--cfg","has_atomic_u8","--cfg","has_atomic_i8","--cfg","has_atomic_u16","--cfg","has_atomic_i16","--cfg","has_atomic_u32","--cfg","has_atomic_i32","--cfg","has_atomic_u64","--cfg","has_atomic_i64","--cfg","has_atomic_u8","--cfg","has_atomic_i8","--cfg","has_atomic_u16","--cfg","has_atomic_i16","--cfg","has_atomic_u32","--cfg","has_atomic_i32","--cfg","has_atomic_u64","--cfg","has_atomic_i64","--error-format=json","--sysroot","/home/mramirez/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu"],"output":"/home/mramirez/code/projects/games/bug_game/target/rls/debug/deps/libatomic-c63caa498f6670eb.rmeta"},"prelude":{"crate_id":{"name":"atomic","disambiguator":[813224607391878716,15409066925392153435]},"crate_root":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src","external_crates":[{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[17044353007700780372,2918200604221815240]}},{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[15333840167806743833,9889193056877993824]}},{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[4550415707075219492,6623162258675921486]}}],"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":333,"byte_end":26690,"line_start":8,"line_end":711,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":1,"index":8464},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":1680,"byte_end":1685,"line_start":42,"line_end":42,"column_start":30,"column_end":35},"alias_span":null,"name":"fence","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":1,"index":39955},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":1687,"byte_end":1695,"line_start":42,"line_end":42,"column_start":37,"column_end":45},"alias_span":null,"name":"Ordering","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":333,"byte_end":26690,"line_start":8,"line_end":711,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":8},{"krate":0,"index":11},{"krate":0,"index":14},{"krate":0,"index":17},{"krate":0,"index":84},{"krate":0,"index":138},{"krate":0,"index":141},{"krate":0,"index":143},{"krate":0,"index":146},{"krate":0,"index":149},{"krate":0,"index":153},{"krate":0,"index":164},{"krate":0,"index":245},{"krate":0,"index":251},{"krate":0,"index":257},{"krate":0,"index":263},{"krate":0,"index":269},{"krate":0,"index":275},{"krate":0,"index":227},{"krate":0,"index":230},{"krate":0,"index":233},{"krate":0,"index":236},{"krate":0,"index":239},{"krate":0,"index":242},{"krate":0,"index":299},{"krate":0,"index":305},{"krate":0,"index":311},{"krate":0,"index":317},{"krate":0,"index":323},{"krate":0,"index":329},{"krate":0,"index":281},{"krate":0,"index":284},{"krate":0,"index":287},{"krate":0,"index":290},{"krate":0,"index":293},{"krate":0,"index":296}],"decl_id":null,"docs":" Generic `Atomic<T>` wrapper type","sig":null,"attributes":[{"value":"/ Generic `Atomic<T>` wrapper type","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":333,"byte_end":369,"line_start":8,"line_end":8,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":370,"byte_end":373,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ Atomic types provide primitive shared-memory communication between","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":374,"byte_end":444,"line_start":10,"line_end":10,"column_start":1,"column_end":71}},{"value":"/ threads, and are the building blocks of other concurrent types.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":445,"byte_end":512,"line_start":11,"line_end":11,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":513,"byte_end":516,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ This library defines a generic atomic wrapper type `Atomic<T>` for all","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":517,"byte_end":591,"line_start":13,"line_end":13,"column_start":1,"column_end":75}},{"value":"/ `T: Copy` types.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":592,"byte_end":612,"line_start":14,"line_end":14,"column_start":1,"column_end":21}},{"value":"/ Atomic types present operations that, when used correctly, synchronize","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":613,"byte_end":687,"line_start":15,"line_end":15,"column_start":1,"column_end":75}},{"value":"/ updates between threads.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":688,"byte_end":716,"line_start":16,"line_end":16,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":717,"byte_end":720,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ Each method takes an `Ordering` which represents the strength of","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":721,"byte_end":789,"line_start":18,"line_end":18,"column_start":1,"column_end":69}},{"value":"/ the memory barrier for that operation. These orderings are the","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":790,"byte_end":856,"line_start":19,"line_end":19,"column_start":1,"column_end":67}},{"value":"/ same as [LLVM atomic orderings][1].","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":857,"byte_end":896,"line_start":20,"line_end":20,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":897,"byte_end":900,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ [1]: http://llvm.org/docs/LangRef.html#memory-model-for-concurrent-operations","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":901,"byte_end":982,"line_start":22,"line_end":22,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":983,"byte_end":986,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ Atomic variables are safe to share between threads (they implement `Sync`)","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":987,"byte_end":1065,"line_start":24,"line_end":24,"column_start":1,"column_end":79}},{"value":"/ but they do not themselves provide the mechanism for sharing. The most","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":1066,"byte_end":1140,"line_start":25,"line_end":25,"column_start":1,"column_end":75}},{"value":"/ common way to share an atomic variable is to put it into an `Arc` (an","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":1141,"byte_end":1214,"line_start":26,"line_end":26,"column_start":1,"column_end":74}},{"value":"/ atomically-reference-counted shared pointer).","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":1215,"byte_end":1264,"line_start":27,"line_end":27,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":1265,"byte_end":1268,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ Most atomic types may be stored in static variables, initialized using","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":1269,"byte_end":1343,"line_start":29,"line_end":29,"column_start":1,"column_end":75}},{"value":"/ the `const fn` constructors (only available on nightly). Atomic statics","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":1344,"byte_end":1419,"line_start":30,"line_end":30,"column_start":1,"column_end":76}},{"value":"/ are often used for lazy global initialization.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":1420,"byte_end":1470,"line_start":31,"line_end":31,"column_start":1,"column_end":51}},{"value":"warn(missing_docs)","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":1472,"byte_end":1494,"line_start":33,"line_end":33,"column_start":1,"column_end":23}},{"value":"warn(rust_2018_idioms)","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":1495,"byte_end":1521,"line_start":34,"line_end":34,"column_start":1,"column_end":27}},{"value":"no_std","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":1522,"byte_end":1532,"line_start":35,"line_end":35,"column_start":1,"column_end":11}}]},{"kind":"Struct","id":{"krate":0,"index":138},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":1982,"byte_end":1988,"line_start":57,"line_end":57,"column_start":12,"column_end":18},"name":"Atomic","qualname":"::Atomic","value":"Atomic {  }","parent":null,"children":[{"krate":0,"index":140}],"decl_id":null,"docs":" A generic atomic wrapper type which allows an object to be safely shared\n between threads.\n","sig":null,"attributes":[{"value":"/ A generic atomic wrapper type which allows an object to be safely shared","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":1852,"byte_end":1928,"line_start":54,"line_end":54,"column_start":1,"column_end":77}},{"value":"/ between threads.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":1929,"byte_end":1949,"line_start":55,"line_end":55,"column_start":1,"column_end":21}},{"value":"repr(transparent)","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":1950,"byte_end":1970,"line_start":56,"line_end":56,"column_start":1,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":151},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":2980,"byte_end":2983,"line_start":91,"line_end":91,"column_start":18,"column_end":21},"name":"new","qualname":"<Atomic<T>>::new","value":"pub const fn new(T) -> Atomic<T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `Atomic`.\n","sig":null,"attributes":[{"value":"/ Creates a new `Atomic`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":2921,"byte_end":2948,"line_start":89,"line_end":89,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":2953,"byte_end":2962,"line_start":90,"line_end":90,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":152},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":3376,"byte_end":3388,"line_start":103,"line_end":103,"column_start":18,"column_end":30},"name":"is_lock_free","qualname":"<Atomic<T>>::is_lock_free","value":"pub const fn is_lock_free() -> bool","parent":null,"children":[],"decl_id":null,"docs":" Checks if `Atomic` objects of this type are lock-free.","sig":null,"attributes":[{"value":"/ Checks if `Atomic` objects of this type are lock-free.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":3078,"byte_end":3136,"line_start":97,"line_end":97,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":3141,"byte_end":3144,"line_start":98,"line_end":98,"column_start":5,"column_end":8}},{"value":"/ If an `Atomic` is not lock-free then it may be implemented using locks","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":3149,"byte_end":3223,"line_start":99,"line_end":99,"column_start":5,"column_end":79}},{"value":"/ internally, which makes it unsuitable for some situations (such as","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":3228,"byte_end":3298,"line_start":100,"line_end":100,"column_start":5,"column_end":75}},{"value":"/ communicating with a signal handler).","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":3303,"byte_end":3344,"line_start":101,"line_end":101,"column_start":5,"column_end":46}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":3349,"byte_end":3358,"line_start":102,"line_end":102,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":155},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":3705,"byte_end":3712,"line_start":114,"line_end":114,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<Atomic<T>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the underlying type.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the underlying type.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":3480,"byte_end":3535,"line_start":109,"line_end":109,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":3540,"byte_end":3543,"line_start":110,"line_end":110,"column_start":5,"column_end":8}},{"value":"/ This is safe because the mutable reference guarantees that no other threads are","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":3548,"byte_end":3631,"line_start":111,"line_end":111,"column_start":5,"column_end":88}},{"value":"/ concurrently accessing the atomic data.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":3636,"byte_end":3679,"line_start":112,"line_end":112,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":3684,"byte_end":3693,"line_start":113,"line_end":113,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":156},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":4013,"byte_end":4023,"line_start":123,"line_end":123,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<Atomic<T>>::into_inner","value":"pub fn into_inner(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Consumes the atomic and returns the contained value.","sig":null,"attributes":[{"value":"/ Consumes the atomic and returns the contained value.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":3785,"byte_end":3841,"line_start":118,"line_end":118,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":3846,"byte_end":3849,"line_start":119,"line_end":119,"column_start":5,"column_end":8}},{"value":"/ This is safe because passing `self` by value guarantees that no other threads are","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":3854,"byte_end":3939,"line_start":120,"line_end":120,"column_start":5,"column_end":90}},{"value":"/ concurrently accessing the atomic data.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":3944,"byte_end":3987,"line_start":121,"line_end":121,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":3992,"byte_end":4001,"line_start":122,"line_end":122,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":157},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":4338,"byte_end":4342,"line_start":136,"line_end":136,"column_start":12,"column_end":16},"name":"load","qualname":"<Atomic<T>>::load","value":"pub fn load(&Self, Ordering) -> T","parent":null,"children":[],"decl_id":null,"docs":" Loads a value from the `Atomic`.","sig":null,"attributes":[{"value":"/ Loads a value from the `Atomic`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":4076,"byte_end":4112,"line_start":127,"line_end":127,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":4117,"byte_end":4120,"line_start":128,"line_end":128,"column_start":5,"column_end":8}},{"value":"/ `load` takes an `Ordering` argument which describes the memory ordering","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":4125,"byte_end":4200,"line_start":129,"line_end":129,"column_start":5,"column_end":80}},{"value":"/ of this operation.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":4205,"byte_end":4227,"line_start":130,"line_end":130,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":4232,"byte_end":4235,"line_start":131,"line_end":131,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":4240,"byte_end":4252,"line_start":132,"line_end":132,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":4257,"byte_end":4260,"line_start":133,"line_end":133,"column_start":5,"column_end":8}},{"value":"/ Panics if `order` is `Release` or `AcqRel`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":4265,"byte_end":4312,"line_start":134,"line_end":134,"column_start":5,"column_end":52}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":4317,"byte_end":4326,"line_start":135,"line_end":135,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":158},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":4706,"byte_end":4711,"line_start":149,"line_end":149,"column_start":12,"column_end":17},"name":"store","qualname":"<Atomic<T>>::store","value":"pub fn store(&Self, T, Ordering)","parent":null,"children":[],"decl_id":null,"docs":" Stores a value into the `Atomic`.","sig":null,"attributes":[{"value":"/ Stores a value into the `Atomic`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":4442,"byte_end":4479,"line_start":140,"line_end":140,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":4484,"byte_end":4487,"line_start":141,"line_end":141,"column_start":5,"column_end":8}},{"value":"/ `store` takes an `Ordering` argument which describes the memory ordering","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":4492,"byte_end":4568,"line_start":142,"line_end":142,"column_start":5,"column_end":81}},{"value":"/ of this operation.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":4573,"byte_end":4595,"line_start":143,"line_end":143,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":4600,"byte_end":4603,"line_start":144,"line_end":144,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":4608,"byte_end":4620,"line_start":145,"line_end":145,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":4625,"byte_end":4628,"line_start":146,"line_end":146,"column_start":5,"column_end":8}},{"value":"/ Panics if `order` is `Acquire` or `AcqRel`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":4633,"byte_end":4680,"line_start":147,"line_end":147,"column_start":5,"column_end":52}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":4685,"byte_end":4694,"line_start":148,"line_end":148,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":159},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":5044,"byte_end":5048,"line_start":160,"line_end":160,"column_start":12,"column_end":16},"name":"swap","qualname":"<Atomic<T>>::swap","value":"pub fn swap(&Self, T, Ordering) -> T","parent":null,"children":[],"decl_id":null,"docs":" Stores a value into the `Atomic`, returning the old value.","sig":null,"attributes":[{"value":"/ Stores a value into the `Atomic`, returning the old value.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":4841,"byte_end":4903,"line_start":155,"line_end":155,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":4908,"byte_end":4911,"line_start":156,"line_end":156,"column_start":5,"column_end":8}},{"value":"/ `swap` takes an `Ordering` argument which describes the memory ordering","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":4916,"byte_end":4991,"line_start":157,"line_end":157,"column_start":5,"column_end":80}},{"value":"/ of this operation.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":4996,"byte_end":5018,"line_start":158,"line_end":158,"column_start":5,"column_end":27}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":5023,"byte_end":5032,"line_start":159,"line_end":159,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":160},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":5891,"byte_end":5907,"line_start":177,"line_end":177,"column_start":12,"column_end":28},"name":"compare_exchange","qualname":"<Atomic<T>>::compare_exchange","value":"pub fn compare_exchange(&Self, T, T, Ordering, Ordering) -> Result<T, T>","parent":null,"children":[],"decl_id":null,"docs":" Stores a value into the `Atomic` if the current value is the same as the\n `current` value.","sig":null,"attributes":[{"value":"/ Stores a value into the `Atomic` if the current value is the same as the","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":5161,"byte_end":5237,"line_start":164,"line_end":164,"column_start":5,"column_end":81}},{"value":"/ `current` value.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":5242,"byte_end":5262,"line_start":165,"line_end":165,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":5267,"byte_end":5270,"line_start":166,"line_end":166,"column_start":5,"column_end":8}},{"value":"/ The return value is a result indicating whether the new value was","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":5275,"byte_end":5344,"line_start":167,"line_end":167,"column_start":5,"column_end":74}},{"value":"/ written and containing the previous value. On success this value is","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":5349,"byte_end":5420,"line_start":168,"line_end":168,"column_start":5,"column_end":76}},{"value":"/ guaranteed to be equal to `new`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":5425,"byte_end":5461,"line_start":169,"line_end":169,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":5466,"byte_end":5469,"line_start":170,"line_end":170,"column_start":5,"column_end":8}},{"value":"/ `compare_exchange` takes two `Ordering` arguments to describe the memory","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":5474,"byte_end":5550,"line_start":171,"line_end":171,"column_start":5,"column_end":81}},{"value":"/ ordering of this operation. The first describes the required ordering if","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":5555,"byte_end":5631,"line_start":172,"line_end":172,"column_start":5,"column_end":81}},{"value":"/ the operation succeeds while the second describes the required ordering","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":5636,"byte_end":5711,"line_start":173,"line_end":173,"column_start":5,"column_end":80}},{"value":"/ when the operation fails. The failure ordering can't be `Acquire` or","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":5716,"byte_end":5788,"line_start":174,"line_end":174,"column_start":5,"column_end":77}},{"value":"/ `AcqRel` and must be equivalent or weaker than the success ordering.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":5793,"byte_end":5865,"line_start":175,"line_end":175,"column_start":5,"column_end":77}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":5870,"byte_end":5879,"line_start":176,"line_end":176,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":161},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":7014,"byte_end":7035,"line_start":202,"line_end":202,"column_start":12,"column_end":33},"name":"compare_exchange_weak","qualname":"<Atomic<T>>::compare_exchange_weak","value":"pub fn compare_exchange_weak(&Self, T, T, Ordering, Ordering) -> Result<T, T>","parent":null,"children":[],"decl_id":null,"docs":" Stores a value into the `Atomic` if the current value is the same as the\n `current` value.","sig":null,"attributes":[{"value":"/ Stores a value into the `Atomic` if the current value is the same as the","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":6143,"byte_end":6219,"line_start":187,"line_end":187,"column_start":5,"column_end":81}},{"value":"/ `current` value.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":6224,"byte_end":6244,"line_start":188,"line_end":188,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":6249,"byte_end":6252,"line_start":189,"line_end":189,"column_start":5,"column_end":8}},{"value":"/ Unlike `compare_exchange`, this function is allowed to spuriously fail","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":6257,"byte_end":6331,"line_start":190,"line_end":190,"column_start":5,"column_end":79}},{"value":"/ even when the comparison succeeds, which can result in more efficient","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":6336,"byte_end":6409,"line_start":191,"line_end":191,"column_start":5,"column_end":78}},{"value":"/ code on some platforms. The return value is a result indicating whether","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":6414,"byte_end":6489,"line_start":192,"line_end":192,"column_start":5,"column_end":80}},{"value":"/ the new value was written and containing the previous value.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":6494,"byte_end":6558,"line_start":193,"line_end":193,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":6563,"byte_end":6566,"line_start":194,"line_end":194,"column_start":5,"column_end":8}},{"value":"/ `compare_exchange` takes two `Ordering` arguments to describe the memory","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":6571,"byte_end":6647,"line_start":195,"line_end":195,"column_start":5,"column_end":81}},{"value":"/ ordering of this operation. The first describes the required ordering if","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":6652,"byte_end":6728,"line_start":196,"line_end":196,"column_start":5,"column_end":81}},{"value":"/ the operation succeeds while the second describes the required ordering","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":6733,"byte_end":6808,"line_start":197,"line_end":197,"column_start":5,"column_end":80}},{"value":"/ when the operation fails. The failure ordering can't be `Acquire` or","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":6813,"byte_end":6885,"line_start":198,"line_end":198,"column_start":5,"column_end":77}},{"value":"/ `AcqRel` and must be equivalent or weaker than the success ordering.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":6890,"byte_end":6962,"line_start":199,"line_end":199,"column_start":5,"column_end":77}},{"value":"/ success ordering.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":6967,"byte_end":6988,"line_start":200,"line_end":200,"column_start":5,"column_end":26}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":6993,"byte_end":7002,"line_start":201,"line_end":201,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":162},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":9283,"byte_end":9295,"line_start":249,"line_end":249,"column_start":12,"column_end":24},"name":"fetch_update","qualname":"<Atomic<T>>::fetch_update","value":"pub fn fetch_update<F>(&Self, Ordering, Ordering, F) -> Result<T, T> where\nF: FnMut(T) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Fetches the value, and applies a function to it that returns an optional\n new value. Returns a `Result` of `Ok(previous_value)` if the function returned `Some(_)`, else\n `Err(previous_value)`.","sig":null,"attributes":[{"value":"/ Fetches the value, and applies a function to it that returns an optional","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":7276,"byte_end":7352,"line_start":212,"line_end":212,"column_start":5,"column_end":81}},{"value":"/ new value. Returns a `Result` of `Ok(previous_value)` if the function returned `Some(_)`, else","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":7357,"byte_end":7455,"line_start":213,"line_end":213,"column_start":5,"column_end":103}},{"value":"/ `Err(previous_value)`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":7460,"byte_end":7486,"line_start":214,"line_end":214,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":7491,"byte_end":7494,"line_start":215,"line_end":215,"column_start":5,"column_end":8}},{"value":"/ Note: This may call the function multiple times if the value has been changed from other threads in","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":7499,"byte_end":7602,"line_start":216,"line_end":216,"column_start":5,"column_end":108}},{"value":"/ the meantime, as long as the function returns `Some(_)`, but the function will have been applied","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":7607,"byte_end":7707,"line_start":217,"line_end":217,"column_start":5,"column_end":105}},{"value":"/ only once to the stored value.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":7712,"byte_end":7746,"line_start":218,"line_end":218,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":7751,"byte_end":7754,"line_start":219,"line_end":219,"column_start":5,"column_end":8}},{"value":"/ `fetch_update` takes two [`Ordering`] arguments to describe the memory ordering of this operation.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":7759,"byte_end":7861,"line_start":220,"line_end":220,"column_start":5,"column_end":107}},{"value":"/ The first describes the required ordering for when the operation finally succeeds while the second","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":7866,"byte_end":7968,"line_start":221,"line_end":221,"column_start":5,"column_end":107}},{"value":"/ describes the required ordering for loads. These correspond to the success and failure orderings of","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":7973,"byte_end":8076,"line_start":222,"line_end":222,"column_start":5,"column_end":108}},{"value":"/ [`compare_exchange`] respectively.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":8081,"byte_end":8119,"line_start":223,"line_end":223,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":8124,"byte_end":8127,"line_start":224,"line_end":224,"column_start":5,"column_end":8}},{"value":"/ Using [`Acquire`] as success ordering makes the store part","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":8132,"byte_end":8194,"line_start":225,"line_end":225,"column_start":5,"column_end":67}},{"value":"/ of this operation [`Relaxed`], and using [`Release`] makes the final successful load","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":8199,"byte_end":8287,"line_start":226,"line_end":226,"column_start":5,"column_end":93}},{"value":"/ [`Relaxed`]. The (failed) load ordering can only be [`SeqCst`], [`Acquire`] or [`Relaxed`]","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":8292,"byte_end":8386,"line_start":227,"line_end":227,"column_start":5,"column_end":99}},{"value":"/ and must be equivalent to or weaker than the success ordering.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":8391,"byte_end":8457,"line_start":228,"line_end":228,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":8462,"byte_end":8465,"line_start":229,"line_end":229,"column_start":5,"column_end":8}},{"value":"/ [`compare_exchange`]: #method.compare_exchange","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":8470,"byte_end":8520,"line_start":230,"line_end":230,"column_start":5,"column_end":55}},{"value":"/ [`Ordering`]: enum.Ordering.html","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":8525,"byte_end":8561,"line_start":231,"line_end":231,"column_start":5,"column_end":41}},{"value":"/ [`Relaxed`]: enum.Ordering.html#variant.Relaxed","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":8566,"byte_end":8617,"line_start":232,"line_end":232,"column_start":5,"column_end":56}},{"value":"/ [`Release`]: enum.Ordering.html#variant.Release","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":8622,"byte_end":8673,"line_start":233,"line_end":233,"column_start":5,"column_end":56}},{"value":"/ [`Acquire`]: enum.Ordering.html#variant.Acquire","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":8678,"byte_end":8729,"line_start":234,"line_end":234,"column_start":5,"column_end":56}},{"value":"/ [`SeqCst`]: enum.Ordering.html#variant.SeqCst","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":8734,"byte_end":8783,"line_start":235,"line_end":235,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":8788,"byte_end":8791,"line_start":236,"line_end":236,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":8796,"byte_end":8810,"line_start":237,"line_end":237,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":8815,"byte_end":8818,"line_start":238,"line_end":238,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":8823,"byte_end":8834,"line_start":239,"line_end":239,"column_start":5,"column_end":16}},{"value":"/ use atomic::{Atomic, Ordering};","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":8839,"byte_end":8874,"line_start":240,"line_end":240,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":8879,"byte_end":8882,"line_start":241,"line_end":241,"column_start":5,"column_end":8}},{"value":"/ let x = Atomic::new(7);","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":8887,"byte_end":8914,"line_start":242,"line_end":242,"column_start":5,"column_end":32}},{"value":"/ assert_eq!(x.fetch_update(Ordering::SeqCst, Ordering::SeqCst, |_| None), Err(7));","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":8919,"byte_end":9004,"line_start":243,"line_end":243,"column_start":5,"column_end":90}},{"value":"/ assert_eq!(x.fetch_update(Ordering::SeqCst, Ordering::SeqCst, |x| Some(x + 1)), Ok(7));","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":9009,"byte_end":9100,"line_start":244,"line_end":244,"column_start":5,"column_end":96}},{"value":"/ assert_eq!(x.fetch_update(Ordering::SeqCst, Ordering::SeqCst, |x| Some(x + 1)), Ok(8));","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":9105,"byte_end":9196,"line_start":245,"line_end":245,"column_start":5,"column_end":96}},{"value":"/ assert_eq!(x.load(Ordering::SeqCst), 9);","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":9201,"byte_end":9245,"line_start":246,"line_end":246,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":9250,"byte_end":9257,"line_start":247,"line_end":247,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":9262,"byte_end":9271,"line_start":248,"line_end":248,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":165},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":10053,"byte_end":10062,"line_start":277,"line_end":277,"column_start":12,"column_end":21},"name":"fetch_and","qualname":"<Atomic<bool>>::fetch_and","value":"pub fn fetch_and(&Self, bool, Ordering) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Logical \"and\" with a boolean value.","sig":null,"attributes":[{"value":"/ Logical \"and\" with a boolean value.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":9802,"byte_end":9841,"line_start":270,"line_end":270,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":9846,"byte_end":9849,"line_start":271,"line_end":271,"column_start":5,"column_end":8}},{"value":"/ Performs a logical \"and\" operation on the current value and the argument","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":9854,"byte_end":9930,"line_start":272,"line_end":272,"column_start":5,"column_end":81}},{"value":"/ `val`, and sets the new value to the result.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":9935,"byte_end":9983,"line_start":273,"line_end":273,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":9988,"byte_end":9991,"line_start":274,"line_end":274,"column_start":5,"column_end":8}},{"value":"/ Returns the previous value.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":9996,"byte_end":10027,"line_start":275,"line_end":275,"column_start":5,"column_end":36}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":10032,"byte_end":10041,"line_start":276,"line_end":276,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":166},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":10429,"byte_end":10437,"line_start":288,"line_end":288,"column_start":12,"column_end":20},"name":"fetch_or","qualname":"<Atomic<bool>>::fetch_or","value":"pub fn fetch_or(&Self, bool, Ordering) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Logical \"or\" with a boolean value.","sig":null,"attributes":[{"value":"/ Logical \"or\" with a boolean value.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":10180,"byte_end":10218,"line_start":281,"line_end":281,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":10223,"byte_end":10226,"line_start":282,"line_end":282,"column_start":5,"column_end":8}},{"value":"/ Performs a logical \"or\" operation on the current value and the argument","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":10231,"byte_end":10306,"line_start":283,"line_end":283,"column_start":5,"column_end":80}},{"value":"/ `val`, and sets the new value to the result.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":10311,"byte_end":10359,"line_start":284,"line_end":284,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":10364,"byte_end":10367,"line_start":285,"line_end":285,"column_start":5,"column_end":8}},{"value":"/ Returns the previous value.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":10372,"byte_end":10403,"line_start":286,"line_end":286,"column_start":5,"column_end":36}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":10408,"byte_end":10417,"line_start":287,"line_end":287,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":167},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":10805,"byte_end":10814,"line_start":299,"line_end":299,"column_start":12,"column_end":21},"name":"fetch_xor","qualname":"<Atomic<bool>>::fetch_xor","value":"pub fn fetch_xor(&Self, bool, Ordering) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Logical \"xor\" with a boolean value.","sig":null,"attributes":[{"value":"/ Logical \"xor\" with a boolean value.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":10554,"byte_end":10593,"line_start":292,"line_end":292,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":10598,"byte_end":10601,"line_start":293,"line_end":293,"column_start":5,"column_end":8}},{"value":"/ Performs a logical \"xor\" operation on the current value and the argument","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":10606,"byte_end":10682,"line_start":294,"line_end":294,"column_start":5,"column_end":81}},{"value":"/ `val`, and sets the new value to the result.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":10687,"byte_end":10735,"line_start":295,"line_end":295,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":10740,"byte_end":10743,"line_start":296,"line_end":296,"column_start":5,"column_end":8}},{"value":"/ Returns the previous value.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":10748,"byte_end":10779,"line_start":297,"line_end":297,"column_start":5,"column_end":36}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":10784,"byte_end":10793,"line_start":298,"line_end":298,"column_start":5,"column_end":14}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/fallback.rs","byte_start":27442,"byte_end":27450,"line_start":23,"line_end":23,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":50},{"krate":0,"index":51}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/fallback.rs","byte_start":30013,"byte_end":30022,"line_start":93,"line_end":93,"column_start":15,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":61}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":2095,"byte_end":2101,"line_start":62,"line_end":62,"column_start":38,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":2568,"byte_end":2574,"line_start":73,"line_end":73,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":145}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":2710,"byte_end":2716,"line_start":80,"line_end":80,"column_start":43,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":148}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":2905,"byte_end":2911,"line_start":88,"line_end":88,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":151},{"krate":0,"index":152}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":3464,"byte_end":3470,"line_start":108,"line_end":108,"column_start":15,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":155},{"krate":0,"index":156},{"krate":0,"index":157},{"krate":0,"index":158},{"krate":0,"index":159},{"krate":0,"index":160},{"krate":0,"index":161},{"krate":0,"index":162}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":9783,"byte_end":9789,"line_start":269,"line_end":269,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":165},{"krate":0,"index":166},{"krate":0,"index":167}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/fallback.rs","byte_start":27442,"byte_end":27450,"line_start":23,"line_end":23,"column_start":6,"column_end":14},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":46},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/fallback.rs","byte_start":30013,"byte_end":30022,"line_start":93,"line_end":93,"column_start":15,"column_end":24},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":57},"to":{"krate":1,"index":3071}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":2095,"byte_end":2101,"line_start":62,"line_end":62,"column_start":38,"column_end":44},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":138},"to":{"krate":1,"index":2837}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":2568,"byte_end":2574,"line_start":73,"line_end":73,"column_start":37,"column_end":43},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":138},"to":{"krate":1,"index":2803}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":2710,"byte_end":2716,"line_start":80,"line_end":80,"column_start":43,"column_end":49},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":138},"to":{"krate":1,"index":8829}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":2905,"byte_end":2911,"line_start":88,"line_end":88,"column_start":9,"column_end":15},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":138},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":3464,"byte_end":3470,"line_start":108,"line_end":108,"column_start":15,"column_end":21},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":138},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/atomic-0.5.0/src/lib.rs","byte_start":9783,"byte_end":9789,"line_start":269,"line_end":269,"column_start":6,"column_end":12},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":138},"to":{"krate":4294967295,"index":4294967295}}]}