{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0","program":"/home/mramirez/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","lazycell","/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=b3144eeea781e007","-C","extra-filename=-b3144eeea781e007","--out-dir","/home/mramirez/code/projects/games/bug_game/target/rls/debug/deps","-L","dependency=/home/mramirez/code/projects/games/bug_game/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/home/mramirez/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu"],"output":"/home/mramirez/code/projects/games/bug_game/target/rls/debug/deps/liblazycell-b3144eeea781e007.rmeta"},"prelude":{"crate_id":{"name":"lazycell","disambiguator":[12946365088969857677,9410221748506775183]},"crate_root":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src","external_crates":[{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[17044353007700780372,2918200604221815240]}},{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[15333840167806743833,9889193056877993824]}},{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[4550415707075219492,6623162258675921486]}}],"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":527,"byte_end":20450,"line_start":11,"line_end":680,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":527,"byte_end":20450,"line_start":11,"line_end":680,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":8},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":15},{"krate":0,"index":72},{"krate":0,"index":75},{"krate":0,"index":18},{"krate":0,"index":37},{"krate":0,"index":40},{"krate":0,"index":43},{"krate":0,"index":46},{"krate":0,"index":47},{"krate":0,"index":48},{"krate":0,"index":78},{"krate":0,"index":82},{"krate":0,"index":49},{"krate":0,"index":58},{"krate":0,"index":61},{"krate":0,"index":64},{"krate":0,"index":68},{"krate":0,"index":70}],"decl_id":null,"docs":" This crate provides a `LazyCell` struct which acts as a lazily filled\n `Cell`.","sig":null,"attributes":[{"value":"no_std","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":550,"byte_end":556,"line_start":11,"line_end":11,"column_start":24,"column_end":30}},{"value":"deny(missing_docs)","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":560,"byte_end":582,"line_start":13,"line_end":13,"column_start":1,"column_end":23}},{"value":"/ This crate provides a `LazyCell` struct which acts as a lazily filled","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":684,"byte_end":757,"line_start":17,"line_end":17,"column_start":1,"column_end":74}},{"value":"/ `Cell`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":758,"byte_end":769,"line_start":18,"line_end":18,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":770,"byte_end":773,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ With a `RefCell`, the inner contents cannot be borrowed for the lifetime of","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":774,"byte_end":853,"line_start":20,"line_end":20,"column_start":1,"column_end":80}},{"value":"/ the entire object, but only of the borrows returned. A `LazyCell` is a","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":854,"byte_end":928,"line_start":21,"line_end":21,"column_start":1,"column_end":75}},{"value":"/ variation on `RefCell` which allows borrows to be tied to the lifetime of","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":929,"byte_end":1006,"line_start":22,"line_end":22,"column_start":1,"column_end":78}},{"value":"/ the outer object.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":1007,"byte_end":1028,"line_start":23,"line_end":23,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":1029,"byte_end":1032,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":1033,"byte_end":1046,"line_start":25,"line_end":25,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":1047,"byte_end":1050,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ The following example shows a quick example of the basic functionality of","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":1051,"byte_end":1128,"line_start":27,"line_end":27,"column_start":1,"column_end":78}},{"value":"/ `LazyCell`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":1129,"byte_end":1144,"line_start":28,"line_end":28,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":1145,"byte_end":1148,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":1149,"byte_end":1156,"line_start":30,"line_end":30,"column_start":1,"column_end":8}},{"value":"/ use lazycell::LazyCell;","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":1157,"byte_end":1184,"line_start":31,"line_end":31,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":1185,"byte_end":1188,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ let lazycell = LazyCell::new();","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":1189,"byte_end":1224,"line_start":33,"line_end":33,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":1225,"byte_end":1228,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(lazycell.borrow(), None);","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":1229,"byte_end":1269,"line_start":35,"line_end":35,"column_start":1,"column_end":41}},{"value":"/ assert!(!lazycell.filled());","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":1270,"byte_end":1302,"line_start":36,"line_end":36,"column_start":1,"column_end":33}},{"value":"/ lazycell.fill(1).ok();","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":1303,"byte_end":1329,"line_start":37,"line_end":37,"column_start":1,"column_end":27}},{"value":"/ assert!(lazycell.filled());","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":1330,"byte_end":1361,"line_start":38,"line_end":38,"column_start":1,"column_end":32}},{"value":"/ assert_eq!(lazycell.borrow(), Some(&1));","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":1362,"byte_end":1406,"line_start":39,"line_end":39,"column_start":1,"column_end":45}},{"value":"/ assert_eq!(lazycell.into_inner(), Some(1));","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":1407,"byte_end":1454,"line_start":40,"line_end":40,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":1455,"byte_end":1462,"line_start":41,"line_end":41,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":1463,"byte_end":1466,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ `AtomicLazyCell` is a variant that uses an atomic variable to manage","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":1467,"byte_end":1539,"line_start":43,"line_end":43,"column_start":1,"column_end":73}},{"value":"/ coordination in a thread-safe fashion. The limitation of an `AtomicLazyCell`","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":1540,"byte_end":1620,"line_start":44,"line_end":44,"column_start":1,"column_end":81}},{"value":"/ is that after it is initialized, it can't be modified.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":1621,"byte_end":1679,"line_start":45,"line_end":45,"column_start":1,"column_end":59}}]},{"kind":"Struct","id":{"krate":0,"index":72},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":2175,"byte_end":2183,"line_start":67,"line_end":67,"column_start":12,"column_end":20},"name":"LazyCell","qualname":"::LazyCell","value":"LazyCell {  }","parent":null,"children":[{"krate":0,"index":74}],"decl_id":null,"docs":" A lazily filled `Cell`, with mutable contents.","sig":null,"attributes":[{"value":"/ A lazily filled `Cell`, with mutable contents.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":1919,"byte_end":1969,"line_start":61,"line_end":61,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":1970,"byte_end":1973,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"/ A `LazyCell` is completely frozen once filled, **unless** you have `&mut`","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":1974,"byte_end":2051,"line_start":63,"line_end":63,"column_start":1,"column_end":78}},{"value":"/ access to it, in which case `LazyCell::borrow_mut` may be used to mutate the","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":2052,"byte_end":2132,"line_start":64,"line_end":64,"column_start":1,"column_end":81}},{"value":"/ contents.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":2133,"byte_end":2146,"line_start":65,"line_end":65,"column_start":1,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":20},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":2301,"byte_end":2304,"line_start":73,"line_end":73,"column_start":12,"column_end":15},"name":"new","qualname":"<LazyCell<T>>::new","value":"pub fn new() -> LazyCell<T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new, empty, `LazyCell`.\n","sig":null,"attributes":[{"value":"/ Creates a new, empty, `LazyCell`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":2252,"byte_end":2289,"line_start":72,"line_end":72,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":21},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":2512,"byte_end":2516,"line_start":80,"line_end":80,"column_start":12,"column_end":16},"name":"fill","qualname":"<LazyCell<T>>::fill","value":"pub fn fill(&Self, T) -> Result<(), T>","parent":null,"children":[],"decl_id":null,"docs":" Put a value into this cell.","sig":null,"attributes":[{"value":"/ Put a value into this cell.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":2385,"byte_end":2416,"line_start":77,"line_end":77,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":2421,"byte_end":2424,"line_start":78,"line_end":78,"column_start":5,"column_end":8}},{"value":"/ This function will return `Err(value)` if the cell is already full.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":2429,"byte_end":2500,"line_start":79,"line_end":79,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":22},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":3236,"byte_end":3243,"line_start":101,"line_end":101,"column_start":12,"column_end":19},"name":"replace","qualname":"<LazyCell<T>>::replace","value":"pub fn replace(&mut Self, T) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Put a value into this cell.","sig":null,"attributes":[{"value":"/ Put a value into this cell.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":2782,"byte_end":2813,"line_start":91,"line_end":91,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":2818,"byte_end":2821,"line_start":92,"line_end":92,"column_start":5,"column_end":8}},{"value":"/ Note that this function is infallible but requires `&mut self`. By","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":2826,"byte_end":2896,"line_start":93,"line_end":93,"column_start":5,"column_end":75}},{"value":"/ requiring `&mut self` we're guaranteed that no active borrows to this","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":2901,"byte_end":2974,"line_start":94,"line_end":94,"column_start":5,"column_end":78}},{"value":"/ cell can exist so we can always fill in the value. This may not always","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":2979,"byte_end":3053,"line_start":95,"line_end":95,"column_start":5,"column_end":79}},{"value":"/ be usable, however, as `&mut self` may not be possible to borrow.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":3058,"byte_end":3127,"line_start":96,"line_end":96,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":3132,"byte_end":3135,"line_start":97,"line_end":97,"column_start":5,"column_end":8}},{"value":"/ # Return value","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":3140,"byte_end":3158,"line_start":98,"line_end":98,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":3163,"byte_end":3166,"line_start":99,"line_end":99,"column_start":5,"column_end":8}},{"value":"/ This function returns the previous value, if any.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":3171,"byte_end":3224,"line_start":100,"line_end":100,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":23},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":3426,"byte_end":3432,"line_start":106,"line_end":106,"column_start":12,"column_end":18},"name":"filled","qualname":"<LazyCell<T>>::filled","value":"pub fn filled(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Test whether this cell has been previously filled.\n","sig":null,"attributes":[{"value":"/ Test whether this cell has been previously filled.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":3360,"byte_end":3414,"line_start":105,"line_end":105,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":24},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":3741,"byte_end":3747,"line_start":115,"line_end":115,"column_start":12,"column_end":18},"name":"borrow","qualname":"<LazyCell<T>>::borrow","value":"pub fn borrow(&Self) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":" Borrows the contents of this lazy cell for the duration of the cell\n itself.","sig":null,"attributes":[{"value":"/ Borrows the contents of this lazy cell for the duration of the cell","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":3493,"byte_end":3564,"line_start":110,"line_end":110,"column_start":5,"column_end":76}},{"value":"/ itself.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":3569,"byte_end":3580,"line_start":111,"line_end":111,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":3585,"byte_end":3588,"line_start":112,"line_end":112,"column_start":5,"column_end":8}},{"value":"/ This function will return `Some` if the cell has been previously","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":3593,"byte_end":3661,"line_start":113,"line_end":113,"column_start":5,"column_end":73}},{"value":"/ initialized, and `None` if it has not yet been initialized.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":3666,"byte_end":3729,"line_start":114,"line_end":114,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":25},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":4085,"byte_end":4095,"line_start":124,"line_end":124,"column_start":12,"column_end":22},"name":"borrow_mut","qualname":"<LazyCell<T>>::borrow_mut","value":"pub fn borrow_mut(&mut Self) -> Option<&mut T>","parent":null,"children":[],"decl_id":null,"docs":" Borrows the contents of this lazy cell mutably for the duration of the cell\n itself.","sig":null,"attributes":[{"value":"/ Borrows the contents of this lazy cell mutably for the duration of the cell","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":3829,"byte_end":3908,"line_start":119,"line_end":119,"column_start":5,"column_end":84}},{"value":"/ itself.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":3913,"byte_end":3924,"line_start":120,"line_end":120,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":3929,"byte_end":3932,"line_start":121,"line_end":121,"column_start":5,"column_end":8}},{"value":"/ This function will return `Some` if the cell has been previously","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":3937,"byte_end":4005,"line_start":122,"line_end":122,"column_start":5,"column_end":73}},{"value":"/ initialized, and `None` if it has not yet been initialized.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":4010,"byte_end":4073,"line_start":123,"line_end":123,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":26},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":4503,"byte_end":4514,"line_start":137,"line_end":137,"column_start":12,"column_end":23},"name":"borrow_with","qualname":"<LazyCell<T>>::borrow_with","value":"pub fn borrow_with<F: FnOnce() -> T>(&Self, F) -> &T","parent":null,"children":[],"decl_id":null,"docs":" Borrows the contents of this lazy cell for the duration of the cell\n itself.","sig":null,"attributes":[{"value":"/ Borrows the contents of this lazy cell for the duration of the cell","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":4189,"byte_end":4260,"line_start":128,"line_end":128,"column_start":5,"column_end":76}},{"value":"/ itself.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":4265,"byte_end":4276,"line_start":129,"line_end":129,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":4281,"byte_end":4284,"line_start":130,"line_end":130,"column_start":5,"column_end":8}},{"value":"/ If the cell has not yet been filled, the cell is first filled using the","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":4289,"byte_end":4364,"line_start":131,"line_end":131,"column_start":5,"column_end":80}},{"value":"/ function provided.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":4369,"byte_end":4391,"line_start":132,"line_end":132,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":4396,"byte_end":4399,"line_start":133,"line_end":133,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":4404,"byte_end":4416,"line_start":134,"line_end":134,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":4421,"byte_end":4424,"line_start":135,"line_end":135,"column_start":5,"column_end":8}},{"value":"/ Panics if the cell becomes filled as a side effect of `f`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":4429,"byte_end":4491,"line_start":136,"line_end":136,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":28},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":5136,"byte_end":5151,"line_start":157,"line_end":157,"column_start":12,"column_end":27},"name":"borrow_mut_with","qualname":"<LazyCell<T>>::borrow_mut_with","value":"pub fn borrow_mut_with<F: FnOnce() -> T>(&mut Self, F) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Borrows the contents of this `LazyCell` mutably for the duration of the\n cell itself.","sig":null,"attributes":[{"value":"/ Borrows the contents of this `LazyCell` mutably for the duration of the","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":4813,"byte_end":4888,"line_start":148,"line_end":148,"column_start":5,"column_end":80}},{"value":"/ cell itself.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":4893,"byte_end":4909,"line_start":149,"line_end":149,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":4914,"byte_end":4917,"line_start":150,"line_end":150,"column_start":5,"column_end":8}},{"value":"/ If the cell has not yet been filled, the cell is first filled using the","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":4922,"byte_end":4997,"line_start":151,"line_end":151,"column_start":5,"column_end":80}},{"value":"/ function provided.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":5002,"byte_end":5024,"line_start":152,"line_end":152,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":5029,"byte_end":5032,"line_start":153,"line_end":153,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":5037,"byte_end":5049,"line_start":154,"line_end":154,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":5054,"byte_end":5057,"line_start":155,"line_end":155,"column_start":5,"column_end":8}},{"value":"/ Panics if the cell becomes filled as a side effect of `f`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":5062,"byte_end":5124,"line_start":156,"line_end":156,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":30},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":5624,"byte_end":5639,"line_start":173,"line_end":173,"column_start":12,"column_end":27},"name":"try_borrow_with","qualname":"<LazyCell<T>>::try_borrow_with","value":"pub fn try_borrow_with<E, F>(&Self, F) -> Result<&T, E> where F: FnOnce() ->\nResult<T, E>","parent":null,"children":[],"decl_id":null,"docs":" Same as `borrow_with`, but allows the initializing function to fail.","sig":null,"attributes":[{"value":"/ Same as `borrow_with`, but allows the initializing function to fail.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":5440,"byte_end":5512,"line_start":168,"line_end":168,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":5517,"byte_end":5520,"line_start":169,"line_end":169,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":5525,"byte_end":5537,"line_start":170,"line_end":170,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":5542,"byte_end":5545,"line_start":171,"line_end":171,"column_start":5,"column_end":8}},{"value":"/ Panics if the cell becomes filled as a side effect of `f`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":5550,"byte_end":5612,"line_start":172,"line_end":172,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":33},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":6184,"byte_end":6203,"line_start":191,"line_end":191,"column_start":12,"column_end":31},"name":"try_borrow_mut_with","qualname":"<LazyCell<T>>::try_borrow_mut_with","value":"pub fn try_borrow_mut_with<E, F>(&mut Self, F) -> Result<&mut T, E> where\nF: FnOnce() -> Result<T, E>","parent":null,"children":[],"decl_id":null,"docs":" Same as `borrow_mut_with`, but allows the initializing function to fail.","sig":null,"attributes":[{"value":"/ Same as `borrow_mut_with`, but allows the initializing function to fail.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":5996,"byte_end":6072,"line_start":186,"line_end":186,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":6077,"byte_end":6080,"line_start":187,"line_end":187,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":6085,"byte_end":6097,"line_start":188,"line_end":188,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":6102,"byte_end":6105,"line_start":189,"line_end":189,"column_start":5,"column_end":8}},{"value":"/ Panics if the cell becomes filled as a side effect of `f`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":6110,"byte_end":6172,"line_start":190,"line_end":190,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":36},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":6652,"byte_end":6662,"line_start":205,"line_end":205,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<LazyCell<T>>::into_inner","value":"pub fn into_inner(Self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Consumes this `LazyCell`, returning the underlying value.\n","sig":null,"attributes":[{"value":"/ Consumes this `LazyCell`, returning the underlying value.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":6579,"byte_end":6640,"line_start":204,"line_end":204,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":39},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":7198,"byte_end":7201,"line_start":219,"line_end":219,"column_start":12,"column_end":15},"name":"get","qualname":"<LazyCell<T>>::get","value":"pub fn get(&Self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of the contents of the lazy cell.","sig":null,"attributes":[{"value":"/ Returns a copy of the contents of the lazy cell.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":6985,"byte_end":7037,"line_start":215,"line_end":215,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":7042,"byte_end":7045,"line_start":216,"line_end":216,"column_start":5,"column_end":8}},{"value":"/ This function will return `Some` if the cell has been previously initialized,","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":7050,"byte_end":7131,"line_start":217,"line_end":217,"column_start":5,"column_end":86}},{"value":"/ and `None` if it has not yet been initialized.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":7136,"byte_end":7186,"line_start":218,"line_end":218,"column_start":5,"column_end":55}}]},{"kind":"Struct","id":{"krate":0,"index":78},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":7962,"byte_end":7976,"line_start":248,"line_end":248,"column_start":12,"column_end":26},"name":"AtomicLazyCell","qualname":"::AtomicLazyCell","value":"AtomicLazyCell {  }","parent":null,"children":[{"krate":0,"index":80},{"krate":0,"index":81}],"decl_id":null,"docs":" A lazily filled and thread-safe `Cell`, with frozen contents.\n","sig":null,"attributes":[{"value":"/ A lazily filled and thread-safe `Cell`, with frozen contents.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":7868,"byte_end":7933,"line_start":246,"line_end":246,"column_start":1,"column_end":66}}]},{"kind":"Const","id":{"krate":0,"index":51},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":8120,"byte_end":8124,"line_start":255,"line_end":255,"column_start":15,"column_end":19},"name":"NONE","qualname":"::AtomicLazyCell::<T>::NONE","value":"Self","parent":{"krate":0,"index":49},"children":[],"decl_id":null,"docs":" An empty `AtomicLazyCell`.\n","sig":null,"attributes":[{"value":"/ An empty `AtomicLazyCell`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":8075,"byte_end":8105,"line_start":254,"line_end":254,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":52},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":8284,"byte_end":8287,"line_start":261,"line_end":261,"column_start":12,"column_end":15},"name":"new","qualname":"<AtomicLazyCell<T>>::new","value":"pub fn new() -> AtomicLazyCell<T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new, empty, `AtomicLazyCell`.\n","sig":null,"attributes":[{"value":"/ Creates a new, empty, `AtomicLazyCell`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":8229,"byte_end":8272,"line_start":260,"line_end":260,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":53},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":8470,"byte_end":8474,"line_start":268,"line_end":268,"column_start":12,"column_end":16},"name":"fill","qualname":"<AtomicLazyCell<T>>::fill","value":"pub fn fill(&Self, T) -> Result<(), T>","parent":null,"children":[],"decl_id":null,"docs":" Put a value into this cell.","sig":null,"attributes":[{"value":"/ Put a value into this cell.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":8343,"byte_end":8374,"line_start":265,"line_end":265,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":8379,"byte_end":8382,"line_start":266,"line_end":266,"column_start":5,"column_end":8}},{"value":"/ This function will return `Err(value)` if the cell is already full.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":8387,"byte_end":8458,"line_start":267,"line_end":267,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":54},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":9291,"byte_end":9298,"line_start":292,"line_end":292,"column_start":12,"column_end":19},"name":"replace","qualname":"<AtomicLazyCell<T>>::replace","value":"pub fn replace(&mut Self, T) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Put a value into this cell.","sig":null,"attributes":[{"value":"/ Put a value into this cell.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":8837,"byte_end":8868,"line_start":282,"line_end":282,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":8873,"byte_end":8876,"line_start":283,"line_end":283,"column_start":5,"column_end":8}},{"value":"/ Note that this function is infallible but requires `&mut self`. By","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":8881,"byte_end":8951,"line_start":284,"line_end":284,"column_start":5,"column_end":75}},{"value":"/ requiring `&mut self` we're guaranteed that no active borrows to this","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":8956,"byte_end":9029,"line_start":285,"line_end":285,"column_start":5,"column_end":78}},{"value":"/ cell can exist so we can always fill in the value. This may not always","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":9034,"byte_end":9108,"line_start":286,"line_end":286,"column_start":5,"column_end":79}},{"value":"/ be usable, however, as `&mut self` may not be possible to borrow.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":9113,"byte_end":9182,"line_start":287,"line_end":287,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":9187,"byte_end":9190,"line_start":288,"line_end":288,"column_start":5,"column_end":8}},{"value":"/ # Return value","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":9195,"byte_end":9213,"line_start":289,"line_end":289,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":9218,"byte_end":9221,"line_start":290,"line_end":290,"column_start":5,"column_end":8}},{"value":"/ This function returns the previous value, if any.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":9226,"byte_end":9279,"line_start":291,"line_end":291,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":55},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":9633,"byte_end":9639,"line_start":301,"line_end":301,"column_start":12,"column_end":18},"name":"filled","qualname":"<AtomicLazyCell<T>>::filled","value":"pub fn filled(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Test whether this cell has been previously filled.\n","sig":null,"attributes":[{"value":"/ Test whether this cell has been previously filled.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":9567,"byte_end":9621,"line_start":300,"line_end":300,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":56},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":9967,"byte_end":9973,"line_start":310,"line_end":310,"column_start":12,"column_end":18},"name":"borrow","qualname":"<AtomicLazyCell<T>>::borrow","value":"pub fn borrow(&Self) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":" Borrows the contents of this lazy cell for the duration of the cell\n itself.","sig":null,"attributes":[{"value":"/ Borrows the contents of this lazy cell for the duration of the cell","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":9719,"byte_end":9790,"line_start":305,"line_end":305,"column_start":5,"column_end":76}},{"value":"/ itself.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":9795,"byte_end":9806,"line_start":306,"line_end":306,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":9811,"byte_end":9814,"line_start":307,"line_end":307,"column_start":5,"column_end":8}},{"value":"/ This function will return `Some` if the cell has been previously","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":9819,"byte_end":9887,"line_start":308,"line_end":308,"column_start":5,"column_end":73}},{"value":"/ initialized, and `None` if it has not yet been initialized.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":9892,"byte_end":9955,"line_start":309,"line_end":309,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":57},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":10225,"byte_end":10235,"line_start":318,"line_end":318,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<AtomicLazyCell<T>>::into_inner","value":"pub fn into_inner(Self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Consumes this `LazyCell`, returning the underlying value.\n","sig":null,"attributes":[{"value":"/ Consumes this `LazyCell`, returning the underlying value.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":10152,"byte_end":10213,"line_start":317,"line_end":317,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":60},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":10777,"byte_end":10780,"line_start":332,"line_end":332,"column_start":12,"column_end":15},"name":"get","qualname":"<AtomicLazyCell<T>>::get","value":"pub fn get(&Self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of the contents of the lazy cell.","sig":null,"attributes":[{"value":"/ Returns a copy of the contents of the lazy cell.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":10564,"byte_end":10616,"line_start":328,"line_end":328,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":10621,"byte_end":10624,"line_start":329,"line_end":329,"column_start":5,"column_end":8}},{"value":"/ This function will return `Some` if the cell has been previously initialized,","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":10629,"byte_end":10710,"line_start":330,"line_end":330,"column_start":5,"column_end":86}},{"value":"/ and `None` if it has not yet been initialized.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":10715,"byte_end":10765,"line_start":331,"line_end":331,"column_start":5,"column_end":55}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":2234,"byte_end":2242,"line_start":71,"line_end":71,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":20},{"krate":0,"index":21},{"krate":0,"index":22},{"krate":0,"index":23},{"krate":0,"index":24},{"krate":0,"index":25},{"krate":0,"index":26},{"krate":0,"index":28},{"krate":0,"index":30},{"krate":0,"index":33},{"krate":0,"index":36}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":6967,"byte_end":6975,"line_start":214,"line_end":214,"column_start":15,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":39}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":7290,"byte_end":7298,"line_start":224,"line_end":224,"column_start":21,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":42}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":7386,"byte_end":7394,"line_start":230,"line_end":230,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":45}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":8051,"byte_end":8065,"line_start":253,"line_end":253,"column_start":9,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":51},{"krate":0,"index":52},{"krate":0,"index":53},{"krate":0,"index":54},{"krate":0,"index":55},{"krate":0,"index":56},{"krate":0,"index":57}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":10540,"byte_end":10554,"line_start":327,"line_end":327,"column_start":15,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":60}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":10966,"byte_end":10980,"line_start":340,"line_end":340,"column_start":21,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":63}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":11067,"byte_end":11081,"line_start":346,"line_end":346,"column_start":26,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":66}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":11643,"byte_end":11657,"line_start":363,"line_end":363,"column_start":38,"column_end":52},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":11695,"byte_end":11709,"line_start":365,"line_end":365,"column_start":31,"column_end":45},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":2234,"byte_end":2242,"line_start":71,"line_end":71,"column_start":9,"column_end":17},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":72},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":6967,"byte_end":6975,"line_start":214,"line_end":214,"column_start":15,"column_end":23},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":72},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":7290,"byte_end":7298,"line_start":224,"line_end":224,"column_start":21,"column_end":29},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":72},"to":{"krate":1,"index":2803}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":7386,"byte_end":7394,"line_start":230,"line_end":230,"column_start":27,"column_end":35},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":72},"to":{"krate":1,"index":2450}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":8051,"byte_end":8065,"line_start":253,"line_end":253,"column_start":9,"column_end":23},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":78},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":10540,"byte_end":10554,"line_start":327,"line_end":327,"column_start":15,"column_end":29},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":78},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":10966,"byte_end":10980,"line_start":340,"line_end":340,"column_start":21,"column_end":35},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":78},"to":{"krate":1,"index":2803}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":11067,"byte_end":11081,"line_start":346,"line_end":346,"column_start":26,"column_end":40},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":78},"to":{"krate":1,"index":2450}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":11643,"byte_end":11657,"line_start":363,"line_end":363,"column_start":38,"column_end":52},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":78},"to":{"krate":1,"index":2837}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.3.0/src/lib.rs","byte_start":11695,"byte_end":11709,"line_start":365,"line_end":365,"column_start":31,"column_end":45},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":78},"to":{"krate":1,"index":2825}}]}