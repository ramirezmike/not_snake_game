{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/xi-unicode-0.3.0","program":"/home/mramirez/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","xi_unicode","--edition=2018","/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/xi-unicode-0.3.0/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=d459be6dd38e3fa5","-C","extra-filename=-d459be6dd38e3fa5","--out-dir","/home/mramirez/code/projects/games/bug_game/target/rls/debug/deps","-L","dependency=/home/mramirez/code/projects/games/bug_game/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/home/mramirez/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu"],"output":"/home/mramirez/code/projects/games/bug_game/target/rls/debug/deps/libxi_unicode-d459be6dd38e3fa5.rmeta"},"prelude":{"crate_id":{"name":"xi_unicode","disambiguator":[13347120559070058963,13960745913894560418]},"crate_root":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/xi-unicode-0.3.0/src","external_crates":[{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/xi-unicode-0.3.0/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[17044353007700780372,2918200604221815240]}},{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/xi-unicode-0.3.0/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[15333840167806743833,9889193056877993824]}},{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/xi-unicode-0.3.0/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[4550415707075219492,6623162258675921486]}},{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/xi-unicode-0.3.0/src/lib.rs","num":4,"id":{"name":"alloc","disambiguator":[8289379911494056514,13856099756999900329]}}],"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/xi-unicode-0.3.0/src/lib.rs","byte_start":600,"byte_end":28578,"line_start":15,"line_end":620,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/xi-unicode-0.3.0/src/lib.rs","byte_start":600,"byte_end":28578,"line_start":15,"line_end":620,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/xi-unicode-0.3.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":7},{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":65},{"krate":0,"index":70},{"krate":0,"index":72},{"krate":0,"index":13},{"krate":0,"index":17},{"krate":0,"index":75},{"krate":0,"index":78},{"krate":0,"index":79},{"krate":0,"index":20},{"krate":0,"index":22},{"krate":0,"index":25},{"krate":0,"index":27},{"krate":0,"index":28},{"krate":0,"index":37},{"krate":0,"index":46}],"decl_id":null,"docs":" Unicode utilities useful for text editing, including a line breaking iterator.\n","sig":null,"attributes":[{"value":"/ Unicode utilities useful for text editing, including a line breaking iterator.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/xi-unicode-0.3.0/src/lib.rs","byte_start":600,"byte_end":682,"line_start":15,"line_end":15,"column_start":1,"column_end":83}},{"value":"no_std","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/xi-unicode-0.3.0/src/lib.rs","byte_start":683,"byte_end":693,"line_start":16,"line_end":16,"column_start":1,"column_end":11}}]},{"kind":"Function","id":{"krate":0,"index":11},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/xi-unicode-0.3.0/src/lib.rs","byte_start":944,"byte_end":962,"line_start":30,"line_end":30,"column_start":8,"column_end":26},"name":"linebreak_property","qualname":"::linebreak_property","value":"pub fn linebreak_property(char) -> u8","parent":null,"children":[],"decl_id":null,"docs":" The Unicode line breaking property of the given code point.","sig":null,"attributes":[{"value":"/ The Unicode line breaking property of the given code point.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/xi-unicode-0.3.0/src/lib.rs","byte_start":778,"byte_end":841,"line_start":26,"line_end":26,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/xi-unicode-0.3.0/src/lib.rs","byte_start":842,"byte_end":845,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ This is given as a numeric value which matches the ULineBreak","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/xi-unicode-0.3.0/src/lib.rs","byte_start":846,"byte_end":911,"line_start":28,"line_end":28,"column_start":1,"column_end":66}},{"value":"/ enum value from ICU.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/xi-unicode-0.3.0/src/lib.rs","byte_start":912,"byte_end":936,"line_start":29,"line_end":29,"column_start":1,"column_end":25}}]},{"kind":"Function","id":{"krate":0,"index":12},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/xi-unicode-0.3.0/src/lib.rs","byte_start":1670,"byte_end":1692,"line_start":49,"line_end":49,"column_start":8,"column_end":30},"name":"linebreak_property_str","qualname":"::linebreak_property_str","value":"pub fn linebreak_property_str(&str, usize) -> (u8, usize)","parent":null,"children":[],"decl_id":null,"docs":" The Unicode line breaking property of the given code point.","sig":null,"attributes":[{"value":"/ The Unicode line breaking property of the given code point.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/xi-unicode-0.3.0/src/lib.rs","byte_start":1407,"byte_end":1470,"line_start":44,"line_end":44,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/xi-unicode-0.3.0/src/lib.rs","byte_start":1471,"byte_end":1474,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ Look up the line breaking property for the first code point in the","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/xi-unicode-0.3.0/src/lib.rs","byte_start":1475,"byte_end":1545,"line_start":46,"line_end":46,"column_start":1,"column_end":71}},{"value":"/ string. Return the property as a numeric value, and also the utf-8","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/xi-unicode-0.3.0/src/lib.rs","byte_start":1546,"byte_end":1616,"line_start":47,"line_end":47,"column_start":1,"column_end":71}},{"value":"/ length of the codepoint, for convenience.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/xi-unicode-0.3.0/src/lib.rs","byte_start":1617,"byte_end":1662,"line_start":48,"line_end":48,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":65},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/xi-unicode-0.3.0/src/lib.rs","byte_start":3249,"byte_end":3266,"line_start":81,"line_end":81,"column_start":12,"column_end":29},"name":"LineBreakIterator","qualname":"::LineBreakIterator","value":"LineBreakIterator {  }","parent":null,"children":[{"krate":0,"index":67},{"krate":0,"index":68},{"krate":0,"index":69}],"decl_id":null,"docs":" An iterator which produces line breaks according to the UAX 14 line\n breaking algorithm. For each break, return a tuple consisting of the offset\n within the source string and a bool indicating whether it's a hard break.","sig":null,"attributes":[{"value":"/ An iterator which produces line breaks according to the UAX 14 line","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/xi-unicode-0.3.0/src/lib.rs","byte_start":2684,"byte_end":2755,"line_start":72,"line_end":72,"column_start":1,"column_end":72}},{"value":"/ breaking algorithm. For each break, return a tuple consisting of the offset","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/xi-unicode-0.3.0/src/lib.rs","byte_start":2756,"byte_end":2835,"line_start":73,"line_end":73,"column_start":1,"column_end":80}},{"value":"/ within the source string and a bool indicating whether it's a hard break.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/xi-unicode-0.3.0/src/lib.rs","byte_start":2836,"byte_end":2913,"line_start":74,"line_end":74,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/xi-unicode-0.3.0/src/lib.rs","byte_start":2914,"byte_end":2917,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ There is never a break at the beginning of the string (thus, the empty string","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/xi-unicode-0.3.0/src/lib.rs","byte_start":2918,"byte_end":2999,"line_start":76,"line_end":76,"column_start":1,"column_end":82}},{"value":"/ produces no breaks). For non-empty strings, there is always a break at the","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/xi-unicode-0.3.0/src/lib.rs","byte_start":3000,"byte_end":3078,"line_start":77,"line_end":77,"column_start":1,"column_end":79}},{"value":"/ end. It is indicated as a hard break when the string is terminated with a","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/xi-unicode-0.3.0/src/lib.rs","byte_start":3079,"byte_end":3156,"line_start":78,"line_end":78,"column_start":1,"column_end":78}},{"value":"/ newline or other Unicode explicit line-end character.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/xi-unicode-0.3.0/src/lib.rs","byte_start":3157,"byte_end":3214,"line_start":79,"line_end":79,"column_start":1,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":19},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/xi-unicode-0.3.0/src/lib.rs","byte_start":4876,"byte_end":4879,"line_start":126,"line_end":126,"column_start":12,"column_end":15},"name":"new","qualname":"<LineBreakIterator>::new","value":"pub fn new(&str) -> LineBreakIterator","parent":null,"children":[],"decl_id":null,"docs":" Create a new iterator for the given string slice.\n","sig":null,"attributes":[{"value":"/ Create a new iterator for the given string slice.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/xi-unicode-0.3.0/src/lib.rs","byte_start":4811,"byte_end":4864,"line_start":125,"line_end":125,"column_start":5,"column_end":58}}]},{"kind":"Struct","id":{"krate":0,"index":75},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/xi-unicode-0.3.0/src/lib.rs","byte_start":5834,"byte_end":5851,"line_start":149,"line_end":149,"column_start":12,"column_end":29},"name":"LineBreakLeafIter","qualname":"::LineBreakLeafIter","value":"LineBreakLeafIter {  }","parent":null,"children":[{"krate":0,"index":76},{"krate":0,"index":77}],"decl_id":null,"docs":" A struct useful for computing line breaks in a rope or other non-contiguous\n string representation. This is a trickier problem than iterating in a string\n for a few reasons, the trickiest of which is that in the general case,\n line breaks require an indeterminate amount of look-behind.","sig":null,"attributes":[{"value":"/ A struct useful for computing line breaks in a rope or other non-contiguous","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/xi-unicode-0.3.0/src/lib.rs","byte_start":5259,"byte_end":5338,"line_start":140,"line_end":140,"column_start":1,"column_end":80}},{"value":"/ string representation. This is a trickier problem than iterating in a string","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/xi-unicode-0.3.0/src/lib.rs","byte_start":5339,"byte_end":5419,"line_start":141,"line_end":141,"column_start":1,"column_end":81}},{"value":"/ for a few reasons, the trickiest of which is that in the general case,","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/xi-unicode-0.3.0/src/lib.rs","byte_start":5420,"byte_end":5494,"line_start":142,"line_end":142,"column_start":1,"column_end":75}},{"value":"/ line breaks require an indeterminate amount of look-behind.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/xi-unicode-0.3.0/src/lib.rs","byte_start":5495,"byte_end":5558,"line_start":143,"line_end":143,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/xi-unicode-0.3.0/src/lib.rs","byte_start":5559,"byte_end":5562,"line_start":144,"line_end":144,"column_start":1,"column_end":4}},{"value":"/ This is something of an \"expert-level\" interface, and should only be used if","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/xi-unicode-0.3.0/src/lib.rs","byte_start":5563,"byte_end":5643,"line_start":145,"line_end":145,"column_start":1,"column_end":81}},{"value":"/ the caller is prepared to respect all the invariants. Otherwise, you might","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/xi-unicode-0.3.0/src/lib.rs","byte_start":5644,"byte_end":5722,"line_start":146,"line_end":146,"column_start":1,"column_end":79}},{"value":"/ get inconsistent breaks depending on start position and leaf boundaries.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/xi-unicode-0.3.0/src/lib.rs","byte_start":5723,"byte_end":5799,"line_start":147,"line_end":147,"column_start":1,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":23},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/xi-unicode-0.3.0/src/lib.rs","byte_start":6321,"byte_end":6324,"line_start":165,"line_end":165,"column_start":12,"column_end":15},"name":"new","qualname":"<LineBreakLeafIter>::new","value":"pub fn new(&str, usize) -> LineBreakLeafIter","parent":null,"children":[],"decl_id":null,"docs":" Create a new line break iterator suitable for leaves in a rope.\n Precondition: ix is at a code point boundary within s.\n","sig":null,"attributes":[{"value":"/ Create a new line break iterator suitable for leaves in a rope.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/xi-unicode-0.3.0/src/lib.rs","byte_start":6179,"byte_end":6246,"line_start":163,"line_end":163,"column_start":5,"column_end":72}},{"value":"/ Precondition: ix is at a code point boundary within s.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/xi-unicode-0.3.0/src/lib.rs","byte_start":6251,"byte_end":6309,"line_start":164,"line_end":164,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":24},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/xi-unicode-0.3.0/src/lib.rs","byte_start":7174,"byte_end":7178,"line_start":180,"line_end":180,"column_start":12,"column_end":16},"name":"next","qualname":"<LineBreakLeafIter>::next","value":"pub fn next(&mut Self, &str) -> (usize, bool)","parent":null,"children":[],"decl_id":null,"docs":" Return break pos and whether it's a hard break. Note: hard break\n indication may go away, this may not be useful in actual application.\n If end of leaf is found, return leaf's len. This does not indicate\n a break, as that requires at least one more codepoint of context.\n If it is a break, then subsequent next call will return an offset of 0.\n EOT is always a break, so in the EOT case it's up to the caller\n to figure that out.","sig":null,"attributes":[{"value":"/ Return break pos and whether it's a hard break. Note: hard break","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/xi-unicode-0.3.0/src/lib.rs","byte_start":6525,"byte_end":6593,"line_start":170,"line_end":170,"column_start":5,"column_end":73}},{"value":"/ indication may go away, this may not be useful in actual application.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/xi-unicode-0.3.0/src/lib.rs","byte_start":6598,"byte_end":6671,"line_start":171,"line_end":171,"column_start":5,"column_end":78}},{"value":"/ If end of leaf is found, return leaf's len. This does not indicate","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/xi-unicode-0.3.0/src/lib.rs","byte_start":6676,"byte_end":6746,"line_start":172,"line_end":172,"column_start":5,"column_end":75}},{"value":"/ a break, as that requires at least one more codepoint of context.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/xi-unicode-0.3.0/src/lib.rs","byte_start":6751,"byte_end":6820,"line_start":173,"line_end":173,"column_start":5,"column_end":74}},{"value":"/ If it is a break, then subsequent next call will return an offset of 0.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/xi-unicode-0.3.0/src/lib.rs","byte_start":6825,"byte_end":6900,"line_start":174,"line_end":174,"column_start":5,"column_end":80}},{"value":"/ EOT is always a break, so in the EOT case it's up to the caller","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/xi-unicode-0.3.0/src/lib.rs","byte_start":6905,"byte_end":6972,"line_start":175,"line_end":175,"column_start":5,"column_end":72}},{"value":"/ to figure that out.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/xi-unicode-0.3.0/src/lib.rs","byte_start":6977,"byte_end":7000,"line_start":176,"line_end":176,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/xi-unicode-0.3.0/src/lib.rs","byte_start":7005,"byte_end":7008,"line_start":177,"line_end":177,"column_start":5,"column_end":8}},{"value":"/ For consistent results, always supply same `s` until end of leaf is","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/xi-unicode-0.3.0/src/lib.rs","byte_start":7013,"byte_end":7084,"line_start":178,"line_end":178,"column_start":5,"column_end":76}},{"value":"/ reached (and initially this should be the same as in the `new` call).","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/xi-unicode-0.3.0/src/lib.rs","byte_start":7089,"byte_end":7162,"line_start":179,"line_end":179,"column_start":5,"column_end":78}}]},{"kind":"Function","id":{"krate":0,"index":27},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/xi-unicode-0.3.0/src/lib.rs","byte_start":8390,"byte_end":8411,"line_start":220,"line_end":220,"column_start":8,"column_end":29},"name":"is_variation_selector","qualname":"::is_variation_selector","value":"pub fn is_variation_selector(char) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":28},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/xi-unicode-0.3.0/src/lib.rs","byte_start":8527,"byte_end":8535,"line_start":224,"line_end":224,"column_start":11,"column_end":19},"name":"EmojiExt","qualname":"::EmojiExt","value":"EmojiExt","parent":null,"children":[{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":31},{"krate":0,"index":32},{"krate":0,"index":33},{"krate":0,"index":34},{"krate":0,"index":35},{"krate":0,"index":36}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":29},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/xi-unicode-0.3.0/src/lib.rs","byte_start":8545,"byte_end":8573,"line_start":225,"line_end":225,"column_start":8,"column_end":36},"name":"is_regional_indicator_symbol","qualname":"::EmojiExt::is_regional_indicator_symbol","value":"pub fn is_regional_indicator_symbol(Self) -> bool","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":30},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/xi-unicode-0.3.0/src/lib.rs","byte_start":8596,"byte_end":8613,"line_start":226,"line_end":226,"column_start":8,"column_end":25},"name":"is_emoji_modifier","qualname":"::EmojiExt::is_emoji_modifier","value":"pub fn is_emoji_modifier(Self) -> bool","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":31},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/xi-unicode-0.3.0/src/lib.rs","byte_start":8636,"byte_end":8671,"line_start":227,"line_end":227,"column_start":8,"column_end":43},"name":"is_emoji_combining_enclosing_keycap","qualname":"::EmojiExt::is_emoji_combining_enclosing_keycap","value":"pub fn is_emoji_combining_enclosing_keycap(Self) -> bool","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":32},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/xi-unicode-0.3.0/src/lib.rs","byte_start":8694,"byte_end":8702,"line_start":228,"line_end":228,"column_start":8,"column_end":16},"name":"is_emoji","qualname":"::EmojiExt::is_emoji","value":"pub fn is_emoji(Self) -> bool","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":33},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/xi-unicode-0.3.0/src/lib.rs","byte_start":8725,"byte_end":8747,"line_start":229,"line_end":229,"column_start":8,"column_end":30},"name":"is_emoji_modifier_base","qualname":"::EmojiExt::is_emoji_modifier_base","value":"pub fn is_emoji_modifier_base(Self) -> bool","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":34},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/xi-unicode-0.3.0/src/lib.rs","byte_start":8770,"byte_end":8786,"line_start":230,"line_end":230,"column_start":8,"column_end":24},"name":"is_tag_spec_char","qualname":"::EmojiExt::is_tag_spec_char","value":"pub fn is_tag_spec_char(Self) -> bool","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":35},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/xi-unicode-0.3.0/src/lib.rs","byte_start":8809,"byte_end":8828,"line_start":231,"line_end":231,"column_start":8,"column_end":27},"name":"is_emoji_cancel_tag","qualname":"::EmojiExt::is_emoji_cancel_tag","value":"pub fn is_emoji_cancel_tag(Self) -> bool","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":36},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/xi-unicode-0.3.0/src/lib.rs","byte_start":8851,"byte_end":8857,"line_start":232,"line_end":232,"column_start":8,"column_end":14},"name":"is_zwj","qualname":"::EmojiExt::is_zwj","value":"pub fn is_zwj(Self) -> bool","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":46},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/xi-unicode-0.3.0/src/lib.rs","byte_start":9703,"byte_end":9717,"line_start":262,"line_end":262,"column_start":8,"column_end":22},"name":"is_keycap_base","qualname":"::is_keycap_base","value":"pub fn is_keycap_base(char) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/xi-unicode-0.3.0/src/lib.rs","byte_start":3344,"byte_end":3361,"line_start":87,"line_end":87,"column_start":23,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":15},{"krate":0,"index":16}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/xi-unicode-0.3.0/src/lib.rs","byte_start":4783,"byte_end":4800,"line_start":124,"line_end":124,"column_start":10,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":19}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/xi-unicode-0.3.0/src/lib.rs","byte_start":5904,"byte_end":5921,"line_start":154,"line_end":154,"column_start":18,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":21}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/xi-unicode-0.3.0/src/lib.rs","byte_start":6155,"byte_end":6172,"line_start":162,"line_end":162,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":23},{"krate":0,"index":24}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/xi-unicode-0.3.0/src/lib.rs","byte_start":3344,"byte_end":3361,"line_start":87,"line_end":87,"column_start":23,"column_end":40},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":65},"to":{"krate":1,"index":7249}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/xi-unicode-0.3.0/src/lib.rs","byte_start":4783,"byte_end":4800,"line_start":124,"line_end":124,"column_start":10,"column_end":27},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":65},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/xi-unicode-0.3.0/src/lib.rs","byte_start":5904,"byte_end":5921,"line_start":154,"line_end":154,"column_start":18,"column_end":35},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":75},"to":{"krate":1,"index":2803}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/xi-unicode-0.3.0/src/lib.rs","byte_start":6155,"byte_end":6172,"line_start":162,"line_end":162,"column_start":6,"column_end":23},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":75},"to":{"krate":4294967295,"index":4294967295}}]}