{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1","program":"/home/mramirez/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","anymap","/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=d0e1547769c8efb5","-C","extra-filename=-d0e1547769c8efb5","--out-dir","/home/mramirez/code/projects/games/bug_game/target/rls/debug/deps","-L","dependency=/home/mramirez/code/projects/games/bug_game/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/home/mramirez/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu"],"output":"/home/mramirez/code/projects/games/bug_game/target/rls/debug/deps/libanymap-d0e1547769c8efb5.rmeta"},"prelude":{"crate_id":{"name":"anymap","disambiguator":[7648574180736606799,17517171559447162335]},"crate_root":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src","external_crates":[{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[397594041871667817,11704163070354659695]}},{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[17044353007700780372,2918200604221815240]}},{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[15333840167806743833,9889193056877993824]}},{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[4550415707075219492,6623162258675921486]}},{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[8289379911494056514,13856099756999900329]}},{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[10514502805115346386,576110030083780649]}},{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[9878185313679130060,1975285035821961205]}},{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[4010603182529655334,7152219772350788052]}},{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[1807637986128902209,18379128151258407121]}},{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[11140927657351163542,6267109750485550558]}},{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[13809795498598848728,13320395723520943315]}},{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","num":12,"id":{"name":"std_detect","disambiguator":[13869841232067652907,9875669357213642224]}},{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","num":13,"id":{"name":"addr2line","disambiguator":[15533050656730733495,14669839968799848603]}},{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","num":14,"id":{"name":"gimli","disambiguator":[14371692877540073659,8181723439448527964]}},{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","num":15,"id":{"name":"object","disambiguator":[639541300699627395,1995254029228069844]}},{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","num":16,"id":{"name":"miniz_oxide","disambiguator":[12482123824895737424,11765111494567609733]}},{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","num":17,"id":{"name":"adler","disambiguator":[1169880241773671279,8605314106566979368]}},{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","num":18,"id":{"name":"panic_unwind","disambiguator":[5016943468141875609,13494347935157563341]}}],"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","byte_start":0,"byte_end":18039,"line_start":1,"line_end":525,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","byte_start":0,"byte_end":18039,"line_start":1,"line_end":525,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":9},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":16},{"krate":0,"index":19},{"krate":0,"index":23},{"krate":0,"index":54},{"krate":0,"index":435},{"krate":0,"index":438},{"krate":0,"index":223},{"krate":0,"index":226},{"krate":0,"index":441},{"krate":0,"index":227},{"krate":0,"index":245},{"krate":0,"index":248},{"krate":0,"index":251},{"krate":0,"index":254},{"krate":0,"index":260},{"krate":0,"index":266},{"krate":0,"index":276},{"krate":0,"index":283},{"krate":0,"index":292}],"decl_id":null,"docs":" This crate provides the `AnyMap` type, a safe and convenient store for one value of each type.\n","sig":null,"attributes":[{"value":"/ This crate provides the `AnyMap` type, a safe and convenient store for one value of each type.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","byte_start":0,"byte_end":98,"line_start":1,"line_end":1,"column_start":1,"column_end":99}},{"value":"warn(missing_docs, unused_results)","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","byte_start":158,"byte_end":196,"line_start":4,"line_end":4,"column_start":1,"column_end":39}}]},{"kind":"Mod","id":{"krate":0,"index":23},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/any.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"any","qualname":"::any","value":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/any.rs","parent":null,"children":[{"krate":0,"index":24},{"krate":0,"index":27},{"krate":0,"index":30},{"krate":0,"index":35},{"krate":0,"index":43},{"krate":0,"index":50},{"krate":0,"index":297},{"krate":0,"index":298},{"krate":0,"index":300},{"krate":0,"index":302},{"krate":0,"index":309},{"krate":0,"index":312},{"krate":0,"index":314},{"krate":0,"index":321},{"krate":0,"index":324},{"krate":0,"index":326},{"krate":0,"index":333},{"krate":0,"index":336},{"krate":0,"index":338},{"krate":0,"index":345},{"krate":0,"index":348},{"krate":0,"index":350},{"krate":0,"index":357},{"krate":0,"index":360},{"krate":0,"index":362},{"krate":0,"index":369},{"krate":0,"index":372},{"krate":0,"index":374},{"krate":0,"index":381},{"krate":0,"index":384},{"krate":0,"index":386},{"krate":0,"index":393},{"krate":0,"index":396},{"krate":0,"index":397},{"krate":0,"index":399},{"krate":0,"index":401},{"krate":0,"index":403},{"krate":0,"index":405}],"decl_id":null,"docs":" The different types of `Any` for use in a map.","sig":null,"attributes":[{"value":"/ The different types of `Any` for use in a map.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/any.rs","byte_start":18041,"byte_end":18091,"line_start":1,"line_end":1,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/any.rs","byte_start":18092,"byte_end":18095,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ This stuff is all based on `std::any`, but goes a little further, with `CloneAny` being a","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/any.rs","byte_start":18096,"byte_end":18189,"line_start":3,"line_end":3,"column_start":1,"column_end":94}},{"value":"/ cloneable `Any` and with the `Send` and `Sync` bounds possible on both `Any` and `CloneAny`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/any.rs","byte_start":18190,"byte_end":18286,"line_start":4,"line_end":4,"column_start":1,"column_end":97}}]},{"kind":"Trait","id":{"krate":0,"index":30},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/any.rs","byte_start":18357,"byte_end":18367,"line_start":10,"line_end":10,"column_start":11,"column_end":21},"name":"CloneToAny","qualname":"::any::CloneToAny","value":"CloneToAny","parent":null,"children":[{"krate":0,"index":31},{"krate":0,"index":32},{"krate":0,"index":33},{"krate":0,"index":34}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":31},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/any.rs","byte_start":18433,"byte_end":18445,"line_start":12,"line_end":12,"column_start":8,"column_end":20},"name":"clone_to_any","qualname":"::any::CloneToAny::clone_to_any","value":"pub fn clone_to_any(&Self) -> Box<CloneAny>","parent":{"krate":0,"index":30},"children":[],"decl_id":null,"docs":" Clone `self` into a new `Box<CloneAny>` object.\n","sig":null,"attributes":[{"value":"/ Clone `self` into a new `Box<CloneAny>` object.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/any.rs","byte_start":18374,"byte_end":18425,"line_start":11,"line_end":11,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":32},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/any.rs","byte_start":18542,"byte_end":18559,"line_start":15,"line_end":15,"column_start":8,"column_end":25},"name":"clone_to_any_send","qualname":"::any::CloneToAny::clone_to_any_send","value":"pub fn clone_to_any_send(&Self) -> Box<CloneAny + Send> where Self: Send","parent":{"krate":0,"index":30},"children":[],"decl_id":null,"docs":" Clone `self` into a new `Box<CloneAny + Send>` object.\n","sig":null,"attributes":[{"value":"/ Clone `self` into a new `Box<CloneAny + Send>` object.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/any.rs","byte_start":18476,"byte_end":18534,"line_start":14,"line_end":14,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":33},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/any.rs","byte_start":18680,"byte_end":18697,"line_start":18,"line_end":18,"column_start":8,"column_end":25},"name":"clone_to_any_sync","qualname":"::any::CloneToAny::clone_to_any_sync","value":"pub fn clone_to_any_sync(&Self) -> Box<CloneAny + Sync> where Self: Sync","parent":{"krate":0,"index":30},"children":[],"decl_id":null,"docs":" Clone `self` into a new `Box<CloneAny + Sync>` object.\n","sig":null,"attributes":[{"value":"/ Clone `self` into a new `Box<CloneAny + Sync>` object.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/any.rs","byte_start":18614,"byte_end":18672,"line_start":17,"line_end":17,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":34},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/any.rs","byte_start":18825,"byte_end":18847,"line_start":21,"line_end":21,"column_start":8,"column_end":30},"name":"clone_to_any_send_sync","qualname":"::any::CloneToAny::clone_to_any_send_sync","value":"pub fn clone_to_any_send_sync(&Self) -> Box<CloneAny + Send + Sync> where\nSelf: Send + Sync","parent":{"krate":0,"index":30},"children":[],"decl_id":null,"docs":" Clone `self` into a new `Box<CloneAny + Send + Sync>` object.\n","sig":null,"attributes":[{"value":"/ Clone `self` into a new `Box<CloneAny + Send + Sync>` object.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/any.rs","byte_start":18752,"byte_end":18817,"line_start":20,"line_end":20,"column_start":5,"column_end":70}}]},{"kind":"Trait","id":{"krate":0,"index":43},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/any.rs","byte_start":21328,"byte_end":21343,"line_start":96,"line_end":96,"column_start":11,"column_end":26},"name":"UncheckedAnyExt","qualname":"::any::UncheckedAnyExt","value":"UncheckedAnyExt: Any","parent":null,"children":[{"krate":0,"index":44},{"krate":0,"index":46},{"krate":0,"index":48}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/any.rs","byte_start":21234,"byte_end":21256,"line_start":95,"line_end":95,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":44},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/any.rs","byte_start":21365,"byte_end":21387,"line_start":97,"line_end":97,"column_start":15,"column_end":37},"name":"downcast_ref_unchecked","qualname":"::any::UncheckedAnyExt::downcast_ref_unchecked","value":"pub unsafe fn downcast_ref_unchecked<T: Any>(&Self) -> &T","parent":{"krate":0,"index":43},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":46},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/any.rs","byte_start":21424,"byte_end":21446,"line_start":98,"line_end":98,"column_start":15,"column_end":37},"name":"downcast_mut_unchecked","qualname":"::any::UncheckedAnyExt::downcast_mut_unchecked","value":"pub unsafe fn downcast_mut_unchecked<T: Any>(&mut Self) -> &mut T","parent":{"krate":0,"index":43},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":48},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/any.rs","byte_start":21491,"byte_end":21509,"line_start":99,"line_end":99,"column_start":15,"column_end":33},"name":"downcast_unchecked","qualname":"::any::UncheckedAnyExt::downcast_unchecked","value":"pub unsafe fn downcast_unchecked<T: Any>(Box<Self>) -> Box<T>","parent":{"krate":0,"index":43},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":50},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/any.rs","byte_start":21645,"byte_end":21652,"line_start":104,"line_end":104,"column_start":11,"column_end":18},"name":"IntoBox","qualname":"::any::IntoBox","value":"IntoBox<A: ?Sized + UncheckedAnyExt>: Any","parent":null,"children":[{"krate":0,"index":52}],"decl_id":null,"docs":" A trait for the conversion of an object into a boxed trait object.\n","sig":null,"attributes":[{"value":"/ A trait for the conversion of an object into a boxed trait object.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/any.rs","byte_start":21564,"byte_end":21634,"line_start":103,"line_end":103,"column_start":1,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":52},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/any.rs","byte_start":21750,"byte_end":21758,"line_start":106,"line_end":106,"column_start":8,"column_end":16},"name":"into_box","qualname":"::any::IntoBox::into_box","value":"pub fn into_box(Self) -> Box<A>","parent":{"krate":0,"index":50},"children":[],"decl_id":null,"docs":" Convert self into the appropriate boxed form.\n","sig":null,"attributes":[{"value":"/ Convert self into the appropriate boxed form.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/any.rs","byte_start":21693,"byte_end":21742,"line_start":105,"line_end":105,"column_start":5,"column_end":54}}]},{"kind":"Mod","id":{"krate":0,"index":54},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"raw","qualname":"::raw","value":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","parent":null,"children":[{"krate":0,"index":55},{"krate":0,"index":58},{"krate":0,"index":61},{"krate":0,"index":62},{"krate":0,"index":65},{"krate":0,"index":68},{"krate":0,"index":69},{"krate":0,"index":71},{"krate":0,"index":72},{"krate":0,"index":75},{"krate":0,"index":78},{"krate":0,"index":79},{"krate":0,"index":82},{"krate":0,"index":85},{"krate":0,"index":88},{"krate":0,"index":89},{"krate":0,"index":92},{"krate":0,"index":407},{"krate":0,"index":409},{"krate":0,"index":95},{"krate":0,"index":411},{"krate":0,"index":414},{"krate":0,"index":98},{"krate":0,"index":101},{"krate":0,"index":417},{"krate":0,"index":427},{"krate":0,"index":431},{"krate":0,"index":104},{"krate":0,"index":111},{"krate":0,"index":115},{"krate":0,"index":119},{"krate":0,"index":126},{"krate":0,"index":130},{"krate":0,"index":133},{"krate":0,"index":139},{"krate":0,"index":142},{"krate":0,"index":146},{"krate":0,"index":153},{"krate":0,"index":157},{"krate":0,"index":174},{"krate":0,"index":179},{"krate":0,"index":183},{"krate":0,"index":188},{"krate":0,"index":192},{"krate":0,"index":196},{"krate":0,"index":205},{"krate":0,"index":211},{"krate":0,"index":219}],"decl_id":null,"docs":" The raw form of a `Map`, allowing untyped access.","sig":null,"attributes":[{"value":"/ The raw form of a `Map`, allowing untyped access.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":23319,"byte_end":23372,"line_start":1,"line_end":1,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":23373,"byte_end":23376,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ All relevant details are in the `RawMap` struct.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":23377,"byte_end":23429,"line_start":3,"line_end":3,"column_start":1,"column_end":53}}]},{"kind":"Struct","id":{"krate":0,"index":411},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":25278,"byte_end":25284,"line_start":59,"line_end":59,"column_start":12,"column_end":18},"name":"RawMap","qualname":"::raw::RawMap","value":"RawMap {  }","parent":null,"children":[{"krate":0,"index":413}],"decl_id":null,"docs":" The raw, underlying form of a `Map`.","sig":null,"attributes":[{"value":"/ The raw, underlying form of a `Map`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":24741,"byte_end":24781,"line_start":51,"line_end":51,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":24782,"byte_end":24785,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ At its essence, this is a wrapper around `HashMap<TypeId, Box<Any>>`, with the portions that","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":24786,"byte_end":24882,"line_start":53,"line_end":53,"column_start":1,"column_end":97}},{"value":"/ would be memory-unsafe removed or marked unsafe. Normal people are expected to use the safe","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":24883,"byte_end":24978,"line_start":54,"line_end":54,"column_start":1,"column_end":96}},{"value":"/ `Map` interface instead, but there is the occasional use for this such as iteration over the","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":24979,"byte_end":25075,"line_start":55,"line_end":55,"column_start":1,"column_end":97}},{"value":"/ contents of an `Map`. However, because you will then be dealing with `Any` trait objects, it","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":25076,"byte_end":25172,"line_start":56,"line_end":56,"column_start":1,"column_end":97}},{"value":"/ doesn’t tend to be so very useful. Still, if you need it, it’s here.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":25173,"byte_end":25249,"line_start":57,"line_end":57,"column_start":1,"column_end":73}}]},{"kind":"Struct","id":{"krate":0,"index":427},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":26080,"byte_end":26084,"line_start":88,"line_end":88,"column_start":12,"column_end":16},"name":"Iter","qualname":"::raw::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":430}],"decl_id":null,"docs":" `RawMap` iterator.\n","sig":null,"attributes":[{"value":"/ `RawMap` iterator.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":26029,"byte_end":26051,"line_start":86,"line_end":86,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":115},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":26611,"byte_end":26618,"line_start":101,"line_end":101,"column_start":12,"column_end":19},"name":"IterMut","qualname":"::raw::IterMut","value":"IterMut {  }","parent":null,"children":[{"krate":0,"index":118}],"decl_id":null,"docs":" `RawMap` mutable iterator.\n","sig":null,"attributes":[{"value":"/ `RawMap` mutable iterator.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":26569,"byte_end":26599,"line_start":100,"line_end":100,"column_start":1,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":130},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":27163,"byte_end":27171,"line_start":114,"line_end":114,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::raw::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":132}],"decl_id":null,"docs":" `RawMap` move iterator.\n","sig":null,"attributes":[{"value":"/ `RawMap` move iterator.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":27124,"byte_end":27151,"line_start":113,"line_end":113,"column_start":1,"column_end":28}}]},{"kind":"Struct","id":{"krate":0,"index":142},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":27683,"byte_end":27688,"line_start":127,"line_end":127,"column_start":12,"column_end":17},"name":"Drain","qualname":"::raw::Drain","value":"Drain {  }","parent":null,"children":[{"krate":0,"index":145}],"decl_id":null,"docs":" `RawMap` drain iterator.\n","sig":null,"attributes":[{"value":"/ `RawMap` drain iterator.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":27643,"byte_end":27671,"line_start":126,"line_end":126,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":159},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":28356,"byte_end":28360,"line_start":144,"line_end":144,"column_start":12,"column_end":16},"name":"iter","qualname":"<RawMap<A>>::iter","value":"pub fn iter(&Self) -> Iter<, A>","parent":null,"children":[],"decl_id":null,"docs":" An iterator visiting all entries in arbitrary order.","sig":null,"attributes":[{"value":"/ An iterator visiting all entries in arbitrary order.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":28225,"byte_end":28281,"line_start":140,"line_end":140,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":28286,"byte_end":28289,"line_start":141,"line_end":141,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is `&Any`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":28294,"byte_end":28330,"line_start":142,"line_end":142,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":28335,"byte_end":28344,"line_start":143,"line_end":143,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":160},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":28590,"byte_end":28598,"line_start":154,"line_end":154,"column_start":12,"column_end":20},"name":"iter_mut","qualname":"<RawMap<A>>::iter_mut","value":"pub fn iter_mut(&mut Self) -> IterMut<, A>","parent":null,"children":[],"decl_id":null,"docs":" An iterator visiting all entries in arbitrary order.","sig":null,"attributes":[{"value":"/ An iterator visiting all entries in arbitrary order.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":28455,"byte_end":28511,"line_start":150,"line_end":150,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":28516,"byte_end":28519,"line_start":151,"line_end":151,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is `&mut Any`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":28524,"byte_end":28564,"line_start":152,"line_end":152,"column_start":5,"column_end":45}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":28569,"byte_end":28578,"line_start":153,"line_end":153,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":161},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":28895,"byte_end":28900,"line_start":166,"line_end":166,"column_start":12,"column_end":17},"name":"drain","qualname":"<RawMap<A>>::drain","value":"pub fn drain(&mut Self) -> Drain<, A>","parent":null,"children":[],"decl_id":null,"docs":" Clears the map, returning all items as an iterator.","sig":null,"attributes":[{"value":"/ Clears the map, returning all items as an iterator.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":28707,"byte_end":28762,"line_start":160,"line_end":160,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":28767,"byte_end":28770,"line_start":161,"line_end":161,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is `Box<Any>`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":28775,"byte_end":28815,"line_start":162,"line_end":162,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":28820,"byte_end":28823,"line_start":163,"line_end":163,"column_start":5,"column_end":8}},{"value":"/ Keeps the allocated memory for reuse.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":28828,"byte_end":28869,"line_start":164,"line_end":164,"column_start":5,"column_end":46}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":28874,"byte_end":28883,"line_start":165,"line_end":165,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":162},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":29110,"byte_end":29115,"line_start":174,"line_end":174,"column_start":12,"column_end":17},"name":"entry","qualname":"<RawMap<A>>::entry","value":"pub fn entry(&mut Self, TypeId) -> Entry<, A>","parent":null,"children":[],"decl_id":null,"docs":" Gets the entry for the given type in the collection for in-place manipulation.\n","sig":null,"attributes":[{"value":"/ Gets the entry for the given type in the collection for in-place manipulation.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":29002,"byte_end":29084,"line_start":172,"line_end":172,"column_start":5,"column_end":87}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":29089,"byte_end":29098,"line_start":173,"line_end":173,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":163},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":29689,"byte_end":29692,"line_start":190,"line_end":190,"column_start":12,"column_end":15},"name":"get","qualname":"<RawMap<A>>::get","value":"pub fn get<Q: ?Sized>(&Self, &Q) -> Option<&A> where TypeId: Borrow<Q>,\nQ: Hash + Eq","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the value corresponding to the key.","sig":null,"attributes":[{"value":"/ Returns a reference to the value corresponding to the key.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":29443,"byte_end":29505,"line_start":185,"line_end":185,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":29510,"byte_end":29513,"line_start":186,"line_end":186,"column_start":5,"column_end":8}},{"value":"/ The key may be any borrowed form of the map's key type, but `Hash` and `Eq` on the borrowed","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":29518,"byte_end":29613,"line_start":187,"line_end":187,"column_start":5,"column_end":100}},{"value":"/ form *must* match those for the key type.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":29618,"byte_end":29663,"line_start":188,"line_end":188,"column_start":5,"column_end":50}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":29668,"byte_end":29677,"line_start":189,"line_end":189,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":166},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":30078,"byte_end":30090,"line_start":200,"line_end":200,"column_start":12,"column_end":24},"name":"contains_key","qualname":"<RawMap<A>>::contains_key","value":"pub fn contains_key<Q: ?Sized>(&Self, &Q) -> bool where TypeId: Borrow<Q>,\nQ: Hash + Eq","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the map contains a value for the specified key.","sig":null,"attributes":[{"value":"/ Returns true if the map contains a value for the specified key.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":29827,"byte_end":29894,"line_start":195,"line_end":195,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":29899,"byte_end":29902,"line_start":196,"line_end":196,"column_start":5,"column_end":8}},{"value":"/ The key may be any borrowed form of the map's key type, but `Hash` and `Eq` on the borrowed","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":29907,"byte_end":30002,"line_start":197,"line_end":197,"column_start":5,"column_end":100}},{"value":"/ form *must* match those for the key type.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":30007,"byte_end":30052,"line_start":198,"line_end":198,"column_start":5,"column_end":50}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":30057,"byte_end":30066,"line_start":199,"line_end":199,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":168},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":30468,"byte_end":30475,"line_start":210,"line_end":210,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<RawMap<A>>::get_mut","value":"pub fn get_mut<Q: ?Sized>(&mut Self, &Q) -> Option<&mut A> where\nTypeId: Borrow<Q>, Q: Hash + Eq","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the value corresponding to the key.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the value corresponding to the key.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":30214,"byte_end":30284,"line_start":205,"line_end":205,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":30289,"byte_end":30292,"line_start":206,"line_end":206,"column_start":5,"column_end":8}},{"value":"/ The key may be any borrowed form of the map's key type, but `Hash` and `Eq` on the borrowed","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":30297,"byte_end":30392,"line_start":207,"line_end":207,"column_start":5,"column_end":100}},{"value":"/ form *must* match those for the key type.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":30397,"byte_end":30442,"line_start":208,"line_end":208,"column_start":5,"column_end":50}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":30447,"byte_end":30456,"line_start":209,"line_end":209,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":171},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":30986,"byte_end":30992,"line_start":221,"line_end":221,"column_start":19,"column_end":25},"name":"insert","qualname":"<RawMap<A>>::insert","value":"pub unsafe fn insert(&mut Self, TypeId, Box<A>) -> Option<Box<A>>","parent":null,"children":[],"decl_id":null,"docs":" Inserts a key-value pair from the map. If the key already had a value present in the map,\n that value is returned. Otherwise, None is returned.","sig":null,"attributes":[{"value":"/ Inserts a key-value pair from the map. If the key already had a value present in the map,","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":30626,"byte_end":30719,"line_start":215,"line_end":215,"column_start":5,"column_end":98}},{"value":"/ that value is returned. Otherwise, None is returned.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":30724,"byte_end":30780,"line_start":216,"line_end":216,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":30785,"byte_end":30788,"line_start":217,"line_end":217,"column_start":5,"column_end":8}},{"value":"/ It is the caller’s responsibility to ensure that the key corresponds with the type ID of","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":30793,"byte_end":30887,"line_start":218,"line_end":218,"column_start":5,"column_end":97}},{"value":"/ the value. If they do not, memory safety may be violated.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":30892,"byte_end":30953,"line_start":219,"line_end":219,"column_start":5,"column_end":66}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":30958,"byte_end":30967,"line_start":220,"line_end":220,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":172},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":31393,"byte_end":31399,"line_start":231,"line_end":231,"column_start":12,"column_end":18},"name":"remove","qualname":"<RawMap<A>>::remove","value":"pub fn remove<Q: ?Sized>(&mut Self, &Q) -> Option<Box<A>> where\nTypeId: Borrow<Q>, Q: Hash + Eq","parent":null,"children":[],"decl_id":null,"docs":" Removes a key from the map, returning the value at the key if the key was previously in the\n map.","sig":null,"attributes":[{"value":"/ Removes a key from the map, returning the value at the key if the key was previously in the","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":31101,"byte_end":31196,"line_start":225,"line_end":225,"column_start":5,"column_end":100}},{"value":"/ map.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":31201,"byte_end":31209,"line_start":226,"line_end":226,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":31214,"byte_end":31217,"line_start":227,"line_end":227,"column_start":5,"column_end":8}},{"value":"/ The key may be any borrowed form of the map's key type, but `Hash` and `Eq` on the borrowed","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":31222,"byte_end":31317,"line_start":228,"line_end":228,"column_start":5,"column_end":100}},{"value":"/ form *must* match those for the key type.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":31322,"byte_end":31367,"line_start":229,"line_end":229,"column_start":5,"column_end":50}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":31372,"byte_end":31381,"line_start":230,"line_end":230,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":188},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":32334,"byte_end":32347,"line_start":267,"line_end":267,"column_start":12,"column_end":25},"name":"OccupiedEntry","qualname":"::raw::OccupiedEntry","value":"OccupiedEntry {  }","parent":null,"children":[{"krate":0,"index":191}],"decl_id":null,"docs":" A view into a single occupied location in a `RawMap`.\n","sig":null,"attributes":[{"value":"/ A view into a single occupied location in a `RawMap`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":32265,"byte_end":32322,"line_start":266,"line_end":266,"column_start":1,"column_end":58}}]},{"kind":"Struct","id":{"krate":0,"index":192},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":32508,"byte_end":32519,"line_start":272,"line_end":272,"column_start":12,"column_end":23},"name":"VacantEntry","qualname":"::raw::VacantEntry","value":"VacantEntry {  }","parent":null,"children":[{"krate":0,"index":195}],"decl_id":null,"docs":" A view into a single empty location in a `RawMap`.\n","sig":null,"attributes":[{"value":"/ A view into a single empty location in a `RawMap`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":32442,"byte_end":32496,"line_start":271,"line_end":271,"column_start":1,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":199},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":32774,"byte_end":32782,"line_start":279,"line_end":279,"column_start":5,"column_end":13},"name":"Occupied","qualname":"::raw::Entry::Occupied","value":"Entry::Occupied(OccupiedEntry)","parent":{"krate":0,"index":196},"children":[],"decl_id":null,"docs":" An occupied Entry\n","sig":null,"attributes":[{"value":"/ An occupied Entry","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":32748,"byte_end":32769,"line_start":278,"line_end":278,"column_start":5,"column_end":26}}]},{"kind":"TupleVariant","id":{"krate":0,"index":202},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":32833,"byte_end":32839,"line_start":281,"line_end":281,"column_start":5,"column_end":11},"name":"Vacant","qualname":"::raw::Entry::Vacant","value":"Entry::Vacant(VacantEntry)","parent":{"krate":0,"index":196},"children":[],"decl_id":null,"docs":" A vacant Entry\n","sig":null,"attributes":[{"value":"/ A vacant Entry","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":32810,"byte_end":32828,"line_start":280,"line_end":280,"column_start":5,"column_end":23}}]},{"kind":"Enum","id":{"krate":0,"index":196},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":32703,"byte_end":32708,"line_start":277,"line_end":277,"column_start":10,"column_end":15},"name":"Entry","qualname":"::raw::Entry","value":"pub enum Entry<'a, A: ?Sized + UncheckedAnyExt> {\n    Occupied(OccupiedEntry),\n    Vacant(VacantEntry),\n}","parent":null,"children":[{"krate":0,"index":199},{"krate":0,"index":202}],"decl_id":null,"docs":" A view into a single location in a `RawMap`, which may be vacant or occupied.\n","sig":null,"attributes":[{"value":"/ A view into a single location in a `RawMap`, which may be vacant or occupied.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":32612,"byte_end":32693,"line_start":276,"line_end":276,"column_start":1,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":208},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":33275,"byte_end":33284,"line_start":291,"line_end":291,"column_start":19,"column_end":28},"name":"or_insert","qualname":"<Entry>::or_insert","value":"pub unsafe fn or_insert(Self, Box<A>) -> &'a mut A","parent":null,"children":[],"decl_id":null,"docs":" Ensures a value is in the entry by inserting the default if empty, and returns\n a mutable reference to the value in the entry.","sig":null,"attributes":[{"value":"/ Ensures a value is in the entry by inserting the default if empty, and returns","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":32921,"byte_end":33003,"line_start":285,"line_end":285,"column_start":5,"column_end":87}},{"value":"/ a mutable reference to the value in the entry.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":33008,"byte_end":33058,"line_start":286,"line_end":286,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":33063,"byte_end":33066,"line_start":287,"line_end":287,"column_start":5,"column_end":8}},{"value":"/ It is the caller’s responsibility to ensure that the key of the entry corresponds with","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":33071,"byte_end":33163,"line_start":288,"line_end":288,"column_start":5,"column_end":95}},{"value":"/ the type ID of `value`. If they do not, memory safety may be violated.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":33168,"byte_end":33242,"line_start":289,"line_end":289,"column_start":5,"column_end":79}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":33247,"byte_end":33256,"line_start":290,"line_end":290,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":209},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":33857,"byte_end":33871,"line_start":304,"line_end":304,"column_start":19,"column_end":33},"name":"or_insert_with","qualname":"<Entry>::or_insert_with","value":"pub unsafe fn or_insert_with<F: FnOnce() -> Box<A>>(Self, F) -> &'a mut A","parent":null,"children":[],"decl_id":null,"docs":" Ensures a value is in the entry by inserting the result of the default function if empty,\n and returns a mutable reference to the value in the entry.","sig":null,"attributes":[{"value":"/ Ensures a value is in the entry by inserting the result of the default function if empty,","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":33480,"byte_end":33573,"line_start":298,"line_end":298,"column_start":5,"column_end":98}},{"value":"/ and returns a mutable reference to the value in the entry.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":33578,"byte_end":33640,"line_start":299,"line_end":299,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":33645,"byte_end":33648,"line_start":300,"line_end":300,"column_start":5,"column_end":8}},{"value":"/ It is the caller’s responsibility to ensure that the key of the entry corresponds with","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":33653,"byte_end":33745,"line_start":301,"line_end":301,"column_start":5,"column_end":95}},{"value":"/ the type ID of `value`. If they do not, memory safety may be violated.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":33750,"byte_end":33824,"line_start":302,"line_end":302,"column_start":5,"column_end":79}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":33829,"byte_end":33838,"line_start":303,"line_end":303,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":214},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":34223,"byte_end":34226,"line_start":315,"line_end":315,"column_start":12,"column_end":15},"name":"get","qualname":"<OccupiedEntry>::get","value":"pub fn get(&Self) -> &A","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the value in the entry.\n","sig":null,"attributes":[{"value":"/ Gets a reference to the value in the entry.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":34150,"byte_end":34197,"line_start":313,"line_end":313,"column_start":5,"column_end":52}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":34202,"byte_end":34211,"line_start":314,"line_end":314,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":215},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":34363,"byte_end":34370,"line_start":321,"line_end":321,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<OccupiedEntry>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut A","parent":null,"children":[],"decl_id":null,"docs":" Gets a mutable reference to the value in the entry.\n","sig":null,"attributes":[{"value":"/ Gets a mutable reference to the value in the entry.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":34282,"byte_end":34337,"line_start":319,"line_end":319,"column_start":5,"column_end":60}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":34342,"byte_end":34351,"line_start":320,"line_end":320,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":216},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":34604,"byte_end":34612,"line_start":328,"line_end":328,"column_start":12,"column_end":20},"name":"into_mut","qualname":"<OccupiedEntry>::into_mut","value":"pub fn into_mut(Self) -> &'a mut A","parent":null,"children":[],"decl_id":null,"docs":" Converts the OccupiedEntry into a mutable reference to the value in the entry\n with a lifetime bound to the collection itself.\n","sig":null,"attributes":[{"value":"/ Converts the OccupiedEntry into a mutable reference to the value in the entry","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":34441,"byte_end":34522,"line_start":325,"line_end":325,"column_start":5,"column_end":86}},{"value":"/ with a lifetime bound to the collection itself.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":34527,"byte_end":34578,"line_start":326,"line_end":326,"column_start":5,"column_end":56}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":34583,"byte_end":34592,"line_start":327,"line_end":327,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":217},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":34966,"byte_end":34972,"line_start":337,"line_end":337,"column_start":19,"column_end":25},"name":"insert","qualname":"<OccupiedEntry>::insert","value":"pub unsafe fn insert(&mut Self, Box<A>) -> Box<A>","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the entry, and returns the entry's old value.","sig":null,"attributes":[{"value":"/ Sets the value of the entry, and returns the entry's old value.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":34682,"byte_end":34749,"line_start":332,"line_end":332,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":34754,"byte_end":34757,"line_start":333,"line_end":333,"column_start":5,"column_end":8}},{"value":"/ It is the caller’s responsibility to ensure that the key of the entry corresponds with","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":34762,"byte_end":34854,"line_start":334,"line_end":334,"column_start":5,"column_end":95}},{"value":"/ the type ID of `value`. If they do not, memory safety may be violated.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":34859,"byte_end":34933,"line_start":335,"line_end":335,"column_start":5,"column_end":79}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":34938,"byte_end":34947,"line_start":336,"line_end":336,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":218},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":35134,"byte_end":35140,"line_start":343,"line_end":343,"column_start":12,"column_end":18},"name":"remove","qualname":"<OccupiedEntry>::remove","value":"pub fn remove(Self) -> Box<A>","parent":null,"children":[],"decl_id":null,"docs":" Takes the value out of the entry, and returns it.\n","sig":null,"attributes":[{"value":"/ Takes the value out of the entry, and returns it.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":35055,"byte_end":35108,"line_start":341,"line_end":341,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":35113,"byte_end":35122,"line_start":342,"line_end":342,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":222},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":35581,"byte_end":35587,"line_start":355,"line_end":355,"column_start":19,"column_end":25},"name":"insert","qualname":"<VacantEntry>::insert","value":"pub unsafe fn insert(Self, Box<A>) -> &'a mut A","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the entry with the VacantEntry's key,\n and returns a mutable reference to it","sig":null,"attributes":[{"value":"/ Sets the value of the entry with the VacantEntry's key,","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":35259,"byte_end":35318,"line_start":349,"line_end":349,"column_start":5,"column_end":64}},{"value":"/ and returns a mutable reference to it","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":35323,"byte_end":35364,"line_start":350,"line_end":350,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":35369,"byte_end":35372,"line_start":351,"line_end":351,"column_start":5,"column_end":8}},{"value":"/ It is the caller’s responsibility to ensure that the key of the entry corresponds with","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":35377,"byte_end":35469,"line_start":352,"line_end":352,"column_start":5,"column_end":95}},{"value":"/ the type ID of `value`. If they do not, memory safety may be violated.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":35474,"byte_end":35548,"line_start":353,"line_end":353,"column_start":5,"column_end":79}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":35553,"byte_end":35562,"line_start":354,"line_end":354,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":435},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","byte_start":3933,"byte_end":3936,"line_start":120,"line_end":120,"column_start":12,"column_end":15},"name":"Map","qualname":"::Map","value":"Map {  }","parent":null,"children":[{"krate":0,"index":437}],"decl_id":null,"docs":" A collection containing zero or one values for any given type and allowing convenient,\n type-safe access to those values.","sig":null,"attributes":[{"value":"/ A collection containing zero or one values for any given type and allowing convenient,","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","byte_start":2757,"byte_end":2847,"line_start":88,"line_end":88,"column_start":1,"column_end":91}},{"value":"/ type-safe access to those values.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","byte_start":2848,"byte_end":2885,"line_start":89,"line_end":89,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","byte_start":2886,"byte_end":2889,"line_start":90,"line_end":90,"column_start":1,"column_end":4}},{"value":"/ The type parameter `A` allows you to use a different value type; normally you will want it to","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","byte_start":2890,"byte_end":2987,"line_start":91,"line_end":91,"column_start":1,"column_end":98}},{"value":"/ be `anymap::any::Any`, but there are other choices:","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","byte_start":2988,"byte_end":3043,"line_start":92,"line_end":92,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","byte_start":3044,"byte_end":3047,"line_start":93,"line_end":93,"column_start":1,"column_end":4}},{"value":"/ - If you want the entire map to be cloneable, use `CloneAny` instead of `Any`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","byte_start":3048,"byte_end":3130,"line_start":94,"line_end":94,"column_start":1,"column_end":83}},{"value":"/ - You can add on `+ Send` and/or `+ Sync` (e.g. `Map<Any + Send>`) to add those bounds.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","byte_start":3131,"byte_end":3222,"line_start":95,"line_end":95,"column_start":1,"column_end":92}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","byte_start":3223,"byte_end":3226,"line_start":96,"line_end":96,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","byte_start":3227,"byte_end":3238,"line_start":97,"line_end":97,"column_start":1,"column_end":12}},{"value":"/ # use anymap::AnyMap;","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","byte_start":3239,"byte_end":3264,"line_start":98,"line_end":98,"column_start":1,"column_end":26}},{"value":"/ let mut data = AnyMap::new();","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","byte_start":3265,"byte_end":3298,"line_start":99,"line_end":99,"column_start":1,"column_end":34}},{"value":"/ assert_eq!(data.get(), None::<&i32>);","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","byte_start":3299,"byte_end":3340,"line_start":100,"line_end":100,"column_start":1,"column_end":42}},{"value":"/ data.insert(42i32);","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","byte_start":3341,"byte_end":3364,"line_start":101,"line_end":101,"column_start":1,"column_end":24}},{"value":"/ assert_eq!(data.get(), Some(&42i32));","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","byte_start":3365,"byte_end":3406,"line_start":102,"line_end":102,"column_start":1,"column_end":42}},{"value":"/ data.remove::<i32>();","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","byte_start":3407,"byte_end":3432,"line_start":103,"line_end":103,"column_start":1,"column_end":26}},{"value":"/ assert_eq!(data.get::<i32>(), None);","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","byte_start":3433,"byte_end":3473,"line_start":104,"line_end":104,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","byte_start":3474,"byte_end":3477,"line_start":105,"line_end":105,"column_start":1,"column_end":4}},{"value":"/ #[derive(Clone, PartialEq, Debug)]","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","byte_start":3478,"byte_end":3516,"line_start":106,"line_end":106,"column_start":1,"column_end":39}},{"value":"/ struct Foo {","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","byte_start":3517,"byte_end":3533,"line_start":107,"line_end":107,"column_start":1,"column_end":17}},{"value":"/     str: String,","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","byte_start":3534,"byte_end":3554,"line_start":108,"line_end":108,"column_start":1,"column_end":21}},{"value":"/ }","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","byte_start":3555,"byte_end":3560,"line_start":109,"line_end":109,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","byte_start":3561,"byte_end":3564,"line_start":110,"line_end":110,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(data.get::<Foo>(), None);","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","byte_start":3565,"byte_end":3605,"line_start":111,"line_end":111,"column_start":1,"column_end":41}},{"value":"/ data.insert(Foo { str: format!(\"foo\") });","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","byte_start":3606,"byte_end":3651,"line_start":112,"line_end":112,"column_start":1,"column_end":46}},{"value":"/ assert_eq!(data.get(), Some(&Foo { str: format!(\"foo\") }));","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","byte_start":3652,"byte_end":3715,"line_start":113,"line_end":113,"column_start":1,"column_end":64}},{"value":"/ data.get_mut::<Foo>().map(|foo| foo.str.push('t'));","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","byte_start":3716,"byte_end":3771,"line_start":114,"line_end":114,"column_start":1,"column_end":56}},{"value":"/ assert_eq!(&*data.get::<Foo>().unwrap().str, \"foot\");","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","byte_start":3772,"byte_end":3829,"line_start":115,"line_end":115,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","byte_start":3830,"byte_end":3837,"line_start":116,"line_end":116,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","byte_start":3838,"byte_end":3841,"line_start":117,"line_end":117,"column_start":1,"column_end":4}},{"value":"/ Values containing non-static references are not permitted.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","byte_start":3842,"byte_end":3904,"line_start":118,"line_end":118,"column_start":1,"column_end":63}}]},{"kind":"Type","id":{"krate":0,"index":226},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","byte_start":4592,"byte_end":4598,"line_start":139,"line_end":139,"column_start":10,"column_end":16},"name":"AnyMap","qualname":"::AnyMap","value":"Map<Any>","parent":null,"children":[],"decl_id":null,"docs":" The most common type of `Map`: just using `Any`.","sig":null,"attributes":[{"value":"/ The most common type of `Map`: just using `Any`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","byte_start":4281,"byte_end":4333,"line_start":134,"line_end":134,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","byte_start":4334,"byte_end":4337,"line_start":135,"line_end":135,"column_start":1,"column_end":4}},{"value":"/ Why is this a separate type alias rather than a default value for `Map<A>`? `Map::new()`","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","byte_start":4338,"byte_end":4430,"line_start":136,"line_end":136,"column_start":1,"column_end":93}},{"value":"/ doesn’t seem to be happy to infer that it should go with the default value.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","byte_start":4431,"byte_end":4512,"line_start":137,"line_end":137,"column_start":1,"column_end":80}},{"value":"/ It’s a bit sad, really. Ah well, I guess this approach will do.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","byte_start":4513,"byte_end":4582,"line_start":138,"line_end":138,"column_start":1,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":229},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","byte_start":4916,"byte_end":4919,"line_start":150,"line_end":150,"column_start":12,"column_end":15},"name":"get","qualname":"<Map<A>>::get","value":"pub fn get<T: IntoBox<A>>(&Self) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the value stored in the collection for the type `T`, if it exists.\n","sig":null,"attributes":[{"value":"/ Returns a reference to the value stored in the collection for the type `T`, if it exists.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","byte_start":4797,"byte_end":4890,"line_start":148,"line_end":148,"column_start":5,"column_end":98}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","byte_start":4895,"byte_end":4904,"line_start":149,"line_end":149,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":232},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","byte_start":5214,"byte_end":5221,"line_start":158,"line_end":158,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<Map<A>>::get_mut","value":"pub fn get_mut<T: IntoBox<A>>(&mut Self) -> Option<&mut T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the value stored in the collection for the type `T`,\n if it exists.\n","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the value stored in the collection for the type `T`,","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","byte_start":5079,"byte_end":5166,"line_start":155,"line_end":155,"column_start":5,"column_end":92}},{"value":"/ if it exists.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","byte_start":5171,"byte_end":5188,"line_start":156,"line_end":156,"column_start":5,"column_end":22}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","byte_start":5193,"byte_end":5202,"line_start":157,"line_end":157,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":235},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","byte_start":5602,"byte_end":5608,"line_start":167,"line_end":167,"column_start":12,"column_end":18},"name":"insert","qualname":"<Map<A>>::insert","value":"pub fn insert<T: IntoBox<A>>(&mut Self, T) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Sets the value stored in the collection for the type `T`.\n If the collection already had a value of type `T`, that value is returned.\n Otherwise, `None` is returned.\n","sig":null,"attributes":[{"value":"/ Sets the value stored in the collection for the type `T`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","byte_start":5393,"byte_end":5454,"line_start":163,"line_end":163,"column_start":5,"column_end":66}},{"value":"/ If the collection already had a value of type `T`, that value is returned.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","byte_start":5459,"byte_end":5537,"line_start":164,"line_end":164,"column_start":5,"column_end":83}},{"value":"/ Otherwise, `None` is returned.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","byte_start":5542,"byte_end":5576,"line_start":165,"line_end":165,"column_start":5,"column_end":39}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","byte_start":5581,"byte_end":5590,"line_start":166,"line_end":166,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":238},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","byte_start":5960,"byte_end":5966,"line_start":177,"line_end":177,"column_start":12,"column_end":18},"name":"remove","qualname":"<Map<A>>::remove","value":"pub fn remove<T: IntoBox<A>>(&mut Self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Removes the `T` value from the collection,\n returning it if there was one or `None` if there was not.\n","sig":null,"attributes":[{"value":"/ Removes the `T` value from the collection,","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","byte_start":5822,"byte_end":5868,"line_start":174,"line_end":174,"column_start":5,"column_end":51}},{"value":"/ returning it if there was one or `None` if there was not.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","byte_start":5873,"byte_end":5934,"line_start":175,"line_end":175,"column_start":5,"column_end":66}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","byte_start":5939,"byte_end":5948,"line_start":176,"line_end":176,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":241},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","byte_start":6219,"byte_end":6227,"line_start":184,"line_end":184,"column_start":12,"column_end":20},"name":"contains","qualname":"<Map<A>>::contains","value":"pub fn contains<T: IntoBox<A>>(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the collection contains a value of type `T`.\n","sig":null,"attributes":[{"value":"/ Returns true if the collection contains a value of type `T`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","byte_start":6129,"byte_end":6193,"line_start":182,"line_end":182,"column_start":5,"column_end":69}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","byte_start":6198,"byte_end":6207,"line_start":183,"line_end":183,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":243},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","byte_start":6428,"byte_end":6433,"line_start":190,"line_end":190,"column_start":12,"column_end":17},"name":"entry","qualname":"<Map<A>>::entry","value":"pub fn entry<T: IntoBox<A>>(&mut Self) -> Entry<, A, T>","parent":null,"children":[],"decl_id":null,"docs":" Gets the entry for the given type in the collection for in-place manipulation\n","sig":null,"attributes":[{"value":"/ Gets the entry for the given type in the collection for in-place manipulation","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","byte_start":6321,"byte_end":6402,"line_start":188,"line_end":188,"column_start":5,"column_end":86}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","byte_start":6407,"byte_end":6416,"line_start":189,"line_end":189,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":254},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","byte_start":7337,"byte_end":7350,"line_start":226,"line_end":226,"column_start":12,"column_end":25},"name":"OccupiedEntry","qualname":"::OccupiedEntry","value":"OccupiedEntry {  }","parent":null,"children":[{"krate":0,"index":258},{"krate":0,"index":259}],"decl_id":null,"docs":" A view into a single occupied location in an `Map`.\n","sig":null,"attributes":[{"value":"/ A view into a single occupied location in an `Map`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","byte_start":7270,"byte_end":7325,"line_start":225,"line_end":225,"column_start":1,"column_end":56}}]},{"kind":"Struct","id":{"krate":0,"index":260},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","byte_start":7525,"byte_end":7536,"line_start":232,"line_end":232,"column_start":12,"column_end":23},"name":"VacantEntry","qualname":"::VacantEntry","value":"VacantEntry {  }","parent":null,"children":[{"krate":0,"index":264},{"krate":0,"index":265}],"decl_id":null,"docs":" A view into a single empty location in an `Map`.\n","sig":null,"attributes":[{"value":"/ A view into a single empty location in an `Map`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","byte_start":7461,"byte_end":7513,"line_start":231,"line_end":231,"column_start":1,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":270},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","byte_start":7812,"byte_end":7820,"line_start":240,"line_end":240,"column_start":5,"column_end":13},"name":"Occupied","qualname":"::Entry::Occupied","value":"Entry::Occupied(OccupiedEntry)","parent":{"krate":0,"index":266},"children":[],"decl_id":null,"docs":" An occupied Entry\n","sig":null,"attributes":[{"value":"/ An occupied Entry","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","byte_start":7786,"byte_end":7807,"line_start":239,"line_end":239,"column_start":5,"column_end":26}}]},{"kind":"TupleVariant","id":{"krate":0,"index":273},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","byte_start":7874,"byte_end":7880,"line_start":242,"line_end":242,"column_start":5,"column_end":11},"name":"Vacant","qualname":"::Entry::Vacant","value":"Entry::Vacant(VacantEntry)","parent":{"krate":0,"index":266},"children":[],"decl_id":null,"docs":" A vacant Entry\n","sig":null,"attributes":[{"value":"/ A vacant Entry","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","byte_start":7851,"byte_end":7869,"line_start":241,"line_end":241,"column_start":5,"column_end":23}}]},{"kind":"Enum","id":{"krate":0,"index":266},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","byte_start":7734,"byte_end":7739,"line_start":238,"line_end":238,"column_start":10,"column_end":15},"name":"Entry","qualname":"::Entry","value":"pub enum Entry<'a, A: ?Sized + UncheckedAnyExt, V: 'a> {\n    Occupied(OccupiedEntry),\n    Vacant(VacantEntry),\n}","parent":null,"children":[{"krate":0,"index":270},{"krate":0,"index":273}],"decl_id":null,"docs":" A view into a single location in an `Map`, which may be vacant or occupied.\n","sig":null,"attributes":[{"value":"/ A view into a single location in an `Map`, which may be vacant or occupied.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","byte_start":7645,"byte_end":7724,"line_start":237,"line_end":237,"column_start":1,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":280},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","byte_start":8146,"byte_end":8155,"line_start":249,"line_end":249,"column_start":12,"column_end":21},"name":"or_insert","qualname":"<Entry>::or_insert","value":"pub fn or_insert(Self, V) -> &'a mut V","parent":null,"children":[],"decl_id":null,"docs":" Ensures a value is in the entry by inserting the default if empty, and returns\n a mutable reference to the value in the entry.\n","sig":null,"attributes":[{"value":"/ Ensures a value is in the entry by inserting the default if empty, and returns","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","byte_start":7983,"byte_end":8065,"line_start":246,"line_end":246,"column_start":5,"column_end":87}},{"value":"/ a mutable reference to the value in the entry.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","byte_start":8070,"byte_end":8120,"line_start":247,"line_end":247,"column_start":5,"column_end":55}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","byte_start":8125,"byte_end":8134,"line_start":248,"line_end":248,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":281},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","byte_start":8532,"byte_end":8546,"line_start":259,"line_end":259,"column_start":12,"column_end":26},"name":"or_insert_with","qualname":"<Entry>::or_insert_with","value":"pub fn or_insert_with<F: FnOnce() -> V>(Self, F) -> &'a mut V","parent":null,"children":[],"decl_id":null,"docs":" Ensures a value is in the entry by inserting the result of the default function if empty,\n and returns a mutable reference to the value in the entry.\n","sig":null,"attributes":[{"value":"/ Ensures a value is in the entry by inserting the result of the default function if empty,","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","byte_start":8346,"byte_end":8439,"line_start":256,"line_end":256,"column_start":5,"column_end":98}},{"value":"/ and returns a mutable reference to the value in the entry.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","byte_start":8444,"byte_end":8506,"line_start":257,"line_end":257,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","byte_start":8511,"byte_end":8520,"line_start":258,"line_end":258,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":287},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","byte_start":8910,"byte_end":8913,"line_start":270,"line_end":270,"column_start":12,"column_end":15},"name":"get","qualname":"<OccupiedEntry>::get","value":"pub fn get(&Self) -> &V","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the value in the entry\n","sig":null,"attributes":[{"value":"/ Gets a reference to the value in the entry","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","byte_start":8838,"byte_end":8884,"line_start":268,"line_end":268,"column_start":5,"column_end":51}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","byte_start":8889,"byte_end":8898,"line_start":269,"line_end":269,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":288},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","byte_start":9081,"byte_end":9088,"line_start":276,"line_end":276,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<OccupiedEntry>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut V","parent":null,"children":[],"decl_id":null,"docs":" Gets a mutable reference to the value in the entry\n","sig":null,"attributes":[{"value":"/ Gets a mutable reference to the value in the entry","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","byte_start":9001,"byte_end":9055,"line_start":274,"line_end":274,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","byte_start":9060,"byte_end":9069,"line_start":275,"line_end":275,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":289},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","byte_start":9350,"byte_end":9358,"line_start":283,"line_end":283,"column_start":12,"column_end":20},"name":"into_mut","qualname":"<OccupiedEntry>::into_mut","value":"pub fn into_mut(Self) -> &'a mut V","parent":null,"children":[],"decl_id":null,"docs":" Converts the OccupiedEntry into a mutable reference to the value in the entry\n with a lifetime bound to the collection itself\n","sig":null,"attributes":[{"value":"/ Converts the OccupiedEntry into a mutable reference to the value in the entry","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","byte_start":9188,"byte_end":9269,"line_start":280,"line_end":280,"column_start":5,"column_end":86}},{"value":"/ with a lifetime bound to the collection itself","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","byte_start":9274,"byte_end":9324,"line_start":281,"line_end":281,"column_start":5,"column_end":55}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","byte_start":9329,"byte_end":9338,"line_start":282,"line_end":282,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":290},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","byte_start":9549,"byte_end":9555,"line_start":289,"line_end":289,"column_start":12,"column_end":18},"name":"insert","qualname":"<OccupiedEntry>::insert","value":"pub fn insert(&mut Self, V) -> V","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the entry, and returns the entry's old value\n","sig":null,"attributes":[{"value":"/ Sets the value of the entry, and returns the entry's old value","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","byte_start":9457,"byte_end":9523,"line_start":287,"line_end":287,"column_start":5,"column_end":71}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","byte_start":9528,"byte_end":9537,"line_start":288,"line_end":288,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":291},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","byte_start":9750,"byte_end":9756,"line_start":295,"line_end":295,"column_start":12,"column_end":18},"name":"remove","qualname":"<OccupiedEntry>::remove","value":"pub fn remove(Self) -> V","parent":null,"children":[],"decl_id":null,"docs":" Takes the value out of the entry, and returns it\n","sig":null,"attributes":[{"value":"/ Takes the value out of the entry, and returns it","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","byte_start":9672,"byte_end":9724,"line_start":293,"line_end":293,"column_start":5,"column_end":57}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","byte_start":9729,"byte_end":9738,"line_start":294,"line_end":294,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":296},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","byte_start":10052,"byte_end":10058,"line_start":304,"line_end":304,"column_start":12,"column_end":18},"name":"insert","qualname":"<VacantEntry>::insert","value":"pub fn insert(Self, V) -> &'a mut V","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the entry with the VacantEntry's key,\n and returns a mutable reference to it\n","sig":null,"attributes":[{"value":"/ Sets the value of the entry with the VacantEntry's key,","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","byte_start":9921,"byte_end":9980,"line_start":301,"line_end":301,"column_start":5,"column_end":64}},{"value":"/ and returns a mutable reference to it","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","byte_start":9985,"byte_end":10026,"line_start":302,"line_end":302,"column_start":5,"column_end":46}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","byte_start":10031,"byte_end":10040,"line_start":303,"line_end":303,"column_start":5,"column_end":14}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/any.rs","byte_start":18950,"byte_end":18951,"line_start":24,"line_end":24,"column_start":37,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":37},{"krate":0,"index":38},{"krate":0,"index":39},{"krate":0,"index":40}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":23778,"byte_end":23790,"line_start":22,"line_end":22,"column_start":17,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":96},{"krate":0,"index":97}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":25536,"byte_end":25542,"line_start":64,"line_end":64,"column_start":45,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":100}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":25738,"byte_end":25744,"line_start":73,"line_end":73,"column_start":47,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":103}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":26220,"byte_end":26224,"line_start":91,"line_end":91,"column_start":52,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":107},{"krate":0,"index":108},{"krate":0,"index":110}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":26494,"byte_end":26498,"line_start":96,"line_end":96,"column_start":61,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":114}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":26757,"byte_end":26764,"line_start":104,"line_end":104,"column_start":52,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":122},{"krate":0,"index":123},{"krate":0,"index":125}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":27046,"byte_end":27053,"line_start":109,"line_end":109,"column_start":61,"column_end":68},"value":"","parent":null,"children":[{"krate":0,"index":129}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":27299,"byte_end":27307,"line_start":117,"line_end":117,"column_start":48,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":135},{"krate":0,"index":136},{"krate":0,"index":138}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":27568,"byte_end":27576,"line_start":122,"line_end":122,"column_start":57,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":141}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":27825,"byte_end":27830,"line_start":130,"line_end":130,"column_start":52,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":149},{"krate":0,"index":150},{"krate":0,"index":152}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":28099,"byte_end":28104,"line_start":135,"line_end":135,"column_start":61,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":156}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":28209,"byte_end":28215,"line_start":139,"line_end":139,"column_start":35,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":159},{"krate":0,"index":160},{"krate":0,"index":161},{"krate":0,"index":162},{"krate":0,"index":163},{"krate":0,"index":166},{"krate":0,"index":168},{"krate":0,"index":171},{"krate":0,"index":172}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":31580,"byte_end":31586,"line_start":238,"line_end":238,"column_start":51,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":177},{"krate":0,"index":178}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":31824,"byte_end":31830,"line_start":247,"line_end":247,"column_start":54,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":182}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":32060,"byte_end":32066,"line_start":254,"line_end":254,"column_start":52,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":185},{"krate":0,"index":186},{"krate":0,"index":187}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Inherent","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":32902,"byte_end":32907,"line_start":284,"line_end":284,"column_start":39,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":208},{"krate":0,"index":209}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Inherent","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":34123,"byte_end":34136,"line_start":312,"line_end":312,"column_start":39,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":214},{"krate":0,"index":215},{"krate":0,"index":216},{"krate":0,"index":217},{"krate":0,"index":218}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Inherent","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":35234,"byte_end":35245,"line_start":348,"line_end":348,"column_start":39,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":222}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","byte_start":4138,"byte_end":4141,"line_start":125,"line_end":125,"column_start":45,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":225}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Inherent","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","byte_start":4784,"byte_end":4787,"line_start":147,"line_end":147,"column_start":35,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":229},{"krate":0,"index":232},{"krate":0,"index":235},{"krate":0,"index":238},{"krate":0,"index":241},{"krate":0,"index":243}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","byte_start":6893,"byte_end":6896,"line_start":204,"line_end":204,"column_start":56,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":247}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","byte_start":7035,"byte_end":7038,"line_start":211,"line_end":211,"column_start":56,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":250}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","byte_start":7188,"byte_end":7191,"line_start":218,"line_end":218,"column_start":55,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":253}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Inherent","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","byte_start":7961,"byte_end":7966,"line_start":245,"line_end":245,"column_start":54,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":280},{"krate":0,"index":281}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Inherent","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","byte_start":8808,"byte_end":8821,"line_start":267,"line_end":267,"column_start":54,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":287},{"krate":0,"index":288},{"krate":0,"index":289},{"krate":0,"index":290},{"krate":0,"index":291}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Inherent","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","byte_start":9893,"byte_end":9904,"line_start":300,"line_end":300,"column_start":54,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":296}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","byte_start":2738,"byte_end":2741,"line_start":85,"line_end":85,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":23}},{"kind":"Mod","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","byte_start":2751,"byte_end":2754,"line_start":86,"line_end":86,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":54}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/any.rs","byte_start":18950,"byte_end":18951,"line_start":24,"line_end":24,"column_start":37,"column_end":38},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":36},"to":{"krate":0,"index":30}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/any.rs","byte_start":21345,"byte_end":21348,"line_start":96,"line_end":96,"column_start":28,"column_end":31},"kind":"SuperTrait","from":{"krate":0,"index":297},"to":{"krate":0,"index":43}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/any.rs","byte_start":21683,"byte_end":21686,"line_start":104,"line_end":104,"column_start":49,"column_end":52},"kind":"SuperTrait","from":{"krate":0,"index":297},"to":{"krate":0,"index":50}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":23778,"byte_end":23790,"line_start":22,"line_end":22,"column_start":17,"column_end":29},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":407},"to":{"krate":2,"index":9045}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":25536,"byte_end":25542,"line_start":64,"line_end":64,"column_start":45,"column_end":51},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":411},"to":{"krate":2,"index":2450}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":25738,"byte_end":25744,"line_start":73,"line_end":73,"column_start":47,"column_end":53},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":411},"to":{"krate":2,"index":2803}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":26220,"byte_end":26224,"line_start":91,"line_end":91,"column_start":52,"column_end":56},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":427},"to":{"krate":2,"index":7249}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":26494,"byte_end":26498,"line_start":96,"line_end":96,"column_start":61,"column_end":65},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":427},"to":{"krate":2,"index":7138}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":26757,"byte_end":26764,"line_start":104,"line_end":104,"column_start":52,"column_end":59},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":115},"to":{"krate":2,"index":7249}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":27046,"byte_end":27053,"line_start":109,"line_end":109,"column_start":61,"column_end":68},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":115},"to":{"krate":2,"index":7138}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":27299,"byte_end":27307,"line_start":117,"line_end":117,"column_start":48,"column_end":56},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":130},"to":{"krate":2,"index":7249}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":27568,"byte_end":27576,"line_start":122,"line_end":122,"column_start":57,"column_end":65},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":130},"to":{"krate":2,"index":7138}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":27825,"byte_end":27830,"line_start":130,"line_end":130,"column_start":52,"column_end":57},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":142},"to":{"krate":2,"index":7249}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":28099,"byte_end":28104,"line_start":135,"line_end":135,"column_start":61,"column_end":66},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":142},"to":{"krate":2,"index":7138}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":28209,"byte_end":28215,"line_start":139,"line_end":139,"column_start":35,"column_end":41},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":411},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":31580,"byte_end":31586,"line_start":238,"line_end":238,"column_start":51,"column_end":57},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":411},"to":{"krate":2,"index":3132}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":31824,"byte_end":31830,"line_start":247,"line_end":247,"column_start":54,"column_end":60},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":411},"to":{"krate":2,"index":3136}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":32060,"byte_end":32066,"line_start":254,"line_end":254,"column_start":52,"column_end":58},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":411},"to":{"krate":2,"index":7086}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":32902,"byte_end":32907,"line_start":284,"line_end":284,"column_start":39,"column_end":44},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":196},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":34123,"byte_end":34136,"line_start":312,"line_end":312,"column_start":39,"column_end":52},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":188},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/raw.rs","byte_start":35234,"byte_end":35245,"line_start":348,"line_end":348,"column_start":39,"column_end":50},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":192},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","byte_start":4138,"byte_end":4141,"line_start":125,"line_end":125,"column_start":45,"column_end":48},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":435},"to":{"krate":2,"index":2450}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","byte_start":4784,"byte_end":4787,"line_start":147,"line_end":147,"column_start":35,"column_end":38},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":435},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","byte_start":6893,"byte_end":6896,"line_start":204,"line_end":204,"column_start":56,"column_end":59},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":435},"to":{"krate":2,"index":2722}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","byte_start":7035,"byte_end":7038,"line_start":211,"line_end":211,"column_start":56,"column_end":59},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":435},"to":{"krate":2,"index":2725}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","byte_start":7188,"byte_end":7191,"line_start":218,"line_end":218,"column_start":55,"column_end":58},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":435},"to":{"krate":2,"index":2728}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","byte_start":7961,"byte_end":7966,"line_start":245,"line_end":245,"column_start":54,"column_end":59},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":266},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","byte_start":8808,"byte_end":8821,"line_start":267,"line_end":267,"column_start":54,"column_end":67},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":254},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/anymap-0.12.1/src/lib.rs","byte_start":9893,"byte_end":9904,"line_start":300,"line_end":300,"column_start":54,"column_end":65},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":260},"to":{"krate":4294967295,"index":4294967295}}]}