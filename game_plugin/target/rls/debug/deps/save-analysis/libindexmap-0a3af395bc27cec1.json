{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2","program":"/home/mramirez/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","indexmap","--edition=2018","/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=0a3af395bc27cec1","-C","extra-filename=-0a3af395bc27cec1","--out-dir","/home/mramirez/code/projects/games/bug_game/target/rls/debug/deps","-L","dependency=/home/mramirez/code/projects/games/bug_game/target/rls/debug/deps","--extern","hashbrown=/home/mramirez/code/projects/games/bug_game/target/rls/debug/deps/libhashbrown-2e08306ce07e000e.rmeta","--cap-lints","allow","--cfg","has_std","--error-format=json","--sysroot","/home/mramirez/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu"],"output":"/home/mramirez/code/projects/games/bug_game/target/rls/debug/deps/libindexmap-0a3af395bc27cec1.rmeta"},"prelude":{"crate_id":{"name":"indexmap","disambiguator":[5828254732639855931,9406981498523653207]},"crate_root":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src","external_crates":[{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[17044353007700780372,2918200604221815240]}},{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[15333840167806743833,9889193056877993824]}},{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[4550415707075219492,6623162258675921486]}},{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","num":4,"id":{"name":"std","disambiguator":[397594041871667817,11704163070354659695]}},{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[8289379911494056514,13856099756999900329]}},{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[10514502805115346386,576110030083780649]}},{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[9878185313679130060,1975285035821961205]}},{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[4010603182529655334,7152219772350788052]}},{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[1807637986128902209,18379128151258407121]}},{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[11140927657351163542,6267109750485550558]}},{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[13809795498598848728,13320395723520943315]}},{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","num":12,"id":{"name":"std_detect","disambiguator":[13869841232067652907,9875669357213642224]}},{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","num":13,"id":{"name":"addr2line","disambiguator":[15533050656730733495,14669839968799848603]}},{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","num":14,"id":{"name":"gimli","disambiguator":[14371692877540073659,8181723439448527964]}},{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","num":15,"id":{"name":"object","disambiguator":[639541300699627395,1995254029228069844]}},{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","num":16,"id":{"name":"miniz_oxide","disambiguator":[12482123824895737424,11765111494567609733]}},{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","num":17,"id":{"name":"adler","disambiguator":[1169880241773671279,8605314106566979368]}},{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","num":18,"id":{"name":"panic_unwind","disambiguator":[5016943468141875609,13494347935157563341]}},{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core/raw.rs","num":19,"id":{"name":"hashbrown","disambiguator":[8298503007030453831,6187886020237225386]}},{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core/raw.rs","num":20,"id":{"name":"ahash","disambiguator":[8167947935135209263,11163943892117107900]}}],"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":92,"byte_end":5450,"line_start":2,"line_end":192,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":44},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":12841,"byte_end":12852,"line_start":6,"line_end":6,"column_start":30,"column_end":41},"alias_span":null,"name":"MutableKeys","value":"","parent":{"krate":0,"index":85}},{"kind":"Use","ref_id":{"krate":0,"index":268},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":13399,"byte_end":13404,"line_start":27,"line_end":27,"column_start":22,"column_end":27},"alias_span":null,"name":"Entry","value":"","parent":{"krate":0,"index":85}},{"kind":"Use","ref_id":{"krate":0,"index":132},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":13406,"byte_end":13419,"line_start":27,"line_end":27,"column_start":29,"column_end":42},"alias_span":null,"name":"OccupiedEntry","value":"","parent":{"krate":0,"index":85}},{"kind":"Use","ref_id":{"krate":0,"index":311},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":13421,"byte_end":13432,"line_start":27,"line_end":27,"column_start":44,"column_end":55},"alias_span":null,"name":"VacantEntry","value":"","parent":{"krate":0,"index":85}},{"kind":"Use","ref_id":{"krate":0,"index":21},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":3648,"byte_end":3658,"line_start":111,"line_end":111,"column_start":28,"column_end":38},"alias_span":null,"name":"Equivalent","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":408},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":3680,"byte_end":3688,"line_start":112,"line_end":112,"column_start":21,"column_end":29},"alias_span":null,"name":"IndexMap","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":830},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":3710,"byte_end":3718,"line_start":113,"line_end":113,"column_start":21,"column_end":29},"alias_span":null,"name":"IndexSet","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":92,"byte_end":5450,"line_start":2,"line_end":192,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":9},{"krate":0,"index":12},{"krate":0,"index":17},{"krate":0,"index":28},{"krate":0,"index":63},{"krate":0,"index":85},{"krate":0,"index":765},{"krate":0,"index":1184},{"krate":0,"index":1187},{"krate":0,"index":1190},{"krate":0,"index":1290},{"krate":0,"index":1293},{"krate":0,"index":1295},{"krate":0,"index":1296},{"krate":0,"index":1298},{"krate":0,"index":1299},{"krate":0,"index":1193},{"krate":0,"index":1302},{"krate":0,"index":1308},{"krate":0,"index":1311},{"krate":0,"index":1195},{"krate":0,"index":1200},{"krate":0,"index":1211}],"decl_id":null,"docs":" [`IndexMap`] is a hash table where the iteration order of the key-value\n pairs is independent of the hash values of the keys.","sig":null,"attributes":[{"value":"deny(unsafe_code)","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":92,"byte_end":113,"line_start":2,"line_end":2,"column_start":1,"column_end":22}},{"value":"warn(rust_2018_idioms)","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":114,"byte_end":140,"line_start":3,"line_end":3,"column_start":1,"column_end":27}},{"value":"no_std","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":196,"byte_end":206,"line_start":5,"line_end":5,"column_start":1,"column_end":11}},{"value":"/ [`IndexMap`] is a hash table where the iteration order of the key-value","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":208,"byte_end":283,"line_start":7,"line_end":7,"column_start":1,"column_end":76}},{"value":"/ pairs is independent of the hash values of the keys.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":284,"byte_end":340,"line_start":8,"line_end":8,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":341,"byte_end":344,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ [`IndexSet`] is a corresponding hash set using the same implementation and","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":345,"byte_end":423,"line_start":10,"line_end":10,"column_start":1,"column_end":79}},{"value":"/ with similar properties.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":424,"byte_end":452,"line_start":11,"line_end":11,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":453,"byte_end":456,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ [`IndexMap`]: map/struct.IndexMap.html","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":457,"byte_end":499,"line_start":13,"line_end":13,"column_start":1,"column_end":43}},{"value":"/ [`IndexSet`]: set/struct.IndexSet.html","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":500,"byte_end":542,"line_start":14,"line_end":14,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":543,"byte_end":546,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":547,"byte_end":550,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ ### Feature Highlights","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":551,"byte_end":577,"line_start":17,"line_end":17,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":578,"byte_end":581,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ [`IndexMap`] and [`IndexSet`] are drop-in compatible with the std `HashMap`","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":582,"byte_end":661,"line_start":19,"line_end":19,"column_start":1,"column_end":80}},{"value":"/ and `HashSet`, but they also have some features of note:","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":662,"byte_end":722,"line_start":20,"line_end":20,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":723,"byte_end":726,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ - The ordering semantics (see their documentation for details)","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":727,"byte_end":793,"line_start":22,"line_end":22,"column_start":1,"column_end":67}},{"value":"/ - Sorting methods and the [`.pop()`][IndexMap::pop] methods.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":794,"byte_end":858,"line_start":23,"line_end":23,"column_start":1,"column_end":65}},{"value":"/ - The [`Equivalent`] trait, which offers more flexible equality definitions","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":859,"byte_end":938,"line_start":24,"line_end":24,"column_start":1,"column_end":80}},{"value":"/   between borrowed and owned versions of keys.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":939,"byte_end":989,"line_start":25,"line_end":25,"column_start":1,"column_end":51}},{"value":"/ - The [`MutableKeys`][map::MutableKeys] trait, which gives opt-in mutable","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":990,"byte_end":1067,"line_start":26,"line_end":26,"column_start":1,"column_end":78}},{"value":"/   access to hash map keys.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":1068,"byte_end":1098,"line_start":27,"line_end":27,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":1099,"byte_end":1102,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ ### Alternate Hashers","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":1103,"byte_end":1128,"line_start":29,"line_end":29,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":1129,"byte_end":1132,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ [`IndexMap`] and [`IndexSet`] have a default hasher type `S = RandomState`,","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":1133,"byte_end":1212,"line_start":31,"line_end":31,"column_start":1,"column_end":80}},{"value":"/ just like the standard `HashMap` and `HashSet`, which is resistant to","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":1213,"byte_end":1286,"line_start":32,"line_end":32,"column_start":1,"column_end":74}},{"value":"/ HashDoS attacks but not the most performant. Type aliases can make it easier","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":1287,"byte_end":1367,"line_start":33,"line_end":33,"column_start":1,"column_end":81}},{"value":"/ to use alternate hashers:","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":1368,"byte_end":1397,"line_start":34,"line_end":34,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":1398,"byte_end":1401,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":1402,"byte_end":1409,"line_start":36,"line_end":36,"column_start":1,"column_end":8}},{"value":"/ use fnv::FnvBuildHasher;","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":1410,"byte_end":1438,"line_start":37,"line_end":37,"column_start":1,"column_end":29}},{"value":"/ use fxhash::FxBuildHasher;","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":1439,"byte_end":1469,"line_start":38,"line_end":38,"column_start":1,"column_end":31}},{"value":"/ use indexmap::{IndexMap, IndexSet};","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":1470,"byte_end":1509,"line_start":39,"line_end":39,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":1510,"byte_end":1513,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ type FnvIndexMap<K, V> = IndexMap<K, V, FnvBuildHasher>;","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":1514,"byte_end":1574,"line_start":41,"line_end":41,"column_start":1,"column_end":61}},{"value":"/ type FnvIndexSet<T> = IndexSet<T, FnvBuildHasher>;","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":1575,"byte_end":1629,"line_start":42,"line_end":42,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":1630,"byte_end":1633,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ type FxIndexMap<K, V> = IndexMap<K, V, FxBuildHasher>;","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":1634,"byte_end":1692,"line_start":44,"line_end":44,"column_start":1,"column_end":59}},{"value":"/ type FxIndexSet<T> = IndexSet<T, FxBuildHasher>;","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":1693,"byte_end":1745,"line_start":45,"line_end":45,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":1746,"byte_end":1749,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ let std: IndexSet<i32> = (0..100).collect();","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":1750,"byte_end":1798,"line_start":47,"line_end":47,"column_start":1,"column_end":49}},{"value":"/ let fnv: FnvIndexSet<i32> = (0..100).collect();","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":1799,"byte_end":1850,"line_start":48,"line_end":48,"column_start":1,"column_end":52}},{"value":"/ let fx: FxIndexSet<i32> = (0..100).collect();","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":1851,"byte_end":1900,"line_start":49,"line_end":49,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(std, fnv);","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":1901,"byte_end":1926,"line_start":50,"line_end":50,"column_start":1,"column_end":26}},{"value":"/ assert_eq!(std, fx);","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":1927,"byte_end":1951,"line_start":51,"line_end":51,"column_start":1,"column_end":25}},{"value":"/ ```","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":1952,"byte_end":1959,"line_start":52,"line_end":52,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":1960,"byte_end":1963,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ ### Rust Version","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":1964,"byte_end":1984,"line_start":54,"line_end":54,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":1985,"byte_end":1988,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ This version of indexmap requires Rust 1.36 or later.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":1989,"byte_end":2046,"line_start":56,"line_end":56,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":2047,"byte_end":2050,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ The indexmap 1.x release series will use a carefully considered version","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":2051,"byte_end":2126,"line_start":58,"line_end":58,"column_start":1,"column_end":76}},{"value":"/ upgrade policy, where in a later 1.x version, we will raise the minimum","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":2127,"byte_end":2202,"line_start":59,"line_end":59,"column_start":1,"column_end":76}},{"value":"/ required Rust version.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":2203,"byte_end":2229,"line_start":60,"line_end":60,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":2230,"byte_end":2233,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ ## No Standard Library Targets","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":2234,"byte_end":2268,"line_start":62,"line_end":62,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":2269,"byte_end":2272,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ This crate supports being built without `std`, requiring","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":2273,"byte_end":2333,"line_start":64,"line_end":64,"column_start":1,"column_end":61}},{"value":"/ `alloc` instead. This is enabled automatically when it is detected that","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":2334,"byte_end":2409,"line_start":65,"line_end":65,"column_start":1,"column_end":76}},{"value":"/ `std` is not available. There is no crate feature to enable/disable to","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":2410,"byte_end":2484,"line_start":66,"line_end":66,"column_start":1,"column_end":75}},{"value":"/ trigger this. It can be tested by building for a std-less target.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":2485,"byte_end":2554,"line_start":67,"line_end":67,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":2555,"byte_end":2558,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/ - Creating maps and sets using [`new`][IndexMap::new] and","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":2559,"byte_end":2620,"line_start":69,"line_end":69,"column_start":1,"column_end":62}},{"value":"/ [`with_capacity`][IndexMap::with_capacity] is unavailable without `std`.  ","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":2621,"byte_end":2699,"line_start":70,"line_end":70,"column_start":1,"column_end":79}},{"value":"/   Use methods [`IndexMap::default`][def],","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":2700,"byte_end":2745,"line_start":71,"line_end":71,"column_start":1,"column_end":46}},{"value":"/   [`with_hasher`][IndexMap::with_hasher],","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":2746,"byte_end":2791,"line_start":72,"line_end":72,"column_start":1,"column_end":46}},{"value":"/   [`with_capacity_and_hasher`][IndexMap::with_capacity_and_hasher] instead.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":2792,"byte_end":2871,"line_start":73,"line_end":73,"column_start":1,"column_end":80}},{"value":"/   A no-std compatible hasher will be needed as well, for example","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":2872,"byte_end":2940,"line_start":74,"line_end":74,"column_start":1,"column_end":69}},{"value":"/   from the crate `twox-hash`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":2941,"byte_end":2974,"line_start":75,"line_end":75,"column_start":1,"column_end":34}},{"value":"/ - Macros [`indexmap!`] and [`indexset!`] are unavailable without `std`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":2975,"byte_end":3050,"line_start":76,"line_end":76,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":3051,"byte_end":3054,"line_start":77,"line_end":77,"column_start":1,"column_end":4}},{"value":"/ [def]: map/struct.IndexMap.html#impl-Default","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":3055,"byte_end":3103,"line_start":78,"line_end":78,"column_start":1,"column_end":49}}]},{"kind":"Trait","id":{"krate":0,"index":21},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/equivalent.rs","byte_start":9081,"byte_end":9091,"line_start":13,"line_end":13,"column_start":11,"column_end":21},"name":"Equivalent","qualname":"::equivalent::Equivalent","value":"Equivalent<K: ?Sized>","parent":null,"children":[{"krate":0,"index":23}],"decl_id":null,"docs":" Key equivalence trait.","sig":null,"attributes":[{"value":"/ Key equivalence trait.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/equivalent.rs","byte_start":8691,"byte_end":8717,"line_start":3,"line_end":3,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/equivalent.rs","byte_start":8718,"byte_end":8721,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ This trait allows hash table lookup to be customized.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/equivalent.rs","byte_start":8722,"byte_end":8779,"line_start":5,"line_end":5,"column_start":1,"column_end":58}},{"value":"/ It has one blanket implementation that uses the regular `Borrow` solution,","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/equivalent.rs","byte_start":8780,"byte_end":8858,"line_start":6,"line_end":6,"column_start":1,"column_end":79}},{"value":"/ just like `HashMap` and `BTreeMap` do, so that you can pass `&str` to lookup","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/equivalent.rs","byte_start":8859,"byte_end":8939,"line_start":7,"line_end":7,"column_start":1,"column_end":81}},{"value":"/ into a map with `String` keys and so on.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/equivalent.rs","byte_start":8940,"byte_end":8984,"line_start":8,"line_end":8,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/equivalent.rs","byte_start":8985,"byte_end":8988,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ # Contract","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/equivalent.rs","byte_start":8989,"byte_end":9003,"line_start":10,"line_end":10,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/equivalent.rs","byte_start":9004,"byte_end":9007,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ The implementor **must** hash like `K`, if it is hashable.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/equivalent.rs","byte_start":9008,"byte_end":9070,"line_start":12,"line_end":12,"column_start":1,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":23},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/equivalent.rs","byte_start":9179,"byte_end":9189,"line_start":15,"line_end":15,"column_start":8,"column_end":18},"name":"equivalent","qualname":"::equivalent::Equivalent::equivalent","value":"pub fn equivalent(&Self, &K) -> bool","parent":{"krate":0,"index":21},"children":[],"decl_id":null,"docs":" Compare self to `key` and return `true` if they are equal.\n","sig":null,"attributes":[{"value":"/ Compare self to `key` and return `true` if they are equal.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/equivalent.rs","byte_start":9109,"byte_end":9171,"line_start":14,"line_end":14,"column_start":5,"column_end":67}}]},{"kind":"Struct","id":{"krate":0,"index":43},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/mutable_keys.rs","byte_start":9485,"byte_end":9498,"line_start":5,"line_end":5,"column_start":12,"column_end":25},"name":"PrivateMarker","qualname":"::mutable_keys::PrivateMarker","value":"PrivateMarker {  }","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":44},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/mutable_keys.rs","byte_start":10046,"byte_end":10057,"line_start":19,"line_end":19,"column_start":11,"column_end":22},"name":"MutableKeys","qualname":"::mutable_keys::MutableKeys","value":"MutableKeys","parent":null,"children":[{"krate":0,"index":45},{"krate":0,"index":46},{"krate":0,"index":47},{"krate":0,"index":49},{"krate":0,"index":51}],"decl_id":null,"docs":" Opt-in mutable access to keys.","sig":null,"attributes":[{"value":"/ Opt-in mutable access to keys.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/mutable_keys.rs","byte_start":9503,"byte_end":9537,"line_start":7,"line_end":7,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/mutable_keys.rs","byte_start":9538,"byte_end":9541,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ These methods expose `&mut K`, mutable references to the key as it is stored","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/mutable_keys.rs","byte_start":9542,"byte_end":9622,"line_start":9,"line_end":9,"column_start":1,"column_end":81}},{"value":"/ in the map.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/mutable_keys.rs","byte_start":9623,"byte_end":9638,"line_start":10,"line_end":10,"column_start":1,"column_end":16}},{"value":"/ You are allowed to modify the keys in the hashmap **if the modifcation","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/mutable_keys.rs","byte_start":9639,"byte_end":9713,"line_start":11,"line_end":11,"column_start":1,"column_end":75}},{"value":"/ does not change the key’s hash and equality**.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/mutable_keys.rs","byte_start":9714,"byte_end":9766,"line_start":12,"line_end":12,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/mutable_keys.rs","byte_start":9767,"byte_end":9770,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ If keys are modified erronously, you can no longer look them up.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/mutable_keys.rs","byte_start":9771,"byte_end":9839,"line_start":14,"line_end":14,"column_start":1,"column_end":69}},{"value":"/ This is sound (memory safe) but a logical error hazard (just like","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/mutable_keys.rs","byte_start":9840,"byte_end":9909,"line_start":15,"line_end":15,"column_start":1,"column_end":70}},{"value":"/ implementing PartialEq, Eq, or Hash incorrectly would be).","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/mutable_keys.rs","byte_start":9910,"byte_end":9972,"line_start":16,"line_end":16,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/mutable_keys.rs","byte_start":9973,"byte_end":9976,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ `use` this trait to enable its methods for `IndexMap`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/mutable_keys.rs","byte_start":9977,"byte_end":10035,"line_start":18,"line_end":18,"column_start":1,"column_end":59}}]},{"kind":"Type","id":{"krate":0,"index":45},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/mutable_keys.rs","byte_start":10069,"byte_end":10072,"line_start":20,"line_end":20,"column_start":10,"column_end":13},"name":"Key","qualname":"::mutable_keys::MutableKeys::Key","value":"type Key;","parent":{"krate":0,"index":44},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":46},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/mutable_keys.rs","byte_start":10083,"byte_end":10088,"line_start":21,"line_end":21,"column_start":10,"column_end":15},"name":"Value","qualname":"::mutable_keys::MutableKeys::Value","value":"type Value;","parent":{"krate":0,"index":44},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":47},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/mutable_keys.rs","byte_start":10160,"byte_end":10173,"line_start":24,"line_end":24,"column_start":8,"column_end":21},"name":"get_full_mut2","qualname":"::mutable_keys::MutableKeys::get_full_mut2","value":"pub fn get_full_mut2<Q: ?Sized>(&mut Self, &Q)\n-> Option<(usize, &mut Self::Key, &mut Self::Value)> where Q: Hash +\nEquivalent<Self::Key>","parent":{"krate":0,"index":44},"children":[],"decl_id":null,"docs":" Return item index, mutable reference to key and value\n","sig":null,"attributes":[{"value":"/ Return item index, mutable reference to key and value","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/mutable_keys.rs","byte_start":10095,"byte_end":10152,"line_start":23,"line_end":23,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":49},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/mutable_keys.rs","byte_start":10609,"byte_end":10616,"line_start":38,"line_end":38,"column_start":8,"column_end":15},"name":"retain2","qualname":"::mutable_keys::MutableKeys::retain2","value":"pub fn retain2<F>(&mut Self, F) where\nF: FnMut(&mut Self::Key, &mut Self::Value) -> bool","parent":{"krate":0,"index":44},"children":[],"decl_id":null,"docs":" Scan through each key-value pair in the map and keep those where the\n closure `keep` returns `true`.","sig":null,"attributes":[{"value":"/ Scan through each key-value pair in the map and keep those where the","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/mutable_keys.rs","byte_start":10337,"byte_end":10409,"line_start":31,"line_end":31,"column_start":5,"column_end":77}},{"value":"/ closure `keep` returns `true`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/mutable_keys.rs","byte_start":10414,"byte_end":10448,"line_start":32,"line_end":32,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/mutable_keys.rs","byte_start":10453,"byte_end":10456,"line_start":33,"line_end":33,"column_start":5,"column_end":8}},{"value":"/ The elements are visited in order, and remaining elements keep their","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/mutable_keys.rs","byte_start":10461,"byte_end":10533,"line_start":34,"line_end":34,"column_start":5,"column_end":77}},{"value":"/ order.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/mutable_keys.rs","byte_start":10538,"byte_end":10548,"line_start":35,"line_end":35,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/mutable_keys.rs","byte_start":10553,"byte_end":10556,"line_start":36,"line_end":36,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time (average).","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/mutable_keys.rs","byte_start":10561,"byte_end":10601,"line_start":37,"line_end":37,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":51},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/mutable_keys.rs","byte_start":10908,"byte_end":10924,"line_start":45,"line_end":45,"column_start":8,"column_end":24},"name":"__private_marker","qualname":"::mutable_keys::MutableKeys::__private_marker","value":"pub fn __private_marker(&Self) -> PrivateMarker","parent":{"krate":0,"index":44},"children":[],"decl_id":null,"docs":" This method is not useful in itself – it is there to “seal” the trait\n for external implementation, so that we can add methods without\n causing breaking changes.\n","sig":null,"attributes":[{"value":"/ This method is not useful in itself – it is there to “seal” the trait","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/mutable_keys.rs","byte_start":10715,"byte_end":10794,"line_start":42,"line_end":42,"column_start":5,"column_end":78}},{"value":"/ for external implementation, so that we can add methods without","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/mutable_keys.rs","byte_start":10799,"byte_end":10866,"line_start":43,"line_end":43,"column_start":5,"column_end":72}},{"value":"/ causing breaking changes.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/mutable_keys.rs","byte_start":10871,"byte_end":10900,"line_start":44,"line_end":44,"column_start":5,"column_end":34}}]},{"kind":"Mod","id":{"krate":0,"index":85},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"map","qualname":"::map","value":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","parent":null,"children":[{"krate":0,"index":86},{"krate":0,"index":330},{"krate":0,"index":333},{"krate":0,"index":334},{"krate":0,"index":337},{"krate":0,"index":340},{"krate":0,"index":343},{"krate":0,"index":346},{"krate":0,"index":347},{"krate":0,"index":350},{"krate":0,"index":351},{"krate":0,"index":353},{"krate":0,"index":356},{"krate":0,"index":359},{"krate":0,"index":360},{"krate":0,"index":363},{"krate":0,"index":366},{"krate":0,"index":369},{"krate":0,"index":370},{"krate":0,"index":373},{"krate":0,"index":376},{"krate":0,"index":379},{"krate":0,"index":382},{"krate":0,"index":385},{"krate":0,"index":388},{"krate":0,"index":389},{"krate":0,"index":392},{"krate":0,"index":395},{"krate":0,"index":396},{"krate":0,"index":398},{"krate":0,"index":399},{"krate":0,"index":402},{"krate":0,"index":405},{"krate":0,"index":408},{"krate":0,"index":414},{"krate":0,"index":420},{"krate":0,"index":430},{"krate":0,"index":435},{"krate":0,"index":440},{"krate":0,"index":460},{"krate":0,"index":520},{"krate":0,"index":533},{"krate":0,"index":538},{"krate":0,"index":543},{"krate":0,"index":547},{"krate":0,"index":551},{"krate":0,"index":555},{"krate":0,"index":559},{"krate":0,"index":564},{"krate":0,"index":569},{"krate":0,"index":573},{"krate":0,"index":577},{"krate":0,"index":581},{"krate":0,"index":585},{"krate":0,"index":590},{"krate":0,"index":595},{"krate":0,"index":599},{"krate":0,"index":603},{"krate":0,"index":608},{"krate":0,"index":613},{"krate":0,"index":617},{"krate":0,"index":621},{"krate":0,"index":625},{"krate":0,"index":629},{"krate":0,"index":634},{"krate":0,"index":639},{"krate":0,"index":643},{"krate":0,"index":647},{"krate":0,"index":651},{"krate":0,"index":655},{"krate":0,"index":659},{"krate":0,"index":663},{"krate":0,"index":667},{"krate":0,"index":672},{"krate":0,"index":676},{"krate":0,"index":679},{"krate":0,"index":687},{"krate":0,"index":695},{"krate":0,"index":702},{"krate":0,"index":709},{"krate":0,"index":715},{"krate":0,"index":721},{"krate":0,"index":726},{"krate":0,"index":732},{"krate":0,"index":739},{"krate":0,"index":747},{"krate":0,"index":752},{"krate":0,"index":761}],"decl_id":null,"docs":" `IndexMap` is a hash table where the iteration order of the key-value\n pairs is independent of the hash values of the keys.\n","sig":null,"attributes":[{"value":"/ `IndexMap` is a hash table where the iteration order of the key-value","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":12669,"byte_end":12742,"line_start":1,"line_end":1,"column_start":1,"column_end":74}},{"value":"/ pairs is independent of the hash values of the keys.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":12743,"byte_end":12799,"line_start":2,"line_end":2,"column_start":1,"column_end":57}}]},{"kind":"Struct","id":{"krate":0,"index":132},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core/raw.rs","byte_start":87133,"byte_end":87146,"line_start":95,"line_end":95,"column_start":12,"column_end":25},"name":"OccupiedEntry","qualname":"::map::core::raw::OccupiedEntry","value":"OccupiedEntry {  }","parent":null,"children":[{"krate":0,"index":136},{"krate":0,"index":137},{"krate":0,"index":138}],"decl_id":null,"docs":" A view into an occupied entry in a `IndexMap`.\n It is part of the [`Entry`] enum.","sig":null,"attributes":[{"value":"/ A view into an occupied entry in a `IndexMap`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core/raw.rs","byte_start":86861,"byte_end":86911,"line_start":89,"line_end":89,"column_start":1,"column_end":51}},{"value":"/ It is part of the [`Entry`] enum.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core/raw.rs","byte_start":86912,"byte_end":86949,"line_start":90,"line_end":90,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core/raw.rs","byte_start":86950,"byte_end":86953,"line_start":91,"line_end":91,"column_start":1,"column_end":4}},{"value":"/ [`Entry`]: enum.Entry.html","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core/raw.rs","byte_start":86954,"byte_end":86984,"line_start":92,"line_end":92,"column_start":1,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":146},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core/raw.rs","byte_start":87877,"byte_end":87880,"line_start":112,"line_end":112,"column_start":12,"column_end":15},"name":"key","qualname":"<OccupiedEntry>::key","value":"pub fn key(&Self) -> &K","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the entry's key in the map.","sig":null,"attributes":[{"value":"/ Gets a reference to the entry's key in the map.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core/raw.rs","byte_start":87547,"byte_end":87598,"line_start":107,"line_end":107,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core/raw.rs","byte_start":87603,"byte_end":87606,"line_start":108,"line_end":108,"column_start":5,"column_end":8}},{"value":"/ Note that this is not the key that was used to find the entry. There may be an observable","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core/raw.rs","byte_start":87611,"byte_end":87704,"line_start":109,"line_end":109,"column_start":5,"column_end":98}},{"value":"/ difference if the key type has any distinguishing features outside of `Hash` and `Eq`, like","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core/raw.rs","byte_start":87709,"byte_end":87804,"line_start":110,"line_end":110,"column_start":5,"column_end":100}},{"value":"/ extra fields or the memory address of an allocation.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core/raw.rs","byte_start":87809,"byte_end":87865,"line_start":111,"line_end":111,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":147},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core/raw.rs","byte_start":88016,"byte_end":88019,"line_start":117,"line_end":117,"column_start":12,"column_end":15},"name":"get","qualname":"<OccupiedEntry>::get","value":"pub fn get(&Self) -> &V","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the entry's value in the map.\n","sig":null,"attributes":[{"value":"/ Gets a reference to the entry's value in the map.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core/raw.rs","byte_start":87951,"byte_end":88004,"line_start":116,"line_end":116,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":148},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core/raw.rs","byte_start":88285,"byte_end":88292,"line_start":125,"line_end":125,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<OccupiedEntry>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut V","parent":null,"children":[],"decl_id":null,"docs":" Gets a mutable reference to the entry's value in the map.","sig":null,"attributes":[{"value":"/ Gets a mutable reference to the entry's value in the map.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core/raw.rs","byte_start":88092,"byte_end":88153,"line_start":121,"line_end":121,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core/raw.rs","byte_start":88158,"byte_end":88161,"line_start":122,"line_end":122,"column_start":5,"column_end":8}},{"value":"/ If you need a reference which may outlive the destruction of the","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core/raw.rs","byte_start":88166,"byte_end":88234,"line_start":123,"line_end":123,"column_start":5,"column_end":73}},{"value":"/ `Entry` value, see `into_mut`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core/raw.rs","byte_start":88239,"byte_end":88273,"line_start":124,"line_end":124,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":150},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core/raw.rs","byte_start":88704,"byte_end":88709,"line_start":139,"line_end":139,"column_start":12,"column_end":17},"name":"index","qualname":"<OccupiedEntry>::index","value":"pub fn index(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the index of the key-value pair\n","sig":null,"attributes":[{"value":"/ Return the index of the key-value pair","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core/raw.rs","byte_start":88636,"byte_end":88678,"line_start":137,"line_end":137,"column_start":5,"column_end":47}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core/raw.rs","byte_start":88683,"byte_end":88692,"line_start":138,"line_end":138,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":151},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core/raw.rs","byte_start":88979,"byte_end":88987,"line_start":146,"line_end":146,"column_start":12,"column_end":20},"name":"into_mut","qualname":"<OccupiedEntry>::into_mut","value":"pub fn into_mut(Self) -> &'a mut V","parent":null,"children":[],"decl_id":null,"docs":" Converts into a mutable reference to the entry's value in the map,\n with a lifetime bound to the map itself.\n","sig":null,"attributes":[{"value":"/ Converts into a mutable reference to the entry's value in the map,","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core/raw.rs","byte_start":88848,"byte_end":88918,"line_start":144,"line_end":144,"column_start":5,"column_end":75}},{"value":"/ with a lifetime bound to the map itself.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core/raw.rs","byte_start":88923,"byte_end":88967,"line_start":145,"line_end":145,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":152},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core/raw.rs","byte_start":89449,"byte_end":89466,"line_start":158,"line_end":158,"column_start":12,"column_end":29},"name":"swap_remove_entry","qualname":"<OccupiedEntry>::swap_remove_entry","value":"pub fn swap_remove_entry(Self) -> (K, V)","parent":null,"children":[],"decl_id":null,"docs":" Remove and return the key, value pair stored in the map for this entry","sig":null,"attributes":[{"value":"/ Remove and return the key, value pair stored in the map for this entry","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core/raw.rs","byte_start":89097,"byte_end":89171,"line_start":151,"line_end":151,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core/raw.rs","byte_start":89176,"byte_end":89179,"line_start":152,"line_end":152,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::swap_remove`, the pair is removed by swapping it with the","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core/raw.rs","byte_start":89184,"byte_end":89256,"line_start":153,"line_end":153,"column_start":5,"column_end":77}},{"value":"/ last element of the map and popping it off. **This perturbs","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core/raw.rs","byte_start":89261,"byte_end":89324,"line_start":154,"line_end":154,"column_start":5,"column_end":68}},{"value":"/ the position of what used to be the last element!**","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core/raw.rs","byte_start":89329,"byte_end":89384,"line_start":155,"line_end":155,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core/raw.rs","byte_start":89389,"byte_end":89392,"line_start":156,"line_end":156,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core/raw.rs","byte_start":89397,"byte_end":89437,"line_start":157,"line_end":157,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":153},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core/raw.rs","byte_start":90116,"byte_end":90134,"line_start":172,"line_end":172,"column_start":12,"column_end":30},"name":"shift_remove_entry","qualname":"<OccupiedEntry>::shift_remove_entry","value":"pub fn shift_remove_entry(Self) -> (K, V)","parent":null,"children":[],"decl_id":null,"docs":" Remove and return the key, value pair stored in the map for this entry","sig":null,"attributes":[{"value":"/ Remove and return the key, value pair stored in the map for this entry","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core/raw.rs","byte_start":89770,"byte_end":89844,"line_start":165,"line_end":165,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core/raw.rs","byte_start":89849,"byte_end":89852,"line_start":166,"line_end":166,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::remove`, the pair is removed by shifting all of the","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core/raw.rs","byte_start":89857,"byte_end":89923,"line_start":167,"line_end":167,"column_start":5,"column_end":71}},{"value":"/ elements that follow it, preserving their relative order.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core/raw.rs","byte_start":89928,"byte_end":89989,"line_start":168,"line_end":168,"column_start":5,"column_end":66}},{"value":"/ **This perturbs the index of all of those elements!**","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core/raw.rs","byte_start":89994,"byte_end":90051,"line_start":169,"line_end":169,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core/raw.rs","byte_start":90056,"byte_end":90059,"line_start":170,"line_end":170,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time (average).","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core/raw.rs","byte_start":90064,"byte_end":90104,"line_start":171,"line_end":171,"column_start":5,"column_end":45}}]},{"kind":"TupleVariant","id":{"krate":0,"index":272},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":76828,"byte_end":76836,"line_start":442,"line_end":442,"column_start":5,"column_end":13},"name":"Occupied","qualname":"::map::core::Entry::Occupied","value":"Entry::Occupied(OccupiedEntry)","parent":{"krate":0,"index":268},"children":[],"decl_id":null,"docs":" Existing slot with equivalent key.\n","sig":null,"attributes":[{"value":"/ Existing slot with equivalent key.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":76785,"byte_end":76823,"line_start":441,"line_end":441,"column_start":5,"column_end":43}}]},{"kind":"TupleVariant","id":{"krate":0,"index":275},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":76919,"byte_end":76925,"line_start":444,"line_end":444,"column_start":5,"column_end":11},"name":"Vacant","qualname":"::map::core::Entry::Vacant","value":"Entry::Vacant(VacantEntry)","parent":{"krate":0,"index":268},"children":[],"decl_id":null,"docs":" Vacant slot (no equivalent key in the map).\n","sig":null,"attributes":[{"value":"/ Vacant slot (no equivalent key in the map).","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":76867,"byte_end":76914,"line_start":443,"line_end":443,"column_start":5,"column_end":52}}]},{"kind":"Enum","id":{"krate":0,"index":268},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":76763,"byte_end":76768,"line_start":440,"line_end":440,"column_start":10,"column_end":15},"name":"Entry","qualname":"::map::core::Entry","value":"pub enum Entry<'a, K, V> { Occupied(OccupiedEntry), Vacant(VacantEntry), }","parent":null,"children":[{"krate":0,"index":272},{"krate":0,"index":275}],"decl_id":null,"docs":" Entry for an existing key-value pair or a vacant location to\n insert one.\n","sig":null,"attributes":[{"value":"/ Entry for an existing key-value pair or a vacant location to","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":76673,"byte_end":76737,"line_start":438,"line_end":438,"column_start":1,"column_end":65}},{"value":"/ insert one.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":76738,"byte_end":76753,"line_start":439,"line_end":439,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":282},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":77248,"byte_end":77257,"line_start":452,"line_end":452,"column_start":12,"column_end":21},"name":"or_insert","qualname":"<Entry>::or_insert","value":"pub fn or_insert(Self, V) -> &'a mut V","parent":null,"children":[],"decl_id":null,"docs":" Inserts the given default value in the entry if it is vacant and returns a mutable\n reference to it. Otherwise a mutable reference to an already existent value is returned.","sig":null,"attributes":[{"value":"/ Inserts the given default value in the entry if it is vacant and returns a mutable","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":76990,"byte_end":77076,"line_start":448,"line_end":448,"column_start":5,"column_end":91}},{"value":"/ reference to it. Otherwise a mutable reference to an already existent value is returned.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":77081,"byte_end":77173,"line_start":449,"line_end":449,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":77178,"byte_end":77181,"line_start":450,"line_end":450,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (amortized average).","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":77186,"byte_end":77236,"line_start":451,"line_end":451,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":283},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":77716,"byte_end":77730,"line_start":463,"line_end":463,"column_start":12,"column_end":26},"name":"or_insert_with","qualname":"<Entry>::or_insert_with","value":"pub fn or_insert_with<F>(Self, F) -> &'a mut V where F: FnOnce() -> V","parent":null,"children":[],"decl_id":null,"docs":" Inserts the result of the `call` function in the entry if it is vacant and returns a mutable\n reference to it. Otherwise a mutable reference to an already existent value is returned.","sig":null,"attributes":[{"value":"/ Inserts the result of the `call` function in the entry if it is vacant and returns a mutable","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":77448,"byte_end":77544,"line_start":459,"line_end":459,"column_start":5,"column_end":101}},{"value":"/ reference to it. Otherwise a mutable reference to an already existent value is returned.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":77549,"byte_end":77641,"line_start":460,"line_end":460,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":77646,"byte_end":77649,"line_start":461,"line_end":461,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (amortized average).","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":77654,"byte_end":77704,"line_start":462,"line_end":462,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":285},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":78271,"byte_end":78289,"line_start":478,"line_end":478,"column_start":12,"column_end":30},"name":"or_insert_with_key","qualname":"<Entry>::or_insert_with_key","value":"pub fn or_insert_with_key<F>(Self, F) -> &'a mut V where F: FnOnce(&K) -> V","parent":null,"children":[],"decl_id":null,"docs":" Inserts the result of the `call` function with a reference to the entry's key if it is\n vacant, and returns a mutable reference to the new value. Otherwise a mutable reference to\n an already existent value is returned.","sig":null,"attributes":[{"value":"/ Inserts the result of the `call` function with a reference to the entry's key if it is","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":77960,"byte_end":78050,"line_start":473,"line_end":473,"column_start":5,"column_end":95}},{"value":"/ vacant, and returns a mutable reference to the new value. Otherwise a mutable reference to","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":78055,"byte_end":78149,"line_start":474,"line_end":474,"column_start":5,"column_end":99}},{"value":"/ an already existent value is returned.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":78154,"byte_end":78196,"line_start":475,"line_end":475,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":78201,"byte_end":78204,"line_start":476,"line_end":476,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (amortized average).","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":78209,"byte_end":78259,"line_start":477,"line_end":477,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":287},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":78745,"byte_end":78748,"line_start":493,"line_end":493,"column_start":12,"column_end":15},"name":"key","qualname":"<Entry>::key","value":"pub fn key(&Self) -> &K","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the entry's key, either within the map if occupied,\n or else the new key that was used to find the entry.\n","sig":null,"attributes":[{"value":"/ Gets a reference to the entry's key, either within the map if occupied,","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":78597,"byte_end":78672,"line_start":491,"line_end":491,"column_start":5,"column_end":80}},{"value":"/ or else the new key that was used to find the entry.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":78677,"byte_end":78733,"line_start":492,"line_end":492,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":288},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":79000,"byte_end":79005,"line_start":501,"line_end":501,"column_start":12,"column_end":17},"name":"index","qualname":"<Entry>::index","value":"pub fn index(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the index where the key-value pair exists or will be inserted.\n","sig":null,"attributes":[{"value":"/ Return the index where the key-value pair exists or will be inserted.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":78915,"byte_end":78988,"line_start":500,"line_end":500,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":289},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":79232,"byte_end":79242,"line_start":509,"line_end":509,"column_start":12,"column_end":22},"name":"and_modify","qualname":"<Entry>::and_modify","value":"pub fn and_modify<F>(Self, F) -> Self where F: FnOnce(&mut V) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Modifies the entry if it is occupied.\n","sig":null,"attributes":[{"value":"/ Modifies the entry if it is occupied.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":79179,"byte_end":79220,"line_start":508,"line_end":508,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":291},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":79754,"byte_end":79764,"line_start":526,"line_end":526,"column_start":12,"column_end":22},"name":"or_default","qualname":"<Entry>::or_default","value":"pub fn or_default(Self) -> &'a mut V where V: Default","parent":null,"children":[],"decl_id":null,"docs":" Inserts a default-constructed value in the entry if it is vacant and returns a mutable\n reference to it. Otherwise a mutable reference to an already existent value is returned.","sig":null,"attributes":[{"value":"/ Inserts a default-constructed value in the entry if it is vacant and returns a mutable","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":79492,"byte_end":79582,"line_start":522,"line_end":522,"column_start":5,"column_end":95}},{"value":"/ reference to it. Otherwise a mutable reference to an already existent value is returned.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":79587,"byte_end":79679,"line_start":523,"line_end":523,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":79684,"byte_end":79687,"line_start":524,"line_end":524,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (amortized average).","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":79692,"byte_end":79742,"line_start":525,"line_end":525,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":302},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":80559,"byte_end":80565,"line_start":551,"line_end":551,"column_start":12,"column_end":18},"name":"insert","qualname":"<OccupiedEntry>::insert","value":"pub fn insert(&mut Self, V) -> V","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the entry to `value`, and returns the entry's old value.\n","sig":null,"attributes":[{"value":"/ Sets the value of the entry to `value`, and returns the entry's old value.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":80469,"byte_end":80547,"line_start":550,"line_end":550,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":303},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":80808,"byte_end":80814,"line_start":558,"line_end":558,"column_start":12,"column_end":18},"name":"remove","qualname":"<OccupiedEntry>::remove","value":"pub fn remove(Self) -> V","parent":null,"children":[],"decl_id":null,"docs":" Remove the key, value pair stored in the map for this entry, and return the value.","sig":null,"attributes":[{"value":"/ Remove the key, value pair stored in the map for this entry, and return the value.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":80644,"byte_end":80730,"line_start":555,"line_end":555,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":80735,"byte_end":80738,"line_start":556,"line_end":556,"column_start":5,"column_end":8}},{"value":"/ **NOTE:** This is equivalent to `.swap_remove()`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":80743,"byte_end":80796,"line_start":557,"line_end":557,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":304},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":81230,"byte_end":81241,"line_start":569,"line_end":569,"column_start":12,"column_end":23},"name":"swap_remove","qualname":"<OccupiedEntry>::swap_remove","value":"pub fn swap_remove(Self) -> V","parent":null,"children":[],"decl_id":null,"docs":" Remove the key, value pair stored in the map for this entry, and return the value.","sig":null,"attributes":[{"value":"/ Remove the key, value pair stored in the map for this entry, and return the value.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":80866,"byte_end":80952,"line_start":562,"line_end":562,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":80957,"byte_end":80960,"line_start":563,"line_end":563,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::swap_remove`, the pair is removed by swapping it with the","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":80965,"byte_end":81037,"line_start":564,"line_end":564,"column_start":5,"column_end":77}},{"value":"/ last element of the map and popping it off. **This perturbs","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":81042,"byte_end":81105,"line_start":565,"line_end":565,"column_start":5,"column_end":68}},{"value":"/ the position of what used to be the last element!**","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":81110,"byte_end":81165,"line_start":566,"line_end":566,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":81170,"byte_end":81173,"line_start":567,"line_end":567,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":81178,"byte_end":81218,"line_start":568,"line_end":568,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":305},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":81659,"byte_end":81671,"line_start":580,"line_end":580,"column_start":12,"column_end":24},"name":"shift_remove","qualname":"<OccupiedEntry>::shift_remove","value":"pub fn shift_remove(Self) -> V","parent":null,"children":[],"decl_id":null,"docs":" Remove the key, value pair stored in the map for this entry, and return the value.","sig":null,"attributes":[{"value":"/ Remove the key, value pair stored in the map for this entry, and return the value.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":81301,"byte_end":81387,"line_start":573,"line_end":573,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":81392,"byte_end":81395,"line_start":574,"line_end":574,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::remove`, the pair is removed by shifting all of the","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":81400,"byte_end":81466,"line_start":575,"line_end":575,"column_start":5,"column_end":71}},{"value":"/ elements that follow it, preserving their relative order.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":81471,"byte_end":81532,"line_start":576,"line_end":576,"column_start":5,"column_end":66}},{"value":"/ **This perturbs the index of all of those elements!**","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":81537,"byte_end":81594,"line_start":577,"line_end":577,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":81599,"byte_end":81602,"line_start":578,"line_end":578,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time (average).","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":81607,"byte_end":81647,"line_start":579,"line_end":579,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":306},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":81890,"byte_end":81902,"line_start":587,"line_end":587,"column_start":12,"column_end":24},"name":"remove_entry","qualname":"<OccupiedEntry>::remove_entry","value":"pub fn remove_entry(Self) -> (K, V)","parent":null,"children":[],"decl_id":null,"docs":" Remove and return the key, value pair stored in the map for this entry","sig":null,"attributes":[{"value":"/ Remove and return the key, value pair stored in the map for this entry","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":81732,"byte_end":81806,"line_start":584,"line_end":584,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":81811,"byte_end":81814,"line_start":585,"line_end":585,"column_start":5,"column_end":8}},{"value":"/ **NOTE:** This is equivalent to `.swap_remove_entry()`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":81819,"byte_end":81878,"line_start":586,"line_end":586,"column_start":5,"column_end":64}}]},{"kind":"Struct","id":{"krate":0,"index":311},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":82393,"byte_end":82404,"line_start":605,"line_end":605,"column_start":12,"column_end":23},"name":"VacantEntry","qualname":"::map::core::VacantEntry","value":"VacantEntry {  }","parent":null,"children":[{"krate":0,"index":315},{"krate":0,"index":316},{"krate":0,"index":317}],"decl_id":null,"docs":" A view into a vacant entry in a `IndexMap`.\n It is part of the [`Entry`] enum.","sig":null,"attributes":[{"value":"/ A view into a vacant entry in a `IndexMap`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":82261,"byte_end":82308,"line_start":601,"line_end":601,"column_start":1,"column_end":48}},{"value":"/ It is part of the [`Entry`] enum.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":82309,"byte_end":82346,"line_start":602,"line_end":602,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":82347,"byte_end":82350,"line_start":603,"line_end":603,"column_start":1,"column_end":4}},{"value":"/ [`Entry`]: enum.Entry.html","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":82351,"byte_end":82381,"line_start":604,"line_end":604,"column_start":1,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":322},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":82609,"byte_end":82612,"line_start":613,"line_end":613,"column_start":12,"column_end":15},"name":"key","qualname":"<VacantEntry>::key","value":"pub fn key(&Self) -> &K","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the key that was used to find the entry.\n","sig":null,"attributes":[{"value":"/ Gets a reference to the key that was used to find the entry.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":82533,"byte_end":82597,"line_start":612,"line_end":612,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":323},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":82726,"byte_end":82734,"line_start":618,"line_end":618,"column_start":12,"column_end":20},"name":"into_key","qualname":"<VacantEntry>::into_key","value":"pub fn into_key(Self) -> K","parent":null,"children":[],"decl_id":null,"docs":" Takes ownership of the key, leaving the entry vacant.\n","sig":null,"attributes":[{"value":"/ Takes ownership of the key, leaving the entry vacant.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":82657,"byte_end":82714,"line_start":617,"line_end":617,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":324},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":82851,"byte_end":82856,"line_start":623,"line_end":623,"column_start":12,"column_end":17},"name":"index","qualname":"<VacantEntry>::index","value":"pub fn index(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the index where the key-value pair will be inserted.\n","sig":null,"attributes":[{"value":"/ Return the index where the key-value pair will be inserted.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":82776,"byte_end":82839,"line_start":622,"line_end":622,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":325},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":83036,"byte_end":83042,"line_start":629,"line_end":629,"column_start":12,"column_end":18},"name":"insert","qualname":"<VacantEntry>::insert","value":"pub fn insert(Self, V) -> &'a mut V","parent":null,"children":[],"decl_id":null,"docs":" Inserts the entry's key and the given value into the map, and returns a mutable reference\n to the value.\n","sig":null,"attributes":[{"value":"/ Inserts the entry's key and the given value into the map, and returns a mutable reference","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":82909,"byte_end":83002,"line_start":627,"line_end":627,"column_start":5,"column_end":98}},{"value":"/ to the value.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":83007,"byte_end":83024,"line_start":628,"line_end":628,"column_start":5,"column_end":22}}]},{"kind":"Struct","id":{"krate":0,"index":408},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":14872,"byte_end":14880,"line_start":71,"line_end":71,"column_start":12,"column_end":20},"name":"IndexMap","qualname":"::map::IndexMap","value":"IndexMap {  }","parent":null,"children":[{"krate":0,"index":412},{"krate":0,"index":413}],"decl_id":null,"docs":" A hash table where the iteration order of the key-value pairs is independent\n of the hash values of the keys.","sig":null,"attributes":[{"value":"/ A hash table where the iteration order of the key-value pairs is independent","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":13436,"byte_end":13516,"line_start":29,"line_end":29,"column_start":1,"column_end":81}},{"value":"/ of the hash values of the keys.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":13517,"byte_end":13552,"line_start":30,"line_end":30,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":13553,"byte_end":13556,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ The interface is closely compatible with the standard `HashMap`, but also","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":13557,"byte_end":13634,"line_start":32,"line_end":32,"column_start":1,"column_end":78}},{"value":"/ has additional features.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":13635,"byte_end":13663,"line_start":33,"line_end":33,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":13664,"byte_end":13667,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ # Order","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":13668,"byte_end":13679,"line_start":35,"line_end":35,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":13680,"byte_end":13683,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ The key-value pairs have a consistent order that is determined by","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":13684,"byte_end":13753,"line_start":37,"line_end":37,"column_start":1,"column_end":70}},{"value":"/ the sequence of insertion and removal calls on the map. The order does","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":13754,"byte_end":13828,"line_start":38,"line_end":38,"column_start":1,"column_end":75}},{"value":"/ not depend on the keys or the hash function at all.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":13829,"byte_end":13884,"line_start":39,"line_end":39,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":13885,"byte_end":13888,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ All iterators traverse the map in *the order*.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":13889,"byte_end":13939,"line_start":41,"line_end":41,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":13940,"byte_end":13943,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ The insertion order is preserved, with **notable exceptions** like the","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":13944,"byte_end":14018,"line_start":43,"line_end":43,"column_start":1,"column_end":75}},{"value":"/ `.remove()` or `.swap_remove()` methods. Methods such as `.sort_by()` of","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":14019,"byte_end":14095,"line_start":44,"line_end":44,"column_start":1,"column_end":77}},{"value":"/ course result in a new order, depending on the sorting order.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":14096,"byte_end":14161,"line_start":45,"line_end":45,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":14162,"byte_end":14165,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ # Indices","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":14166,"byte_end":14179,"line_start":47,"line_end":47,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":14180,"byte_end":14183,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ The key-value pairs are indexed in a compact range without holes in the","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":14184,"byte_end":14259,"line_start":49,"line_end":49,"column_start":1,"column_end":76}},{"value":"/ range `0..self.len()`. For example, the method `.get_full` looks up the","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":14260,"byte_end":14335,"line_start":50,"line_end":50,"column_start":1,"column_end":76}},{"value":"/ index for a key, and the method `.get_index` looks up the key-value pair by","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":14336,"byte_end":14415,"line_start":51,"line_end":51,"column_start":1,"column_end":80}},{"value":"/ index.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":14416,"byte_end":14426,"line_start":52,"line_end":52,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":14427,"byte_end":14430,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":14431,"byte_end":14445,"line_start":54,"line_end":54,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":14446,"byte_end":14449,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":14450,"byte_end":14457,"line_start":56,"line_end":56,"column_start":1,"column_end":8}},{"value":"/ use indexmap::IndexMap;","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":14458,"byte_end":14485,"line_start":57,"line_end":57,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":14486,"byte_end":14489,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ // count the frequency of each letter in a sentence.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":14490,"byte_end":14546,"line_start":59,"line_end":59,"column_start":1,"column_end":57}},{"value":"/ let mut letters = IndexMap::new();","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":14547,"byte_end":14585,"line_start":60,"line_end":60,"column_start":1,"column_end":39}},{"value":"/ for ch in \"a short treatise on fungi\".chars() {","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":14586,"byte_end":14637,"line_start":61,"line_end":61,"column_start":1,"column_end":52}},{"value":"/     *letters.entry(ch).or_insert(0) += 1;","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":14638,"byte_end":14683,"line_start":62,"line_end":62,"column_start":1,"column_end":46}},{"value":"/ }","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":14684,"byte_end":14689,"line_start":63,"line_end":63,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":14690,"byte_end":14693,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(letters[&'s'], 2);","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":14694,"byte_end":14727,"line_start":65,"line_end":65,"column_start":1,"column_end":34}},{"value":"/ assert_eq!(letters[&'t'], 3);","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":14728,"byte_end":14761,"line_start":66,"line_end":66,"column_start":1,"column_end":34}},{"value":"/ assert_eq!(letters[&'u'], 1);","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":14762,"byte_end":14795,"line_start":67,"line_end":67,"column_start":1,"column_end":34}},{"value":"/ assert_eq!(letters.get(&'y'), None);","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":14796,"byte_end":14836,"line_start":68,"line_end":68,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":14837,"byte_end":14844,"line_start":69,"line_end":69,"column_start":1,"column_end":8}},{"value":"cfg(has_std)","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":14845,"byte_end":14860,"line_start":70,"line_end":70,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":438},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":16586,"byte_end":16589,"line_start":147,"line_end":147,"column_start":12,"column_end":15},"name":"new","qualname":"<IndexMap<K, V>>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new map. (Does not allocate.)\n","sig":null,"attributes":[{"value":"/ Create a new map. (Does not allocate.)","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":16518,"byte_end":16560,"line_start":145,"line_end":145,"column_start":5,"column_end":47}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":16565,"byte_end":16574,"line_start":146,"line_end":146,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":439},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":16816,"byte_end":16829,"line_start":156,"line_end":156,"column_start":12,"column_end":25},"name":"with_capacity","qualname":"<IndexMap<K, V>>::with_capacity","value":"pub fn with_capacity(usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new map with capacity for `n` key-value pairs. (Does not\n allocate if `n` is zero.)","sig":null,"attributes":[{"value":"/ Create a new map with capacity for `n` key-value pairs. (Does not","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":16644,"byte_end":16713,"line_start":151,"line_end":151,"column_start":5,"column_end":74}},{"value":"/ allocate if `n` is zero.)","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":16718,"byte_end":16747,"line_start":152,"line_end":152,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":16752,"byte_end":16755,"line_start":153,"line_end":153,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":16760,"byte_end":16790,"line_start":154,"line_end":154,"column_start":5,"column_end":35}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":16795,"byte_end":16804,"line_start":155,"line_end":155,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":444},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":17127,"byte_end":17151,"line_start":167,"line_end":167,"column_start":12,"column_end":36},"name":"with_capacity_and_hasher","qualname":"<IndexMap<K, V, S>>::with_capacity_and_hasher","value":"pub fn with_capacity_and_hasher(usize, S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new map with capacity for `n` key-value pairs. (Does not\n allocate if `n` is zero.)","sig":null,"attributes":[{"value":"/ Create a new map with capacity for `n` key-value pairs. (Does not","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":16955,"byte_end":17024,"line_start":162,"line_end":162,"column_start":5,"column_end":74}},{"value":"/ allocate if `n` is zero.)","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":17029,"byte_end":17058,"line_start":163,"line_end":163,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":17063,"byte_end":17066,"line_start":164,"line_end":164,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":17071,"byte_end":17101,"line_start":165,"line_end":165,"column_start":5,"column_end":35}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":17106,"byte_end":17115,"line_start":166,"line_end":166,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":445},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":17530,"byte_end":17541,"line_start":182,"line_end":182,"column_start":12,"column_end":23},"name":"with_hasher","qualname":"<IndexMap<K, V, S>>::with_hasher","value":"pub fn with_hasher(S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new map with `hash_builder`\n","sig":null,"attributes":[{"value":"/ Create a new map with `hash_builder`","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":17478,"byte_end":17518,"line_start":181,"line_end":181,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":446},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":17678,"byte_end":17686,"line_start":187,"line_end":187,"column_start":12,"column_end":20},"name":"capacity","qualname":"<IndexMap<K, V, S>>::capacity","value":"pub fn capacity(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Computes in **O(1)** time.\n","sig":null,"attributes":[{"value":"/ Computes in **O(1)** time.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":17636,"byte_end":17666,"line_start":186,"line_end":186,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":447},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":17807,"byte_end":17813,"line_start":192,"line_end":192,"column_start":12,"column_end":18},"name":"hasher","qualname":"<IndexMap<K, V, S>>::hasher","value":"pub fn hasher(&Self) -> &S","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to the map's `BuildHasher`.\n","sig":null,"attributes":[{"value":"/ Return a reference to the map's `BuildHasher`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":17745,"byte_end":17795,"line_start":191,"line_end":191,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":448},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":17988,"byte_end":17991,"line_start":200,"line_end":200,"column_start":12,"column_end":15},"name":"len","qualname":"<IndexMap<K, V, S>>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the number of key-value pairs in the map.","sig":null,"attributes":[{"value":"/ Return the number of key-value pairs in the map.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":17867,"byte_end":17919,"line_start":196,"line_end":196,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":17924,"byte_end":17927,"line_start":197,"line_end":197,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":17932,"byte_end":17962,"line_start":198,"line_end":198,"column_start":5,"column_end":35}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":17967,"byte_end":17976,"line_start":199,"line_end":199,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":449},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":18163,"byte_end":18171,"line_start":208,"line_end":208,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<IndexMap<K, V, S>>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the map contains no elements.","sig":null,"attributes":[{"value":"/ Returns true if the map contains no elements.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":18045,"byte_end":18094,"line_start":204,"line_end":204,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":18099,"byte_end":18102,"line_start":205,"line_end":205,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":18107,"byte_end":18137,"line_start":206,"line_end":206,"column_start":5,"column_end":35}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":18142,"byte_end":18151,"line_start":207,"line_end":207,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":450},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":18310,"byte_end":18314,"line_start":213,"line_end":213,"column_start":12,"column_end":16},"name":"iter","qualname":"<IndexMap<K, V, S>>::iter","value":"pub fn iter(&Self) -> Iter<, K, V>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over the key-value pairs of the map, in their order\n","sig":null,"attributes":[{"value":"/ Return an iterator over the key-value pairs of the map, in their order","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":18224,"byte_end":18298,"line_start":212,"line_end":212,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":451},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":18508,"byte_end":18516,"line_start":220,"line_end":220,"column_start":12,"column_end":20},"name":"iter_mut","qualname":"<IndexMap<K, V, S>>::iter_mut","value":"pub fn iter_mut(&mut Self) -> IterMut<, K, V>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over the key-value pairs of the map, in their order\n","sig":null,"attributes":[{"value":"/ Return an iterator over the key-value pairs of the map, in their order","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":18422,"byte_end":18496,"line_start":219,"line_end":219,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":452},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":18717,"byte_end":18721,"line_start":227,"line_end":227,"column_start":12,"column_end":16},"name":"keys","qualname":"<IndexMap<K, V, S>>::keys","value":"pub fn keys(&Self) -> Keys<, K, V>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over the keys of the map, in their order\n","sig":null,"attributes":[{"value":"/ Return an iterator over the keys of the map, in their order","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":18642,"byte_end":18705,"line_start":226,"line_end":226,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":453},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":18906,"byte_end":18912,"line_start":234,"line_end":234,"column_start":12,"column_end":18},"name":"values","qualname":"<IndexMap<K, V, S>>::values","value":"pub fn values(&Self) -> Values<, K, V>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over the values of the map, in their order\n","sig":null,"attributes":[{"value":"/ Return an iterator over the values of the map, in their order","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":18829,"byte_end":18894,"line_start":233,"line_end":233,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":454},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":19135,"byte_end":19145,"line_start":242,"line_end":242,"column_start":12,"column_end":22},"name":"values_mut","qualname":"<IndexMap<K, V, S>>::values_mut","value":"pub fn values_mut(&mut Self) -> ValuesMut<, K, V>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over mutable references to the the values of the map,\n in their order\n","sig":null,"attributes":[{"value":"/ Return an iterator over mutable references to the the values of the map,","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":19024,"byte_end":19100,"line_start":240,"line_end":240,"column_start":5,"column_end":81}},{"value":"/ in their order","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":19105,"byte_end":19123,"line_start":241,"line_end":241,"column_start":5,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":455},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":19403,"byte_end":19408,"line_start":251,"line_end":251,"column_start":12,"column_end":17},"name":"clear","qualname":"<IndexMap<K, V, S>>::clear","value":"pub fn clear(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Remove all key-value pairs in the map, while preserving its capacity.","sig":null,"attributes":[{"value":"/ Remove all key-value pairs in the map, while preserving its capacity.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":19275,"byte_end":19348,"line_start":248,"line_end":248,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":19353,"byte_end":19356,"line_start":249,"line_end":249,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":19361,"byte_end":19391,"line_start":250,"line_end":250,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":456},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":19636,"byte_end":19644,"line_start":258,"line_end":258,"column_start":12,"column_end":20},"name":"truncate","qualname":"<IndexMap<K, V, S>>::truncate","value":"pub fn truncate(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Shortens the map, keeping the first `len` elements and dropping the rest.","sig":null,"attributes":[{"value":"/ Shortens the map, keeping the first `len` elements and dropping the rest.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":19460,"byte_end":19537,"line_start":255,"line_end":255,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":19542,"byte_end":19545,"line_start":256,"line_end":256,"column_start":5,"column_end":8}},{"value":"/ If `len` is greater than the map's current length, this has no effect.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":19550,"byte_end":19624,"line_start":257,"line_end":257,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":457},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":20396,"byte_end":20401,"line_start":275,"line_end":275,"column_start":12,"column_end":17},"name":"drain","qualname":"<IndexMap<K, V, S>>::drain","value":"pub fn drain<R>(&mut Self, R) -> Drain<, K, V> where R: RangeBounds<usize>","parent":null,"children":[],"decl_id":null,"docs":" Clears the `IndexMap` in the given index range, returning those\n key-value pairs as a drain iterator.","sig":null,"attributes":[{"value":"/ Clears the `IndexMap` in the given index range, returning those","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":19714,"byte_end":19781,"line_start":262,"line_end":262,"column_start":5,"column_end":72}},{"value":"/ key-value pairs as a drain iterator.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":19786,"byte_end":19826,"line_start":263,"line_end":263,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":19831,"byte_end":19834,"line_start":264,"line_end":264,"column_start":5,"column_end":8}},{"value":"/ The range may be any type that implements `RangeBounds<usize>`,","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":19839,"byte_end":19906,"line_start":265,"line_end":265,"column_start":5,"column_end":72}},{"value":"/ including all of the `std::ops::Range*` types, or even a tuple pair of","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":19911,"byte_end":19985,"line_start":266,"line_end":266,"column_start":5,"column_end":79}},{"value":"/ `Bound` start and end values. To drain the map entirely, use `RangeFull`","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":19990,"byte_end":20066,"line_start":267,"line_end":267,"column_start":5,"column_end":81}},{"value":"/ like `map.drain(..)`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":20071,"byte_end":20096,"line_start":268,"line_end":268,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":20101,"byte_end":20104,"line_start":269,"line_end":269,"column_start":5,"column_end":8}},{"value":"/ This shifts down all entries following the drained range to fill the","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":20109,"byte_end":20181,"line_start":270,"line_end":270,"column_start":5,"column_end":77}},{"value":"/ gap, and keeps the allocated memory for reuse.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":20186,"byte_end":20236,"line_start":271,"line_end":271,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":20241,"byte_end":20244,"line_start":272,"line_end":272,"column_start":5,"column_end":8}},{"value":"/ ***Panics*** if the starting point is greater than the end point or if","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":20249,"byte_end":20323,"line_start":273,"line_end":273,"column_start":5,"column_end":79}},{"value":"/ the end point is greater than the length of the map.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":20328,"byte_end":20384,"line_start":274,"line_end":274,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":459},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":20911,"byte_end":20920,"line_start":291,"line_end":291,"column_start":12,"column_end":21},"name":"split_off","qualname":"<IndexMap<K, V, S>>::split_off","value":"pub fn split_off(&mut Self, usize) -> Self where S: Clone","parent":null,"children":[],"decl_id":null,"docs":" Splits the collection into two at the given index.","sig":null,"attributes":[{"value":"/ Splits the collection into two at the given index.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":20571,"byte_end":20625,"line_start":284,"line_end":284,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":20630,"byte_end":20633,"line_start":285,"line_end":285,"column_start":5,"column_end":8}},{"value":"/ Returns a newly allocated map containing the elements in the range","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":20638,"byte_end":20708,"line_start":286,"line_end":286,"column_start":5,"column_end":75}},{"value":"/ `[at, len)`. After the call, the original map will be left containing","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":20713,"byte_end":20786,"line_start":287,"line_end":287,"column_start":5,"column_end":78}},{"value":"/ the elements `[0, at)` with its previous capacity unchanged.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":20791,"byte_end":20855,"line_start":288,"line_end":288,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":20860,"byte_end":20863,"line_start":289,"line_end":289,"column_start":5,"column_end":8}},{"value":"/ ***Panics*** if `at > len`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":20868,"byte_end":20899,"line_start":290,"line_end":290,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":464},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":21311,"byte_end":21318,"line_start":310,"line_end":310,"column_start":12,"column_end":19},"name":"reserve","qualname":"<IndexMap<K, V, S>>::reserve","value":"pub fn reserve(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Reserve capacity for `additional` more key-value pairs.","sig":null,"attributes":[{"value":"/ Reserve capacity for `additional` more key-value pairs.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":21197,"byte_end":21256,"line_start":307,"line_end":307,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":21261,"byte_end":21264,"line_start":308,"line_end":308,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":21269,"byte_end":21299,"line_start":309,"line_end":309,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":465},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":21511,"byte_end":21524,"line_start":317,"line_end":317,"column_start":12,"column_end":25},"name":"shrink_to_fit","qualname":"<IndexMap<K, V, S>>::shrink_to_fit","value":"pub fn shrink_to_fit(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Shrink the capacity of the map as much as possible.","sig":null,"attributes":[{"value":"/ Shrink the capacity of the map as much as possible.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":21401,"byte_end":21456,"line_start":314,"line_end":314,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":21461,"byte_end":21464,"line_start":315,"line_end":315,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":21469,"byte_end":21499,"line_start":316,"line_end":316,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":468},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":22423,"byte_end":22429,"line_start":340,"line_end":340,"column_start":12,"column_end":18},"name":"insert","qualname":"<IndexMap<K, V, S>>::insert","value":"pub fn insert(&mut Self, K, V) -> Option<V>","parent":null,"children":[],"decl_id":null,"docs":" Insert a key-value pair in the map.","sig":null,"attributes":[{"value":"/ Insert a key-value pair in the map.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":21771,"byte_end":21810,"line_start":327,"line_end":327,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":21815,"byte_end":21818,"line_start":328,"line_end":328,"column_start":5,"column_end":8}},{"value":"/ If an equivalent key already exists in the map: the key remains and","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":21823,"byte_end":21894,"line_start":329,"line_end":329,"column_start":5,"column_end":76}},{"value":"/ retains in its place in the order, its corresponding value is updated","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":21899,"byte_end":21972,"line_start":330,"line_end":330,"column_start":5,"column_end":78}},{"value":"/ with `value` and the older value is returned inside `Some(_)`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":21977,"byte_end":22043,"line_start":331,"line_end":331,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":22048,"byte_end":22051,"line_start":332,"line_end":332,"column_start":5,"column_end":8}},{"value":"/ If no equivalent key existed in the map: the new key-value pair is","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":22056,"byte_end":22126,"line_start":333,"line_end":333,"column_start":5,"column_end":75}},{"value":"/ inserted, last in order, and `None` is returned.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":22131,"byte_end":22183,"line_start":334,"line_end":334,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":22188,"byte_end":22191,"line_start":335,"line_end":335,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (amortized average).","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":22196,"byte_end":22246,"line_start":336,"line_end":336,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":22251,"byte_end":22254,"line_start":337,"line_end":337,"column_start":5,"column_end":8}},{"value":"/ See also [`entry`](#method.entry) if you you want to insert *or* modify","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":22259,"byte_end":22334,"line_start":338,"line_end":338,"column_start":5,"column_end":80}},{"value":"/ or if you need to get the index of the corresponding key-value pair.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":22339,"byte_end":22411,"line_start":339,"line_end":339,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":469},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":23215,"byte_end":23226,"line_start":357,"line_end":357,"column_start":12,"column_end":23},"name":"insert_full","qualname":"<IndexMap<K, V, S>>::insert_full","value":"pub fn insert_full(&mut Self, K, V) -> (usize, Option<V>)","parent":null,"children":[],"decl_id":null,"docs":" Insert a key-value pair in the map, and get their index.","sig":null,"attributes":[{"value":"/ Insert a key-value pair in the map, and get their index.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":22524,"byte_end":22584,"line_start":344,"line_end":344,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":22589,"byte_end":22592,"line_start":345,"line_end":345,"column_start":5,"column_end":8}},{"value":"/ If an equivalent key already exists in the map: the key remains and","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":22597,"byte_end":22668,"line_start":346,"line_end":346,"column_start":5,"column_end":76}},{"value":"/ retains in its place in the order, its corresponding value is updated","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":22673,"byte_end":22746,"line_start":347,"line_end":347,"column_start":5,"column_end":78}},{"value":"/ with `value` and the older value is returned inside `(index, Some(_))`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":22751,"byte_end":22826,"line_start":348,"line_end":348,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":22831,"byte_end":22834,"line_start":349,"line_end":349,"column_start":5,"column_end":8}},{"value":"/ If no equivalent key existed in the map: the new key-value pair is","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":22839,"byte_end":22909,"line_start":350,"line_end":350,"column_start":5,"column_end":75}},{"value":"/ inserted, last in order, and `(index, None)` is returned.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":22914,"byte_end":22975,"line_start":351,"line_end":351,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":22980,"byte_end":22983,"line_start":352,"line_end":352,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (amortized average).","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":22988,"byte_end":23038,"line_start":353,"line_end":353,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":23043,"byte_end":23046,"line_start":354,"line_end":354,"column_start":5,"column_end":8}},{"value":"/ See also [`entry`](#method.entry) if you you want to insert *or* modify","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":23051,"byte_end":23126,"line_start":355,"line_end":355,"column_start":5,"column_end":80}},{"value":"/ or if you need to get the index of the corresponding key-value pair.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":23131,"byte_end":23203,"line_start":356,"line_end":356,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":470},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":23558,"byte_end":23563,"line_start":366,"line_end":366,"column_start":12,"column_end":17},"name":"entry","qualname":"<IndexMap<K, V, S>>::entry","value":"pub fn entry(&mut Self, K) -> Entry<, K, V>","parent":null,"children":[],"decl_id":null,"docs":" Get the given key’s corresponding entry in the map for insertion and/or\n in-place manipulation.","sig":null,"attributes":[{"value":"/ Get the given key’s corresponding entry in the map for insertion and/or","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":23375,"byte_end":23452,"line_start":362,"line_end":362,"column_start":5,"column_end":80}},{"value":"/ in-place manipulation.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":23457,"byte_end":23483,"line_start":363,"line_end":363,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":23488,"byte_end":23491,"line_start":364,"line_end":364,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (amortized average).","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":23496,"byte_end":23546,"line_start":365,"line_end":365,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":471},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":23813,"byte_end":23825,"line_start":374,"line_end":374,"column_start":12,"column_end":24},"name":"contains_key","qualname":"<IndexMap<K, V, S>>::contains_key","value":"pub fn contains_key<Q: ?Sized>(&Self, &Q) -> bool where Q: Hash +\nEquivalent<K>","parent":null,"children":[],"decl_id":null,"docs":" Return `true` if an equivalent to `key` exists in the map.","sig":null,"attributes":[{"value":"/ Return `true` if an equivalent to `key` exists in the map.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":23686,"byte_end":23748,"line_start":371,"line_end":371,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":23753,"byte_end":23756,"line_start":372,"line_end":372,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":23761,"byte_end":23801,"line_start":373,"line_end":373,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":473},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":24119,"byte_end":24122,"line_start":385,"line_end":385,"column_start":12,"column_end":15},"name":"get","qualname":"<IndexMap<K, V, S>>::get","value":"pub fn get<Q: ?Sized>(&Self, &Q) -> Option<&V> where Q: Hash + Equivalent<K>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to the value stored for `key`, if it is present,\n else `None`.","sig":null,"attributes":[{"value":"/ Return a reference to the value stored for `key`, if it is present,","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":23962,"byte_end":24033,"line_start":381,"line_end":381,"column_start":5,"column_end":76}},{"value":"/ else `None`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":24038,"byte_end":24054,"line_start":382,"line_end":382,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":24059,"byte_end":24062,"line_start":383,"line_end":383,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":24067,"byte_end":24107,"line_start":384,"line_end":384,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":475},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":24561,"byte_end":24574,"line_start":401,"line_end":401,"column_start":12,"column_end":25},"name":"get_key_value","qualname":"<IndexMap<K, V, S>>::get_key_value","value":"pub fn get_key_value<Q: ?Sized>(&Self, &Q) -> Option<(&K, &V)> where Q: Hash +\nEquivalent<K>","parent":null,"children":[],"decl_id":null,"docs":" Return references to the key-value pair stored for `key`,\n if it is present, else `None`.","sig":null,"attributes":[{"value":"/ Return references to the key-value pair stored for `key`,","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":24396,"byte_end":24457,"line_start":397,"line_end":397,"column_start":5,"column_end":66}},{"value":"/ if it is present, else `None`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":24462,"byte_end":24496,"line_start":398,"line_end":398,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":24501,"byte_end":24504,"line_start":399,"line_end":399,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":24509,"byte_end":24549,"line_start":400,"line_end":400,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":477},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":24916,"byte_end":24924,"line_start":414,"line_end":414,"column_start":12,"column_end":20},"name":"get_full","qualname":"<IndexMap<K, V, S>>::get_full","value":"pub fn get_full<Q: ?Sized>(&Self, &Q) -> Option<(usize, &K, &V)> where\nQ: Hash + Equivalent<K>","parent":null,"children":[],"decl_id":null,"docs":" Return item index, key and value\n","sig":null,"attributes":[{"value":"/ Return item index, key and value","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":24868,"byte_end":24904,"line_start":413,"line_end":413,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":479},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":25286,"byte_end":25298,"line_start":427,"line_end":427,"column_start":12,"column_end":24},"name":"get_index_of","qualname":"<IndexMap<K, V, S>>::get_index_of","value":"pub fn get_index_of<Q: ?Sized>(&Self, &Q) -> Option<usize> where Q: Hash +\nEquivalent<K>","parent":null,"children":[],"decl_id":null,"docs":" Return item index, if it exists in the map\n","sig":null,"attributes":[{"value":"/ Return item index, if it exists in the map","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":25228,"byte_end":25274,"line_start":426,"line_end":426,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":481},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":25568,"byte_end":25575,"line_start":439,"line_end":439,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<IndexMap<K, V, S>>::get_mut","value":"pub fn get_mut<Q: ?Sized>(&mut Self, &Q) -> Option<&mut V> where Q: Hash +\nEquivalent<K>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":483},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":25876,"byte_end":25888,"line_start":451,"line_end":451,"column_start":12,"column_end":24},"name":"get_full_mut","qualname":"<IndexMap<K, V, S>>::get_full_mut","value":"pub fn get_full_mut<Q: ?Sized>(&mut Self, &Q) -> Option<(usize, &K, &mut V)>\nwhere Q: Hash + Equivalent<K>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":487},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":26920,"byte_end":26926,"line_start":486,"line_end":486,"column_start":12,"column_end":18},"name":"remove","qualname":"<IndexMap<K, V, S>>::remove","value":"pub fn remove<Q: ?Sized>(&mut Self, &Q) -> Option<V> where Q: Hash +\nEquivalent<K>","parent":null,"children":[],"decl_id":null,"docs":" Remove the key-value pair equivalent to `key` and return\n its value.","sig":null,"attributes":[{"value":"/ Remove the key-value pair equivalent to `key` and return","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":26599,"byte_end":26659,"line_start":478,"line_end":478,"column_start":5,"column_end":65}},{"value":"/ its value.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":26664,"byte_end":26678,"line_start":479,"line_end":479,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":26683,"byte_end":26686,"line_start":480,"line_end":480,"column_start":5,"column_end":8}},{"value":"/ **NOTE:** This is equivalent to `.swap_remove(key)`, if you need to","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":26691,"byte_end":26762,"line_start":481,"line_end":481,"column_start":5,"column_end":76}},{"value":"/ preserve the order of the keys in the map, use `.shift_remove(key)`","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":26767,"byte_end":26838,"line_start":482,"line_end":482,"column_start":5,"column_end":76}},{"value":"/ instead.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":26843,"byte_end":26855,"line_start":483,"line_end":483,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":26860,"byte_end":26863,"line_start":484,"line_end":484,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":26868,"byte_end":26908,"line_start":485,"line_end":485,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":489},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":27376,"byte_end":27388,"line_start":500,"line_end":500,"column_start":12,"column_end":24},"name":"remove_entry","qualname":"<IndexMap<K, V, S>>::remove_entry","value":"pub fn remove_entry<Q: ?Sized>(&mut Self, &Q) -> Option<(K, V)> where\nQ: Hash + Equivalent<K>","parent":null,"children":[],"decl_id":null,"docs":" Remove and return the key-value pair equivalent to `key`.","sig":null,"attributes":[{"value":"/ Remove and return the key-value pair equivalent to `key`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":27061,"byte_end":27122,"line_start":493,"line_end":493,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":27127,"byte_end":27130,"line_start":494,"line_end":494,"column_start":5,"column_end":8}},{"value":"/ **NOTE:** This is equivalent to `.swap_remove_entry(key)`, if you need to","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":27135,"byte_end":27212,"line_start":495,"line_end":495,"column_start":5,"column_end":82}},{"value":"/ preserve the order of the keys in the map, use `.shift_remove_entry(key)`","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":27217,"byte_end":27294,"line_start":496,"line_end":496,"column_start":5,"column_end":82}},{"value":"/ instead.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":27299,"byte_end":27311,"line_start":497,"line_end":497,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":27316,"byte_end":27319,"line_start":498,"line_end":498,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":27324,"byte_end":27364,"line_start":499,"line_end":499,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":491},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":27945,"byte_end":27956,"line_start":517,"line_end":517,"column_start":12,"column_end":23},"name":"swap_remove","qualname":"<IndexMap<K, V, S>>::swap_remove","value":"pub fn swap_remove<Q: ?Sized>(&mut Self, &Q) -> Option<V> where Q: Hash +\nEquivalent<K>","parent":null,"children":[],"decl_id":null,"docs":" Remove the key-value pair equivalent to `key` and return\n its value.","sig":null,"attributes":[{"value":"/ Remove the key-value pair equivalent to `key` and return","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":27534,"byte_end":27594,"line_start":507,"line_end":507,"column_start":5,"column_end":65}},{"value":"/ its value.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":27599,"byte_end":27613,"line_start":508,"line_end":508,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":27618,"byte_end":27621,"line_start":509,"line_end":509,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::swap_remove`, the pair is removed by swapping it with the","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":27626,"byte_end":27698,"line_start":510,"line_end":510,"column_start":5,"column_end":77}},{"value":"/ last element of the map and popping it off. **This perturbs","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":27703,"byte_end":27766,"line_start":511,"line_end":511,"column_start":5,"column_end":68}},{"value":"/ the position of what used to be the last element!**","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":27771,"byte_end":27826,"line_start":512,"line_end":512,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":27831,"byte_end":27834,"line_start":513,"line_end":513,"column_start":5,"column_end":8}},{"value":"/ Return `None` if `key` is not in map.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":27839,"byte_end":27880,"line_start":514,"line_end":514,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":27885,"byte_end":27888,"line_start":515,"line_end":515,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":27893,"byte_end":27933,"line_start":516,"line_end":516,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":493},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":28500,"byte_end":28517,"line_start":533,"line_end":533,"column_start":12,"column_end":29},"name":"swap_remove_entry","qualname":"<IndexMap<K, V, S>>::swap_remove_entry","value":"pub fn swap_remove_entry<Q: ?Sized>(&mut Self, &Q) -> Option<(K, V)> where\nQ: Hash + Equivalent<K>","parent":null,"children":[],"decl_id":null,"docs":" Remove and return the key-value pair equivalent to `key`.","sig":null,"attributes":[{"value":"/ Remove and return the key-value pair equivalent to `key`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":28107,"byte_end":28168,"line_start":524,"line_end":524,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":28173,"byte_end":28176,"line_start":525,"line_end":525,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::swap_remove`, the pair is removed by swapping it with the","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":28181,"byte_end":28253,"line_start":526,"line_end":526,"column_start":5,"column_end":77}},{"value":"/ last element of the map and popping it off. **This perturbs","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":28258,"byte_end":28321,"line_start":527,"line_end":527,"column_start":5,"column_end":68}},{"value":"/ the position of what used to be the last element!**","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":28326,"byte_end":28381,"line_start":528,"line_end":528,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":28386,"byte_end":28389,"line_start":529,"line_end":529,"column_start":5,"column_end":8}},{"value":"/ Return `None` if `key` is not in map.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":28394,"byte_end":28435,"line_start":530,"line_end":530,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":28440,"byte_end":28443,"line_start":531,"line_end":531,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":28448,"byte_end":28488,"line_start":532,"line_end":532,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":495},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":29188,"byte_end":29204,"line_start":553,"line_end":553,"column_start":12,"column_end":28},"name":"swap_remove_full","qualname":"<IndexMap<K, V, S>>::swap_remove_full","value":"pub fn swap_remove_full<Q: ?Sized>(&mut Self, &Q) -> Option<(usize, K, V)>\nwhere Q: Hash + Equivalent<K>","parent":null,"children":[],"decl_id":null,"docs":" Remove the key-value pair equivalent to `key` and return it and\n the index it had.","sig":null,"attributes":[{"value":"/ Remove the key-value pair equivalent to `key` and return it and","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":28763,"byte_end":28830,"line_start":543,"line_end":543,"column_start":5,"column_end":72}},{"value":"/ the index it had.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":28835,"byte_end":28856,"line_start":544,"line_end":544,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":28861,"byte_end":28864,"line_start":545,"line_end":545,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::swap_remove`, the pair is removed by swapping it with the","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":28869,"byte_end":28941,"line_start":546,"line_end":546,"column_start":5,"column_end":77}},{"value":"/ last element of the map and popping it off. **This perturbs","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":28946,"byte_end":29009,"line_start":547,"line_end":547,"column_start":5,"column_end":68}},{"value":"/ the position of what used to be the last element!**","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":29014,"byte_end":29069,"line_start":548,"line_end":548,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":29074,"byte_end":29077,"line_start":549,"line_end":549,"column_start":5,"column_end":8}},{"value":"/ Return `None` if `key` is not in map.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":29082,"byte_end":29123,"line_start":550,"line_end":550,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":29128,"byte_end":29131,"line_start":551,"line_end":551,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":29136,"byte_end":29176,"line_start":552,"line_end":552,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":497},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":29871,"byte_end":29883,"line_start":574,"line_end":574,"column_start":12,"column_end":24},"name":"shift_remove","qualname":"<IndexMap<K, V, S>>::shift_remove","value":"pub fn shift_remove<Q: ?Sized>(&mut Self, &Q) -> Option<V> where Q: Hash +\nEquivalent<K>","parent":null,"children":[],"decl_id":null,"docs":" Remove the key-value pair equivalent to `key` and return\n its value.","sig":null,"attributes":[{"value":"/ Remove the key-value pair equivalent to `key` and return","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":29466,"byte_end":29526,"line_start":564,"line_end":564,"column_start":5,"column_end":65}},{"value":"/ its value.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":29531,"byte_end":29545,"line_start":565,"line_end":565,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":29550,"byte_end":29553,"line_start":566,"line_end":566,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::remove`, the pair is removed by shifting all of the","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":29558,"byte_end":29624,"line_start":567,"line_end":567,"column_start":5,"column_end":71}},{"value":"/ elements that follow it, preserving their relative order.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":29629,"byte_end":29690,"line_start":568,"line_end":568,"column_start":5,"column_end":66}},{"value":"/ **This perturbs the index of all of those elements!**","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":29695,"byte_end":29752,"line_start":569,"line_end":569,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":29757,"byte_end":29760,"line_start":570,"line_end":570,"column_start":5,"column_end":8}},{"value":"/ Return `None` if `key` is not in map.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":29765,"byte_end":29806,"line_start":571,"line_end":571,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":29811,"byte_end":29814,"line_start":572,"line_end":572,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time (average).","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":29819,"byte_end":29859,"line_start":573,"line_end":573,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":499},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":30422,"byte_end":30440,"line_start":590,"line_end":590,"column_start":12,"column_end":30},"name":"shift_remove_entry","qualname":"<IndexMap<K, V, S>>::shift_remove_entry","value":"pub fn shift_remove_entry<Q: ?Sized>(&mut Self, &Q) -> Option<(K, V)> where\nQ: Hash + Equivalent<K>","parent":null,"children":[],"decl_id":null,"docs":" Remove and return the key-value pair equivalent to `key`.","sig":null,"attributes":[{"value":"/ Remove and return the key-value pair equivalent to `key`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":30035,"byte_end":30096,"line_start":581,"line_end":581,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":30101,"byte_end":30104,"line_start":582,"line_end":582,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::remove`, the pair is removed by shifting all of the","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":30109,"byte_end":30175,"line_start":583,"line_end":583,"column_start":5,"column_end":71}},{"value":"/ elements that follow it, preserving their relative order.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":30180,"byte_end":30241,"line_start":584,"line_end":584,"column_start":5,"column_end":66}},{"value":"/ **This perturbs the index of all of those elements!**","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":30246,"byte_end":30303,"line_start":585,"line_end":585,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":30308,"byte_end":30311,"line_start":586,"line_end":586,"column_start":5,"column_end":8}},{"value":"/ Return `None` if `key` is not in map.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":30316,"byte_end":30357,"line_start":587,"line_end":587,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":30362,"byte_end":30365,"line_start":588,"line_end":588,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time (average).","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":30370,"byte_end":30410,"line_start":589,"line_end":589,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":501},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":31106,"byte_end":31123,"line_start":610,"line_end":610,"column_start":12,"column_end":29},"name":"shift_remove_full","qualname":"<IndexMap<K, V, S>>::shift_remove_full","value":"pub fn shift_remove_full<Q: ?Sized>(&mut Self, &Q) -> Option<(usize, K, V)>\nwhere Q: Hash + Equivalent<K>","parent":null,"children":[],"decl_id":null,"docs":" Remove the key-value pair equivalent to `key` and return it and\n the index it had.","sig":null,"attributes":[{"value":"/ Remove the key-value pair equivalent to `key` and return it and","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":30687,"byte_end":30754,"line_start":600,"line_end":600,"column_start":5,"column_end":72}},{"value":"/ the index it had.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":30759,"byte_end":30780,"line_start":601,"line_end":601,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":30785,"byte_end":30788,"line_start":602,"line_end":602,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::remove`, the pair is removed by shifting all of the","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":30793,"byte_end":30859,"line_start":603,"line_end":603,"column_start":5,"column_end":71}},{"value":"/ elements that follow it, preserving their relative order.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":30864,"byte_end":30925,"line_start":604,"line_end":604,"column_start":5,"column_end":66}},{"value":"/ **This perturbs the index of all of those elements!**","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":30930,"byte_end":30987,"line_start":605,"line_end":605,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":30992,"byte_end":30995,"line_start":606,"line_end":606,"column_start":5,"column_end":8}},{"value":"/ Return `None` if `key` is not in map.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":31000,"byte_end":31041,"line_start":607,"line_end":607,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":31046,"byte_end":31049,"line_start":608,"line_end":608,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time (average).","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":31054,"byte_end":31094,"line_start":609,"line_end":609,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":503},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":31485,"byte_end":31488,"line_start":624,"line_end":624,"column_start":12,"column_end":15},"name":"pop","qualname":"<IndexMap<K, V, S>>::pop","value":"pub fn pop(&mut Self) -> Option<(K, V)>","parent":null,"children":[],"decl_id":null,"docs":" Remove the last key-value pair","sig":null,"attributes":[{"value":"/ Remove the last key-value pair","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":31386,"byte_end":31420,"line_start":621,"line_end":621,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":31425,"byte_end":31428,"line_start":622,"line_end":622,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":31433,"byte_end":31473,"line_start":623,"line_end":623,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":504},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":31831,"byte_end":31837,"line_start":635,"line_end":635,"column_start":12,"column_end":18},"name":"retain","qualname":"<IndexMap<K, V, S>>::retain","value":"pub fn retain<F>(&mut Self, F) where F: FnMut(&K, &mut V) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Scan through each key-value pair in the map and keep those where the\n closure `keep` returns `true`.","sig":null,"attributes":[{"value":"/ Scan through each key-value pair in the map and keep those where the","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":31555,"byte_end":31627,"line_start":628,"line_end":628,"column_start":5,"column_end":77}},{"value":"/ closure `keep` returns `true`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":31632,"byte_end":31666,"line_start":629,"line_end":629,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":31671,"byte_end":31674,"line_start":630,"line_end":630,"column_start":5,"column_end":8}},{"value":"/ The elements are visited in order, and remaining elements keep their","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":31679,"byte_end":31751,"line_start":631,"line_end":631,"column_start":5,"column_end":77}},{"value":"/ order.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":31756,"byte_end":31766,"line_start":632,"line_end":632,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":31771,"byte_end":31774,"line_start":633,"line_end":633,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time (average).","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":31779,"byte_end":31819,"line_start":634,"line_end":634,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":509},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":32275,"byte_end":32284,"line_start":652,"line_end":652,"column_start":12,"column_end":21},"name":"sort_keys","qualname":"<IndexMap<K, V, S>>::sort_keys","value":"pub fn sort_keys(&mut Self) where K: Ord","parent":null,"children":[],"decl_id":null,"docs":" Sort the map’s key-value pairs by the default ordering of the keys.","sig":null,"attributes":[{"value":"/ Sort the map’s key-value pairs by the default ordering of the keys.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":32147,"byte_end":32220,"line_start":649,"line_end":649,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":32225,"byte_end":32228,"line_start":650,"line_end":650,"column_start":5,"column_end":8}},{"value":"/ See `sort_by` for details.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":32233,"byte_end":32263,"line_start":651,"line_end":651,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":512},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":32870,"byte_end":32877,"line_start":669,"line_end":669,"column_start":12,"column_end":19},"name":"sort_by","qualname":"<IndexMap<K, V, S>>::sort_by","value":"pub fn sort_by<F>(&mut Self, F) where F: FnMut(&K, &V, &K, &V) -> Ordering","parent":null,"children":[],"decl_id":null,"docs":" Sort the map’s key-value pairs in place using the comparison\n function `compare`.","sig":null,"attributes":[{"value":"/ Sort the map’s key-value pairs in place using the comparison","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":32451,"byte_end":32517,"line_start":661,"line_end":661,"column_start":5,"column_end":69}},{"value":"/ function `compare`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":32522,"byte_end":32545,"line_start":662,"line_end":662,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":32550,"byte_end":32553,"line_start":663,"line_end":663,"column_start":5,"column_end":8}},{"value":"/ The comparison function receives two key and value pairs to compare (you","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":32558,"byte_end":32634,"line_start":664,"line_end":664,"column_start":5,"column_end":81}},{"value":"/ can sort by keys or values or their combination as needed).","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":32639,"byte_end":32702,"line_start":665,"line_end":665,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":32707,"byte_end":32710,"line_start":666,"line_end":666,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n log n + c)** time and **O(n)** space where *n* is","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":32715,"byte_end":32786,"line_start":667,"line_end":667,"column_start":5,"column_end":76}},{"value":"/ the length of the map and *c* the capacity. The sort is stable.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":32791,"byte_end":32858,"line_start":668,"line_end":668,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":516},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":33280,"byte_end":33289,"line_start":682,"line_end":682,"column_start":12,"column_end":21},"name":"sorted_by","qualname":"<IndexMap<K, V, S>>::sorted_by","value":"pub fn sorted_by<F>(Self, F) -> IntoIter<K, V> where F: FnMut(&K, &V, &K, &V)\n-> Ordering","parent":null,"children":[],"decl_id":null,"docs":" Sort the key-value pairs of the map and return a by value iterator of\n the key-value pairs with the result.","sig":null,"attributes":[{"value":"/ Sort the key-value pairs of the map and return a by value iterator of","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":33114,"byte_end":33187,"line_start":678,"line_end":678,"column_start":5,"column_end":78}},{"value":"/ the key-value pairs with the result.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":33192,"byte_end":33232,"line_start":679,"line_end":679,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":33237,"byte_end":33240,"line_start":680,"line_end":680,"column_start":5,"column_end":8}},{"value":"/ The sort is stable.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":33245,"byte_end":33268,"line_start":681,"line_end":681,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":519},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":33732,"byte_end":33739,"line_start":696,"line_end":696,"column_start":12,"column_end":19},"name":"reverse","qualname":"<IndexMap<K, V, S>>::reverse","value":"pub fn reverse(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Reverses the order of the map’s key-value pairs in place.","sig":null,"attributes":[{"value":"/ Reverses the order of the map’s key-value pairs in place.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":33595,"byte_end":33658,"line_start":693,"line_end":693,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":33663,"byte_end":33666,"line_start":694,"line_end":694,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time and **O(1)** space.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":33671,"byte_end":33720,"line_start":695,"line_end":695,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":524},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":33976,"byte_end":33985,"line_start":707,"line_end":707,"column_start":12,"column_end":21},"name":"get_index","qualname":"<IndexMap<K, V, S>>::get_index","value":"pub fn get_index(&Self, usize) -> Option<(&K, &V)>","parent":null,"children":[],"decl_id":null,"docs":" Get a key-value pair by index","sig":null,"attributes":[{"value":"/ Get a key-value pair by index","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":33828,"byte_end":33861,"line_start":702,"line_end":702,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":33866,"byte_end":33869,"line_start":703,"line_end":703,"column_start":5,"column_end":8}},{"value":"/ Valid indices are *0 <= index < self.len()*","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":33874,"byte_end":33921,"line_start":704,"line_end":704,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":33926,"byte_end":33929,"line_start":705,"line_end":705,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":33934,"byte_end":33964,"line_start":706,"line_end":706,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":525},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":34243,"byte_end":34256,"line_start":716,"line_end":716,"column_start":12,"column_end":25},"name":"get_index_mut","qualname":"<IndexMap<K, V, S>>::get_index_mut","value":"pub fn get_index_mut(&mut Self, usize) -> Option<(&mut K, &mut V)>","parent":null,"children":[],"decl_id":null,"docs":" Get a key-value pair by index","sig":null,"attributes":[{"value":"/ Get a key-value pair by index","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":34095,"byte_end":34128,"line_start":711,"line_end":711,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":34133,"byte_end":34136,"line_start":712,"line_end":712,"column_start":5,"column_end":8}},{"value":"/ Valid indices are *0 <= index < self.len()*","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":34141,"byte_end":34188,"line_start":713,"line_end":713,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":34193,"byte_end":34196,"line_start":714,"line_end":714,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":34201,"byte_end":34231,"line_start":715,"line_end":715,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":526},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":34473,"byte_end":34478,"line_start":723,"line_end":723,"column_start":12,"column_end":17},"name":"first","qualname":"<IndexMap<K, V, S>>::first","value":"pub fn first(&Self) -> Option<(&K, &V)>","parent":null,"children":[],"decl_id":null,"docs":" Get the first key-value pair","sig":null,"attributes":[{"value":"/ Get the first key-value pair","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":34386,"byte_end":34418,"line_start":720,"line_end":720,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":34423,"byte_end":34426,"line_start":721,"line_end":721,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":34431,"byte_end":34461,"line_start":722,"line_end":722,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":527},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":34692,"byte_end":34701,"line_start":730,"line_end":730,"column_start":12,"column_end":21},"name":"first_mut","qualname":"<IndexMap<K, V, S>>::first_mut","value":"pub fn first_mut(&mut Self) -> Option<(&K, &mut V)>","parent":null,"children":[],"decl_id":null,"docs":" Get the first key-value pair, with mutable access to the value","sig":null,"attributes":[{"value":"/ Get the first key-value pair, with mutable access to the value","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":34571,"byte_end":34637,"line_start":727,"line_end":727,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":34642,"byte_end":34645,"line_start":728,"line_end":728,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":34650,"byte_end":34680,"line_start":729,"line_end":729,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":528},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":34899,"byte_end":34903,"line_start":737,"line_end":737,"column_start":12,"column_end":16},"name":"last","qualname":"<IndexMap<K, V, S>>::last","value":"pub fn last(&Self) -> Option<(&K, &V)>","parent":null,"children":[],"decl_id":null,"docs":" Get the last key-value pair","sig":null,"attributes":[{"value":"/ Get the last key-value pair","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":34813,"byte_end":34844,"line_start":734,"line_end":734,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":34849,"byte_end":34852,"line_start":735,"line_end":735,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":34857,"byte_end":34887,"line_start":736,"line_end":736,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":529},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":35115,"byte_end":35123,"line_start":744,"line_end":744,"column_start":12,"column_end":20},"name":"last_mut","qualname":"<IndexMap<K, V, S>>::last_mut","value":"pub fn last_mut(&mut Self) -> Option<(&K, &mut V)>","parent":null,"children":[],"decl_id":null,"docs":" Get the last key-value pair, with mutable access to the value","sig":null,"attributes":[{"value":"/ Get the last key-value pair, with mutable access to the value","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":34995,"byte_end":35060,"line_start":741,"line_end":741,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":35065,"byte_end":35068,"line_start":742,"line_end":742,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":35073,"byte_end":35103,"line_start":743,"line_end":743,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":530},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":35610,"byte_end":35627,"line_start":757,"line_end":757,"column_start":12,"column_end":29},"name":"swap_remove_index","qualname":"<IndexMap<K, V, S>>::swap_remove_index","value":"pub fn swap_remove_index(&mut Self, usize) -> Option<(K, V)>","parent":null,"children":[],"decl_id":null,"docs":" Remove the key-value pair by index","sig":null,"attributes":[{"value":"/ Remove the key-value pair by index","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":35234,"byte_end":35272,"line_start":748,"line_end":748,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":35277,"byte_end":35280,"line_start":749,"line_end":749,"column_start":5,"column_end":8}},{"value":"/ Valid indices are *0 <= index < self.len()*","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":35285,"byte_end":35332,"line_start":750,"line_end":750,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":35337,"byte_end":35340,"line_start":751,"line_end":751,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::swap_remove`, the pair is removed by swapping it with the","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":35345,"byte_end":35417,"line_start":752,"line_end":752,"column_start":5,"column_end":77}},{"value":"/ last element of the map and popping it off. **This perturbs","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":35422,"byte_end":35485,"line_start":753,"line_end":753,"column_start":5,"column_end":68}},{"value":"/ the position of what used to be the last element!**","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":35490,"byte_end":35545,"line_start":754,"line_end":754,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":35550,"byte_end":35553,"line_start":755,"line_end":755,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":35558,"byte_end":35598,"line_start":756,"line_end":756,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":531},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":36097,"byte_end":36115,"line_start":770,"line_end":770,"column_start":12,"column_end":30},"name":"shift_remove_index","qualname":"<IndexMap<K, V, S>>::shift_remove_index","value":"pub fn shift_remove_index(&mut Self, usize) -> Option<(K, V)>","parent":null,"children":[],"decl_id":null,"docs":" Remove the key-value pair by index","sig":null,"attributes":[{"value":"/ Remove the key-value pair by index","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":35727,"byte_end":35765,"line_start":761,"line_end":761,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":35770,"byte_end":35773,"line_start":762,"line_end":762,"column_start":5,"column_end":8}},{"value":"/ Valid indices are *0 <= index < self.len()*","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":35778,"byte_end":35825,"line_start":763,"line_end":763,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":35830,"byte_end":35833,"line_start":764,"line_end":764,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::remove`, the pair is removed by shifting all of the","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":35838,"byte_end":35904,"line_start":765,"line_end":765,"column_start":5,"column_end":71}},{"value":"/ elements that follow it, preserving their relative order.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":35909,"byte_end":35970,"line_start":766,"line_end":766,"column_start":5,"column_end":66}},{"value":"/ **This perturbs the index of all of those elements!**","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":35975,"byte_end":36032,"line_start":767,"line_end":767,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":36037,"byte_end":36040,"line_start":768,"line_end":768,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time (average).","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":36045,"byte_end":36085,"line_start":769,"line_end":769,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":532},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":36347,"byte_end":36359,"line_start":777,"line_end":777,"column_start":12,"column_end":24},"name":"swap_indices","qualname":"<IndexMap<K, V, S>>::swap_indices","value":"pub fn swap_indices(&mut Self, usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Swaps the position of two key-value pairs in the map.","sig":null,"attributes":[{"value":"/ Swaps the position of two key-value pairs in the map.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":36216,"byte_end":36273,"line_start":774,"line_end":774,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":36278,"byte_end":36281,"line_start":775,"line_end":775,"column_start":5,"column_end":8}},{"value":"/ ***Panics*** if `a` or `b` are out of bounds.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":36286,"byte_end":36335,"line_start":776,"line_end":776,"column_start":5,"column_end":54}}]},{"kind":"Struct","id":{"krate":0,"index":533},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":36696,"byte_end":36700,"line_start":789,"line_end":789,"column_start":12,"column_end":16},"name":"Keys","qualname":"::map::Keys","value":"Keys {  }","parent":null,"children":[{"krate":0,"index":537}],"decl_id":null,"docs":" An iterator over the keys of a `IndexMap`.","sig":null,"attributes":[{"value":"/ An iterator over the keys of a `IndexMap`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":36439,"byte_end":36485,"line_start":782,"line_end":782,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":36486,"byte_end":36489,"line_start":783,"line_end":783,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`keys`] method on [`IndexMap`]. See its","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":36490,"byte_end":36566,"line_start":784,"line_end":784,"column_start":1,"column_end":77}},{"value":"/ documentation for more.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":36567,"byte_end":36594,"line_start":785,"line_end":785,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":36595,"byte_end":36598,"line_start":786,"line_end":786,"column_start":1,"column_end":4}},{"value":"/ [`keys`]: struct.IndexMap.html#method.keys","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":36599,"byte_end":36645,"line_start":787,"line_end":787,"column_start":1,"column_end":47}},{"value":"/ [`IndexMap`]: struct.IndexMap.html","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":36646,"byte_end":36684,"line_start":788,"line_end":788,"column_start":1,"column_end":39}}]},{"kind":"Struct","id":{"krate":0,"index":559},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":37794,"byte_end":37800,"line_start":833,"line_end":833,"column_start":12,"column_end":18},"name":"Values","qualname":"::map::Values","value":"Values {  }","parent":null,"children":[{"krate":0,"index":563}],"decl_id":null,"docs":" An iterator over the values of a `IndexMap`.","sig":null,"attributes":[{"value":"/ An iterator over the values of a `IndexMap`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":37529,"byte_end":37577,"line_start":826,"line_end":826,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":37578,"byte_end":37581,"line_start":827,"line_end":827,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`values`] method on [`IndexMap`]. See its","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":37582,"byte_end":37660,"line_start":828,"line_end":828,"column_start":1,"column_end":79}},{"value":"/ documentation for more.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":37661,"byte_end":37688,"line_start":829,"line_end":829,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":37689,"byte_end":37692,"line_start":830,"line_end":830,"column_start":1,"column_end":4}},{"value":"/ [`values`]: struct.IndexMap.html#method.values","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":37693,"byte_end":37743,"line_start":831,"line_end":831,"column_start":1,"column_end":51}},{"value":"/ [`IndexMap`]: struct.IndexMap.html","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":37744,"byte_end":37782,"line_start":832,"line_end":832,"column_start":1,"column_end":39}}]},{"kind":"Struct","id":{"krate":0,"index":585},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":38918,"byte_end":38927,"line_start":877,"line_end":877,"column_start":12,"column_end":21},"name":"ValuesMut","qualname":"::map::ValuesMut","value":"ValuesMut {  }","parent":null,"children":[{"krate":0,"index":589}],"decl_id":null,"docs":" A mutable iterator over the values of a `IndexMap`.","sig":null,"attributes":[{"value":"/ A mutable iterator over the values of a `IndexMap`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":38634,"byte_end":38689,"line_start":870,"line_end":870,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":38690,"byte_end":38693,"line_start":871,"line_end":871,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`values_mut`] method on [`IndexMap`]. See its","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":38694,"byte_end":38776,"line_start":872,"line_end":872,"column_start":1,"column_end":83}},{"value":"/ documentation for more.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":38777,"byte_end":38804,"line_start":873,"line_end":873,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":38805,"byte_end":38808,"line_start":874,"line_end":874,"column_start":1,"column_end":4}},{"value":"/ [`values_mut`]: struct.IndexMap.html#method.values_mut","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":38809,"byte_end":38867,"line_start":875,"line_end":875,"column_start":1,"column_end":59}},{"value":"/ [`IndexMap`]: struct.IndexMap.html","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":38868,"byte_end":38906,"line_start":876,"line_end":876,"column_start":1,"column_end":39}}]},{"kind":"Struct","id":{"krate":0,"index":603},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":39656,"byte_end":39660,"line_start":906,"line_end":906,"column_start":12,"column_end":16},"name":"Iter","qualname":"::map::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":607}],"decl_id":null,"docs":" An iterator over the entries of a `IndexMap`.","sig":null,"attributes":[{"value":"/ An iterator over the entries of a `IndexMap`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":39396,"byte_end":39445,"line_start":899,"line_end":899,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":39446,"byte_end":39449,"line_start":900,"line_end":900,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`iter`] method on [`IndexMap`]. See its","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":39450,"byte_end":39526,"line_start":901,"line_end":901,"column_start":1,"column_end":77}},{"value":"/ documentation for more.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":39527,"byte_end":39554,"line_start":902,"line_end":902,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":39555,"byte_end":39558,"line_start":903,"line_end":903,"column_start":1,"column_end":4}},{"value":"/ [`iter`]: struct.IndexMap.html#method.iter","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":39559,"byte_end":39605,"line_start":904,"line_end":904,"column_start":1,"column_end":47}},{"value":"/ [`IndexMap`]: struct.IndexMap.html","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":39606,"byte_end":39644,"line_start":905,"line_end":905,"column_start":1,"column_end":39}}]},{"kind":"Struct","id":{"krate":0,"index":629},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":40772,"byte_end":40779,"line_start":950,"line_end":950,"column_start":12,"column_end":19},"name":"IterMut","qualname":"::map::IterMut","value":"IterMut {  }","parent":null,"children":[{"krate":0,"index":633}],"decl_id":null,"docs":" A mutable iterator over the entries of a `IndexMap`.","sig":null,"attributes":[{"value":"/ A mutable iterator over the entries of a `IndexMap`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":40493,"byte_end":40549,"line_start":943,"line_end":943,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":40550,"byte_end":40553,"line_start":944,"line_end":944,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`iter_mut`] method on [`IndexMap`]. See its","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":40554,"byte_end":40634,"line_start":945,"line_end":945,"column_start":1,"column_end":81}},{"value":"/ documentation for more.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":40635,"byte_end":40662,"line_start":946,"line_end":946,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":40663,"byte_end":40666,"line_start":947,"line_end":947,"column_start":1,"column_end":4}},{"value":"/ [`iter_mut`]: struct.IndexMap.html#method.iter_mut","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":40667,"byte_end":40721,"line_start":948,"line_end":948,"column_start":1,"column_end":55}},{"value":"/ [`IndexMap`]: struct.IndexMap.html","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":40722,"byte_end":40760,"line_start":949,"line_end":949,"column_start":1,"column_end":39}}]},{"kind":"Struct","id":{"krate":0,"index":647},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":41568,"byte_end":41576,"line_start":979,"line_end":979,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::map::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":650}],"decl_id":null,"docs":" An owning iterator over the entries of a `IndexMap`.","sig":null,"attributes":[{"value":"/ An owning iterator over the entries of a `IndexMap`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":41247,"byte_end":41303,"line_start":972,"line_end":972,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":41304,"byte_end":41307,"line_start":973,"line_end":973,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`into_iter`] method on [`IndexMap`]","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":41308,"byte_end":41380,"line_start":974,"line_end":974,"column_start":1,"column_end":73}},{"value":"/ (provided by the `IntoIterator` trait). See its documentation for more.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":41381,"byte_end":41456,"line_start":975,"line_end":975,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":41457,"byte_end":41460,"line_start":976,"line_end":976,"column_start":1,"column_end":4}},{"value":"/ [`into_iter`]: struct.IndexMap.html#method.into_iter","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":41461,"byte_end":41517,"line_start":977,"line_end":977,"column_start":1,"column_end":57}},{"value":"/ [`IndexMap`]: struct.IndexMap.html","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":41518,"byte_end":41556,"line_start":978,"line_end":978,"column_start":1,"column_end":39}}]},{"kind":"Struct","id":{"krate":0,"index":667},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":42549,"byte_end":42554,"line_start":1015,"line_end":1015,"column_start":12,"column_end":17},"name":"Drain","qualname":"::map::Drain","value":"Drain {  }","parent":null,"children":[{"krate":0,"index":671}],"decl_id":null,"docs":" A draining iterator over the entries of a `IndexMap`.","sig":null,"attributes":[{"value":"/ A draining iterator over the entries of a `IndexMap`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":42278,"byte_end":42335,"line_start":1008,"line_end":1008,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":42336,"byte_end":42339,"line_start":1009,"line_end":1009,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`drain`] method on [`IndexMap`]. See its","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":42340,"byte_end":42417,"line_start":1010,"line_end":1010,"column_start":1,"column_end":78}},{"value":"/ documentation for more.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":42418,"byte_end":42445,"line_start":1011,"line_end":1011,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":42446,"byte_end":42449,"line_start":1012,"line_end":1012,"column_start":1,"column_end":4}},{"value":"/ [`drain`]: struct.IndexMap.html#method.drain","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":42450,"byte_end":42498,"line_start":1013,"line_end":1013,"column_start":1,"column_end":49}},{"value":"/ [`IndexMap`]: struct.IndexMap.html","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":42499,"byte_end":42537,"line_start":1014,"line_end":1014,"column_start":1,"column_end":39}}]},{"kind":"Mod","id":{"krate":0,"index":765},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"set","qualname":"::set","value":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","parent":null,"children":[{"krate":0,"index":766},{"krate":0,"index":769},{"krate":0,"index":770},{"krate":0,"index":773},{"krate":0,"index":776},{"krate":0,"index":779},{"krate":0,"index":782},{"krate":0,"index":783},{"krate":0,"index":786},{"krate":0,"index":787},{"krate":0,"index":789},{"krate":0,"index":790},{"krate":0,"index":793},{"krate":0,"index":796},{"krate":0,"index":797},{"krate":0,"index":800},{"krate":0,"index":803},{"krate":0,"index":806},{"krate":0,"index":809},{"krate":0,"index":812},{"krate":0,"index":815},{"krate":0,"index":818},{"krate":0,"index":819},{"krate":0,"index":822},{"krate":0,"index":825},{"krate":0,"index":828},{"krate":0,"index":830},{"krate":0,"index":834},{"krate":0,"index":839},{"krate":0,"index":848},{"krate":0,"index":852},{"krate":0,"index":856},{"krate":0,"index":871},{"krate":0,"index":936},{"krate":0,"index":947},{"krate":0,"index":952},{"krate":0,"index":955},{"krate":0,"index":958},{"krate":0,"index":961},{"krate":0,"index":964},{"krate":0,"index":967},{"krate":0,"index":971},{"krate":0,"index":975},{"krate":0,"index":978},{"krate":0,"index":981},{"krate":0,"index":984},{"krate":0,"index":987},{"krate":0,"index":991},{"krate":0,"index":994},{"krate":0,"index":996},{"krate":0,"index":1003},{"krate":0,"index":1009},{"krate":0,"index":1015},{"krate":0,"index":1021},{"krate":0,"index":1027},{"krate":0,"index":1031},{"krate":0,"index":1036},{"krate":0,"index":1039},{"krate":0,"index":1051},{"krate":0,"index":1057},{"krate":0,"index":1064},{"krate":0,"index":1068},{"krate":0,"index":1072},{"krate":0,"index":1076},{"krate":0,"index":1082},{"krate":0,"index":1089},{"krate":0,"index":1093},{"krate":0,"index":1097},{"krate":0,"index":1101},{"krate":0,"index":1107},{"krate":0,"index":1118},{"krate":0,"index":1123},{"krate":0,"index":1128},{"krate":0,"index":1133},{"krate":0,"index":1138},{"krate":0,"index":1148},{"krate":0,"index":1152},{"krate":0,"index":1156},{"krate":0,"index":1160},{"krate":0,"index":1166},{"krate":0,"index":1172},{"krate":0,"index":1178}],"decl_id":null,"docs":" A hash set implemented using `IndexMap`\n","sig":null,"attributes":[{"value":"/ A hash set implemented using `IndexMap`","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":90437,"byte_end":90480,"line_start":1,"line_end":1,"column_start":1,"column_end":44}}]},{"kind":"Struct","id":{"krate":0,"index":830},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":92526,"byte_end":92534,"line_start":63,"line_end":63,"column_start":12,"column_end":20},"name":"IndexSet","qualname":"::set::IndexSet","value":"IndexSet {  }","parent":null,"children":[{"krate":0,"index":833}],"decl_id":null,"docs":" A hash set where the iteration order of the values is independent of their\n hash values.","sig":null,"attributes":[{"value":"/ A hash set where the iteration order of the values is independent of their","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":90920,"byte_end":90998,"line_start":21,"line_end":21,"column_start":1,"column_end":79}},{"value":"/ hash values.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":90999,"byte_end":91015,"line_start":22,"line_end":22,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":91016,"byte_end":91019,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ The interface is closely compatible with the standard `HashSet`, but also","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":91020,"byte_end":91097,"line_start":24,"line_end":24,"column_start":1,"column_end":78}},{"value":"/ has additional features.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":91098,"byte_end":91126,"line_start":25,"line_end":25,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":91127,"byte_end":91130,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ # Order","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":91131,"byte_end":91142,"line_start":27,"line_end":27,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":91143,"byte_end":91146,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ The values have a consistent order that is determined by the sequence of","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":91147,"byte_end":91223,"line_start":29,"line_end":29,"column_start":1,"column_end":77}},{"value":"/ insertion and removal calls on the set. The order does not depend on the","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":91224,"byte_end":91300,"line_start":30,"line_end":30,"column_start":1,"column_end":77}},{"value":"/ values or the hash function at all. Note that insertion order and value","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":91301,"byte_end":91376,"line_start":31,"line_end":31,"column_start":1,"column_end":76}},{"value":"/ are not affected if a re-insertion is attempted once an element is","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":91377,"byte_end":91447,"line_start":32,"line_end":32,"column_start":1,"column_end":71}},{"value":"/ already present.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":91448,"byte_end":91468,"line_start":33,"line_end":33,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":91469,"byte_end":91472,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ All iterators traverse the set *in order*.  Set operation iterators like","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":91473,"byte_end":91549,"line_start":35,"line_end":35,"column_start":1,"column_end":77}},{"value":"/ `union` produce a concatenated order, as do their matching \"bitwise\"","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":91550,"byte_end":91622,"line_start":36,"line_end":36,"column_start":1,"column_end":73}},{"value":"/ operators.  See their documentation for specifics.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":91623,"byte_end":91677,"line_start":37,"line_end":37,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":91678,"byte_end":91681,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ The insertion order is preserved, with **notable exceptions** like the","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":91682,"byte_end":91756,"line_start":39,"line_end":39,"column_start":1,"column_end":75}},{"value":"/ `.remove()` or `.swap_remove()` methods. Methods such as `.sort_by()` of","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":91757,"byte_end":91833,"line_start":40,"line_end":40,"column_start":1,"column_end":77}},{"value":"/ course result in a new order, depending on the sorting order.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":91834,"byte_end":91899,"line_start":41,"line_end":41,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":91900,"byte_end":91903,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ # Indices","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":91904,"byte_end":91917,"line_start":43,"line_end":43,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":91918,"byte_end":91921,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ The values are indexed in a compact range without holes in the range","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":91922,"byte_end":91994,"line_start":45,"line_end":45,"column_start":1,"column_end":73}},{"value":"/ `0..self.len()`. For example, the method `.get_full` looks up the index for","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":91995,"byte_end":92074,"line_start":46,"line_end":46,"column_start":1,"column_end":80}},{"value":"/ a value, and the method `.get_index` looks up the value by index.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":92075,"byte_end":92144,"line_start":47,"line_end":47,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":92145,"byte_end":92148,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":92149,"byte_end":92163,"line_start":49,"line_end":49,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":92164,"byte_end":92167,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":92168,"byte_end":92175,"line_start":51,"line_end":51,"column_start":1,"column_end":8}},{"value":"/ use indexmap::IndexSet;","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":92176,"byte_end":92203,"line_start":52,"line_end":52,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":92204,"byte_end":92207,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ // Collects which letters appear in a sentence.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":92208,"byte_end":92259,"line_start":54,"line_end":54,"column_start":1,"column_end":52}},{"value":"/ let letters: IndexSet<_> = \"a short treatise on fungi\".chars().collect();","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":92260,"byte_end":92337,"line_start":55,"line_end":55,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":92338,"byte_end":92341,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ assert!(letters.contains(&'s'));","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":92342,"byte_end":92378,"line_start":57,"line_end":57,"column_start":1,"column_end":37}},{"value":"/ assert!(letters.contains(&'t'));","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":92379,"byte_end":92415,"line_start":58,"line_end":58,"column_start":1,"column_end":37}},{"value":"/ assert!(letters.contains(&'u'));","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":92416,"byte_end":92452,"line_start":59,"line_end":59,"column_start":1,"column_end":37}},{"value":"/ assert!(!letters.contains(&'y'));","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":92453,"byte_end":92490,"line_start":60,"line_end":60,"column_start":1,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":92491,"byte_end":92498,"line_start":61,"line_end":61,"column_start":1,"column_end":8}},{"value":"cfg(has_std)","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":92499,"byte_end":92514,"line_start":62,"line_end":62,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":854},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":93956,"byte_end":93959,"line_start":130,"line_end":130,"column_start":12,"column_end":15},"name":"new","qualname":"<IndexSet<T>>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new set. (Does not allocate.)\n","sig":null,"attributes":[{"value":"/ Create a new set. (Does not allocate.)","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":93902,"byte_end":93944,"line_start":129,"line_end":129,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":855},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":94197,"byte_end":94210,"line_start":140,"line_end":140,"column_start":12,"column_end":25},"name":"with_capacity","qualname":"<IndexSet<T>>::with_capacity","value":"pub fn with_capacity(usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new set with capacity for `n` elements.\n (Does not allocate if `n` is zero.)","sig":null,"attributes":[{"value":"/ Create a new set with capacity for `n` elements.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":94046,"byte_end":94098,"line_start":136,"line_end":136,"column_start":5,"column_end":57}},{"value":"/ (Does not allocate if `n` is zero.)","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":94103,"byte_end":94142,"line_start":137,"line_end":137,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":94147,"byte_end":94150,"line_start":138,"line_end":138,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":94155,"byte_end":94185,"line_start":139,"line_end":139,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":859},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":94497,"byte_end":94521,"line_start":152,"line_end":152,"column_start":12,"column_end":36},"name":"with_capacity_and_hasher","qualname":"<IndexSet<T, S>>::with_capacity_and_hasher","value":"pub fn with_capacity_and_hasher(usize, S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new set with capacity for `n` elements.\n (Does not allocate if `n` is zero.)","sig":null,"attributes":[{"value":"/ Create a new set with capacity for `n` elements.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":94346,"byte_end":94398,"line_start":148,"line_end":148,"column_start":5,"column_end":57}},{"value":"/ (Does not allocate if `n` is zero.)","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":94403,"byte_end":94442,"line_start":149,"line_end":149,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":94447,"byte_end":94450,"line_start":150,"line_end":150,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":94455,"byte_end":94485,"line_start":151,"line_end":151,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":860},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":94721,"byte_end":94732,"line_start":159,"line_end":159,"column_start":12,"column_end":23},"name":"with_hasher","qualname":"<IndexSet<T, S>>::with_hasher","value":"pub fn with_hasher(S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new set with `hash_builder`\n","sig":null,"attributes":[{"value":"/ Create a new set with `hash_builder`","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":94669,"byte_end":94709,"line_start":158,"line_end":158,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":861},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":94896,"byte_end":94904,"line_start":166,"line_end":166,"column_start":12,"column_end":20},"name":"capacity","qualname":"<IndexSet<T, S>>::capacity","value":"pub fn capacity(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Computes in **O(1)** time.\n","sig":null,"attributes":[{"value":"/ Computes in **O(1)** time.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":94854,"byte_end":94884,"line_start":165,"line_end":165,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":862},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":95024,"byte_end":95030,"line_start":171,"line_end":171,"column_start":12,"column_end":18},"name":"hasher","qualname":"<IndexSet<T, S>>::hasher","value":"pub fn hasher(&Self) -> &S","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to the set's `BuildHasher`.\n","sig":null,"attributes":[{"value":"/ Return a reference to the set's `BuildHasher`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":94962,"byte_end":95012,"line_start":170,"line_end":170,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":863},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":95183,"byte_end":95186,"line_start":178,"line_end":178,"column_start":12,"column_end":15},"name":"len","qualname":"<IndexSet<T, S>>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the number of elements in the set.","sig":null,"attributes":[{"value":"/ Return the number of elements in the set.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":95083,"byte_end":95128,"line_start":175,"line_end":175,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":95133,"byte_end":95136,"line_start":176,"line_end":176,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":95141,"byte_end":95171,"line_start":177,"line_end":177,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":864},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":95343,"byte_end":95351,"line_start":185,"line_end":185,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<IndexSet<T, S>>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the set contains no elements.","sig":null,"attributes":[{"value":"/ Returns true if the set contains no elements.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":95239,"byte_end":95288,"line_start":182,"line_end":182,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":95293,"byte_end":95296,"line_start":183,"line_end":183,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":95301,"byte_end":95331,"line_start":184,"line_end":184,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":865},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":95485,"byte_end":95489,"line_start":190,"line_end":190,"column_start":12,"column_end":16},"name":"iter","qualname":"<IndexSet<T, S>>::iter","value":"pub fn iter(&Self) -> Iter<, T>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over the values of the set, in their order\n","sig":null,"attributes":[{"value":"/ Return an iterator over the values of the set, in their order","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":95408,"byte_end":95473,"line_start":189,"line_end":189,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":866},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":95711,"byte_end":95716,"line_start":199,"line_end":199,"column_start":12,"column_end":17},"name":"clear","qualname":"<IndexSet<T, S>>::clear","value":"pub fn clear(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Remove all elements in the set, while preserving its capacity.","sig":null,"attributes":[{"value":"/ Remove all elements in the set, while preserving its capacity.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":95590,"byte_end":95656,"line_start":196,"line_end":196,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":95661,"byte_end":95664,"line_start":197,"line_end":197,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":95669,"byte_end":95699,"line_start":198,"line_end":198,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":867},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":95943,"byte_end":95951,"line_start":206,"line_end":206,"column_start":12,"column_end":20},"name":"truncate","qualname":"<IndexSet<T, S>>::truncate","value":"pub fn truncate(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Shortens the set, keeping the first `len` elements and dropping the rest.","sig":null,"attributes":[{"value":"/ Shortens the set, keeping the first `len` elements and dropping the rest.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":95767,"byte_end":95844,"line_start":203,"line_end":203,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":95849,"byte_end":95852,"line_start":204,"line_end":204,"column_start":5,"column_end":8}},{"value":"/ If `len` is greater than the set's current length, this has no effect.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":95857,"byte_end":95931,"line_start":205,"line_end":205,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":868},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":96693,"byte_end":96698,"line_start":223,"line_end":223,"column_start":12,"column_end":17},"name":"drain","qualname":"<IndexSet<T, S>>::drain","value":"pub fn drain<R>(&mut Self, R) -> Drain<, T> where R: RangeBounds<usize>","parent":null,"children":[],"decl_id":null,"docs":" Clears the `IndexSet` in the given index range, returning those values\n as a drain iterator.","sig":null,"attributes":[{"value":"/ Clears the `IndexSet` in the given index range, returning those values","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":96020,"byte_end":96094,"line_start":210,"line_end":210,"column_start":5,"column_end":79}},{"value":"/ as a drain iterator.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":96099,"byte_end":96123,"line_start":211,"line_end":211,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":96128,"byte_end":96131,"line_start":212,"line_end":212,"column_start":5,"column_end":8}},{"value":"/ The range may be any type that implements `RangeBounds<usize>`,","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":96136,"byte_end":96203,"line_start":213,"line_end":213,"column_start":5,"column_end":72}},{"value":"/ including all of the `std::ops::Range*` types, or even a tuple pair of","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":96208,"byte_end":96282,"line_start":214,"line_end":214,"column_start":5,"column_end":79}},{"value":"/ `Bound` start and end values. To drain the set entirely, use `RangeFull`","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":96287,"byte_end":96363,"line_start":215,"line_end":215,"column_start":5,"column_end":81}},{"value":"/ like `set.drain(..)`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":96368,"byte_end":96393,"line_start":216,"line_end":216,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":96398,"byte_end":96401,"line_start":217,"line_end":217,"column_start":5,"column_end":8}},{"value":"/ This shifts down all entries following the drained range to fill the","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":96406,"byte_end":96478,"line_start":218,"line_end":218,"column_start":5,"column_end":77}},{"value":"/ gap, and keeps the allocated memory for reuse.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":96483,"byte_end":96533,"line_start":219,"line_end":219,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":96538,"byte_end":96541,"line_start":220,"line_end":220,"column_start":5,"column_end":8}},{"value":"/ ***Panics*** if the starting point is greater than the end point or if","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":96546,"byte_end":96620,"line_start":221,"line_end":221,"column_start":5,"column_end":79}},{"value":"/ the end point is greater than the length of the set.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":96625,"byte_end":96681,"line_start":222,"line_end":222,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":870},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":97209,"byte_end":97218,"line_start":239,"line_end":239,"column_start":12,"column_end":21},"name":"split_off","qualname":"<IndexSet<T, S>>::split_off","value":"pub fn split_off(&mut Self, usize) -> Self where S: Clone","parent":null,"children":[],"decl_id":null,"docs":" Splits the collection into two at the given index.","sig":null,"attributes":[{"value":"/ Splits the collection into two at the given index.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":96869,"byte_end":96923,"line_start":232,"line_end":232,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":96928,"byte_end":96931,"line_start":233,"line_end":233,"column_start":5,"column_end":8}},{"value":"/ Returns a newly allocated set containing the elements in the range","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":96936,"byte_end":97006,"line_start":234,"line_end":234,"column_start":5,"column_end":75}},{"value":"/ `[at, len)`. After the call, the original set will be left containing","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":97011,"byte_end":97084,"line_start":235,"line_end":235,"column_start":5,"column_end":78}},{"value":"/ the elements `[0, at)` with its previous capacity unchanged.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":97089,"byte_end":97153,"line_start":236,"line_end":236,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":97158,"byte_end":97161,"line_start":237,"line_end":237,"column_start":5,"column_end":8}},{"value":"/ ***Panics*** if `at > len`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":97166,"byte_end":97197,"line_start":238,"line_end":238,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":874},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":97539,"byte_end":97546,"line_start":257,"line_end":257,"column_start":12,"column_end":19},"name":"reserve","qualname":"<IndexSet<T, S>>::reserve","value":"pub fn reserve(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Reserve capacity for `additional` more values.","sig":null,"attributes":[{"value":"/ Reserve capacity for `additional` more values.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":97434,"byte_end":97484,"line_start":254,"line_end":254,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":97489,"byte_end":97492,"line_start":255,"line_end":255,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":97497,"byte_end":97527,"line_start":256,"line_end":256,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":875},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":97738,"byte_end":97751,"line_start":264,"line_end":264,"column_start":12,"column_end":25},"name":"shrink_to_fit","qualname":"<IndexSet<T, S>>::shrink_to_fit","value":"pub fn shrink_to_fit(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Shrink the capacity of the set as much as possible.","sig":null,"attributes":[{"value":"/ Shrink the capacity of the set as much as possible.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":97628,"byte_end":97683,"line_start":261,"line_end":261,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":97688,"byte_end":97691,"line_start":262,"line_end":262,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":97696,"byte_end":97726,"line_start":263,"line_end":263,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":876},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":98162,"byte_end":98168,"line_start":276,"line_end":276,"column_start":12,"column_end":18},"name":"insert","qualname":"<IndexSet<T, S>>::insert","value":"pub fn insert(&mut Self, T) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Insert the value into the set.","sig":null,"attributes":[{"value":"/ Insert the value into the set.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":97810,"byte_end":97844,"line_start":268,"line_end":268,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":97849,"byte_end":97852,"line_start":269,"line_end":269,"column_start":5,"column_end":8}},{"value":"/ If an equivalent item already exists in the set, it returns","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":97857,"byte_end":97920,"line_start":270,"line_end":270,"column_start":5,"column_end":68}},{"value":"/ `false` leaving the original value in the set and without","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":97925,"byte_end":97986,"line_start":271,"line_end":271,"column_start":5,"column_end":66}},{"value":"/ altering its insertion order. Otherwise, it inserts the new","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":97991,"byte_end":98054,"line_start":272,"line_end":272,"column_start":5,"column_end":68}},{"value":"/ item and returns `true`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":98059,"byte_end":98087,"line_start":273,"line_end":273,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":98092,"byte_end":98095,"line_start":274,"line_end":274,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (amortized average).","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":98100,"byte_end":98150,"line_start":275,"line_end":275,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":877},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":98706,"byte_end":98717,"line_start":289,"line_end":289,"column_start":12,"column_end":23},"name":"insert_full","qualname":"<IndexSet<T, S>>::insert_full","value":"pub fn insert_full(&mut Self, T) -> (usize, bool)","parent":null,"children":[],"decl_id":null,"docs":" Insert the value into the set, and get its index.","sig":null,"attributes":[{"value":"/ Insert the value into the set, and get its index.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":98256,"byte_end":98309,"line_start":280,"line_end":280,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":98314,"byte_end":98317,"line_start":281,"line_end":281,"column_start":5,"column_end":8}},{"value":"/ If an equivalent item already exists in the set, it returns","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":98322,"byte_end":98385,"line_start":282,"line_end":282,"column_start":5,"column_end":68}},{"value":"/ the index of the existing item and `false`, leaving the","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":98390,"byte_end":98449,"line_start":283,"line_end":283,"column_start":5,"column_end":64}},{"value":"/ original value in the set and without altering its insertion","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":98454,"byte_end":98518,"line_start":284,"line_end":284,"column_start":5,"column_end":69}},{"value":"/ order. Otherwise, it inserts the new item and returns the index","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":98523,"byte_end":98590,"line_start":285,"line_end":285,"column_start":5,"column_end":72}},{"value":"/ of the inserted item and `true`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":98595,"byte_end":98631,"line_start":286,"line_end":286,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":98636,"byte_end":98639,"line_start":287,"line_end":287,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (amortized average).","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":98644,"byte_end":98694,"line_start":288,"line_end":288,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":879},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":99207,"byte_end":99217,"line_start":305,"line_end":305,"column_start":12,"column_end":22},"name":"difference","qualname":"<IndexSet<T, S>>::difference","value":"pub fn difference<'a, S2>(&'a Self, &'a IndexSet<T, S2>) -> Difference where\nS2: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over the values that are in `self` but not `other`.","sig":null,"attributes":[{"value":"/ Return an iterator over the values that are in `self` but not `other`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":99039,"byte_end":99113,"line_start":302,"line_end":302,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":99118,"byte_end":99121,"line_start":303,"line_end":303,"column_start":5,"column_end":8}},{"value":"/ Values are produced in the same order that they appear in `self`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":99126,"byte_end":99195,"line_start":304,"line_end":304,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":882},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":99666,"byte_end":99686,"line_start":320,"line_end":320,"column_start":12,"column_end":32},"name":"symmetric_difference","qualname":"<IndexSet<T, S>>::symmetric_difference","value":"pub fn symmetric_difference<'a, S2>(&'a Self, &'a IndexSet<T, S2>)\n-> SymmetricDifference where S2: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over the values that are in `self` or `other`,\n but not in both.","sig":null,"attributes":[{"value":"/ Return an iterator over the values that are in `self` or `other`,","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":99422,"byte_end":99491,"line_start":315,"line_end":315,"column_start":5,"column_end":74}},{"value":"/ but not in both.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":99496,"byte_end":99516,"line_start":316,"line_end":316,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":99521,"byte_end":99524,"line_start":317,"line_end":317,"column_start":5,"column_end":8}},{"value":"/ Values from `self` are produced in their original order, followed by","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":99529,"byte_end":99601,"line_start":318,"line_end":318,"column_start":5,"column_end":77}},{"value":"/ values from `other` in their original order.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":99606,"byte_end":99654,"line_start":319,"line_end":319,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":885},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":100126,"byte_end":100138,"line_start":335,"line_end":335,"column_start":12,"column_end":24},"name":"intersection","qualname":"<IndexSet<T, S>>::intersection","value":"pub fn intersection<'a, S2>(&'a Self, &'a IndexSet<T, S2>) -> Intersection\nwhere S2: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over the values that are in both `self` and `other`.","sig":null,"attributes":[{"value":"/ Return an iterator over the values that are in both `self` and `other`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":99957,"byte_end":100032,"line_start":332,"line_end":332,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":100037,"byte_end":100040,"line_start":333,"line_end":333,"column_start":5,"column_end":8}},{"value":"/ Values are produced in the same order that they appear in `self`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":100045,"byte_end":100114,"line_start":334,"line_end":334,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":888},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":100580,"byte_end":100585,"line_start":349,"line_end":349,"column_start":12,"column_end":17},"name":"union","qualname":"<IndexSet<T, S>>::union","value":"pub fn union<'a, S2>(&'a Self, &'a IndexSet<T, S2>) -> Union where\nS2: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over all values that are in `self` or `other`.","sig":null,"attributes":[{"value":"/ Return an iterator over all values that are in `self` or `other`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":100347,"byte_end":100416,"line_start":345,"line_end":345,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":100421,"byte_end":100424,"line_start":346,"line_end":346,"column_start":5,"column_end":8}},{"value":"/ Values from `self` are produced in their original order, followed by","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":100429,"byte_end":100501,"line_start":347,"line_end":347,"column_start":5,"column_end":77}},{"value":"/ values that are unique to `other` in their original order.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":100506,"byte_end":100568,"line_start":348,"line_end":348,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":891},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":100919,"byte_end":100927,"line_start":361,"line_end":361,"column_start":12,"column_end":20},"name":"contains","qualname":"<IndexSet<T, S>>::contains","value":"pub fn contains<Q: ?Sized>(&Self, &Q) -> bool where Q: Hash + Equivalent<T>","parent":null,"children":[],"decl_id":null,"docs":" Return `true` if an equivalent to `value` exists in the set.","sig":null,"attributes":[{"value":"/ Return `true` if an equivalent to `value` exists in the set.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":100790,"byte_end":100854,"line_start":358,"line_end":358,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":100859,"byte_end":100862,"line_start":359,"line_end":359,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":100867,"byte_end":100907,"line_start":360,"line_end":360,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":893},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":101220,"byte_end":101223,"line_start":372,"line_end":372,"column_start":12,"column_end":15},"name":"get","qualname":"<IndexSet<T, S>>::get","value":"pub fn get<Q: ?Sized>(&Self, &Q) -> Option<&T> where Q: Hash + Equivalent<T>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to the value stored in the set, if it is present,\n else `None`.","sig":null,"attributes":[{"value":"/ Return a reference to the value stored in the set, if it is present,","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":101062,"byte_end":101134,"line_start":368,"line_end":368,"column_start":5,"column_end":77}},{"value":"/ else `None`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":101139,"byte_end":101155,"line_start":369,"line_end":369,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":101160,"byte_end":101163,"line_start":370,"line_end":370,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":101168,"byte_end":101208,"line_start":371,"line_end":371,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":896},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":101426,"byte_end":101434,"line_start":380,"line_end":380,"column_start":12,"column_end":20},"name":"get_full","qualname":"<IndexSet<T, S>>::get_full","value":"pub fn get_full<Q: ?Sized>(&Self, &Q) -> Option<(usize, &T)> where Q: Hash +\nEquivalent<T>","parent":null,"children":[],"decl_id":null,"docs":" Return item index and value\n","sig":null,"attributes":[{"value":"/ Return item index and value","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":101383,"byte_end":101414,"line_start":379,"line_end":379,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":899},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":101664,"byte_end":101676,"line_start":388,"line_end":388,"column_start":12,"column_end":24},"name":"get_index_of","qualname":"<IndexSet<T, S>>::get_index_of","value":"pub fn get_index_of<Q: ?Sized>(&Self, &Q) -> Option<usize> where Q: Hash +\nEquivalent<T>","parent":null,"children":[],"decl_id":null,"docs":" Return item index, if it exists in the set\n","sig":null,"attributes":[{"value":"/ Return item index, if it exists in the set","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":101606,"byte_end":101652,"line_start":387,"line_end":387,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":901},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":102019,"byte_end":102026,"line_start":399,"line_end":399,"column_start":12,"column_end":19},"name":"replace","qualname":"<IndexSet<T, S>>::replace","value":"pub fn replace(&mut Self, T) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Adds a value to the set, replacing the existing value, if any, that is\n equal to the given one. Returns the replaced value.","sig":null,"attributes":[{"value":"/ Adds a value to the set, replacing the existing value, if any, that is","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":101820,"byte_end":101894,"line_start":395,"line_end":395,"column_start":5,"column_end":79}},{"value":"/ equal to the given one. Returns the replaced value.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":101899,"byte_end":101954,"line_start":396,"line_end":396,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":101959,"byte_end":101962,"line_start":397,"line_end":397,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":101967,"byte_end":102007,"line_start":398,"line_end":398,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":903},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":102602,"byte_end":102608,"line_start":417,"line_end":417,"column_start":12,"column_end":18},"name":"remove","qualname":"<IndexSet<T, S>>::remove","value":"pub fn remove<Q: ?Sized>(&mut Self, &Q) -> bool where Q: Hash + Equivalent<T>","parent":null,"children":[],"decl_id":null,"docs":" Remove the value from the set, and return `true` if it was present.","sig":null,"attributes":[{"value":"/ Remove the value from the set, and return `true` if it was present.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":102299,"byte_end":102370,"line_start":411,"line_end":411,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":102375,"byte_end":102378,"line_start":412,"line_end":412,"column_start":5,"column_end":8}},{"value":"/ **NOTE:** This is equivalent to `.swap_remove(value)`, if you want","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":102383,"byte_end":102453,"line_start":413,"line_end":413,"column_start":5,"column_end":75}},{"value":"/ to preserve the order of the values in the set, use `.shift_remove(value)`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":102458,"byte_end":102537,"line_start":414,"line_end":414,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":102542,"byte_end":102545,"line_start":415,"line_end":415,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":102550,"byte_end":102590,"line_start":416,"line_end":416,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":905},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":103154,"byte_end":103165,"line_start":433,"line_end":433,"column_start":12,"column_end":23},"name":"swap_remove","qualname":"<IndexSet<T, S>>::swap_remove","value":"pub fn swap_remove<Q: ?Sized>(&mut Self, &Q) -> bool where Q: Hash +\nEquivalent<T>","parent":null,"children":[],"decl_id":null,"docs":" Remove the value from the set, and return `true` if it was present.","sig":null,"attributes":[{"value":"/ Remove the value from the set, and return `true` if it was present.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":102742,"byte_end":102813,"line_start":424,"line_end":424,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":102818,"byte_end":102821,"line_start":425,"line_end":425,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::swap_remove`, the value is removed by swapping it with the","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":102826,"byte_end":102899,"line_start":426,"line_end":426,"column_start":5,"column_end":78}},{"value":"/ last element of the set and popping it off. **This perturbs","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":102904,"byte_end":102967,"line_start":427,"line_end":427,"column_start":5,"column_end":68}},{"value":"/ the position of what used to be the last element!**","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":102972,"byte_end":103027,"line_start":428,"line_end":428,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":103032,"byte_end":103035,"line_start":429,"line_end":429,"column_start":5,"column_end":8}},{"value":"/ Return `false` if `value` was not in the set.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":103040,"byte_end":103089,"line_start":430,"line_end":430,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":103094,"byte_end":103097,"line_start":431,"line_end":431,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":103102,"byte_end":103142,"line_start":432,"line_end":432,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":907},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":103719,"byte_end":103731,"line_start":449,"line_end":449,"column_start":12,"column_end":24},"name":"shift_remove","qualname":"<IndexSet<T, S>>::shift_remove","value":"pub fn shift_remove<Q: ?Sized>(&mut Self, &Q) -> bool where Q: Hash +\nEquivalent<T>","parent":null,"children":[],"decl_id":null,"docs":" Remove the value from the set, and return `true` if it was present.","sig":null,"attributes":[{"value":"/ Remove the value from the set, and return `true` if it was present.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":103313,"byte_end":103384,"line_start":440,"line_end":440,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":103389,"byte_end":103392,"line_start":441,"line_end":441,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::remove`, the value is removed by shifting all of the","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":103397,"byte_end":103464,"line_start":442,"line_end":442,"column_start":5,"column_end":72}},{"value":"/ elements that follow it, preserving their relative order.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":103469,"byte_end":103530,"line_start":443,"line_end":443,"column_start":5,"column_end":66}},{"value":"/ **This perturbs the index of all of those elements!**","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":103535,"byte_end":103592,"line_start":444,"line_end":444,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":103597,"byte_end":103600,"line_start":445,"line_end":445,"column_start":5,"column_end":8}},{"value":"/ Return `false` if `value` was not in the set.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":103605,"byte_end":103654,"line_start":446,"line_end":446,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":103659,"byte_end":103662,"line_start":447,"line_end":447,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time (average).","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":103667,"byte_end":103707,"line_start":448,"line_end":448,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":909},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":104217,"byte_end":104221,"line_start":464,"line_end":464,"column_start":12,"column_end":16},"name":"take","qualname":"<IndexSet<T, S>>::take","value":"pub fn take<Q: ?Sized>(&mut Self, &Q) -> Option<T> where Q: Hash +\nEquivalent<T>","parent":null,"children":[],"decl_id":null,"docs":" Removes and returns the value in the set, if any, that is equal to the\n given one.","sig":null,"attributes":[{"value":"/ Removes and returns the value in the set, if any, that is equal to the","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":103880,"byte_end":103954,"line_start":456,"line_end":456,"column_start":5,"column_end":79}},{"value":"/ given one.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":103959,"byte_end":103973,"line_start":457,"line_end":457,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":103978,"byte_end":103981,"line_start":458,"line_end":458,"column_start":5,"column_end":8}},{"value":"/ **NOTE:** This is equivalent to `.swap_take(value)`, if you need to","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":103986,"byte_end":104057,"line_start":459,"line_end":459,"column_start":5,"column_end":76}},{"value":"/ preserve the order of the values in the set, use `.shift_take(value)`","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":104062,"byte_end":104135,"line_start":460,"line_end":460,"column_start":5,"column_end":78}},{"value":"/ instead.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":104140,"byte_end":104152,"line_start":461,"line_end":461,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":104157,"byte_end":104160,"line_start":462,"line_end":462,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":104165,"byte_end":104205,"line_start":463,"line_end":463,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":911},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":104791,"byte_end":104800,"line_start":481,"line_end":481,"column_start":12,"column_end":21},"name":"swap_take","qualname":"<IndexSet<T, S>>::swap_take","value":"pub fn swap_take<Q: ?Sized>(&mut Self, &Q) -> Option<T> where Q: Hash +\nEquivalent<T>","parent":null,"children":[],"decl_id":null,"docs":" Removes and returns the value in the set, if any, that is equal to the\n given one.","sig":null,"attributes":[{"value":"/ Removes and returns the value in the set, if any, that is equal to the","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":104358,"byte_end":104432,"line_start":471,"line_end":471,"column_start":5,"column_end":79}},{"value":"/ given one.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":104437,"byte_end":104451,"line_start":472,"line_end":472,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":104456,"byte_end":104459,"line_start":473,"line_end":473,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::swap_remove`, the value is removed by swapping it with the","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":104464,"byte_end":104537,"line_start":474,"line_end":474,"column_start":5,"column_end":78}},{"value":"/ last element of the set and popping it off. **This perturbs","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":104542,"byte_end":104605,"line_start":475,"line_end":475,"column_start":5,"column_end":68}},{"value":"/ the position of what used to be the last element!**","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":104610,"byte_end":104665,"line_start":476,"line_end":476,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":104670,"byte_end":104673,"line_start":477,"line_end":477,"column_start":5,"column_end":8}},{"value":"/ Return `None` if `value` was not in the set.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":104678,"byte_end":104726,"line_start":478,"line_end":478,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":104731,"byte_end":104734,"line_start":479,"line_end":479,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":104739,"byte_end":104779,"line_start":480,"line_end":480,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":914},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":105393,"byte_end":105403,"line_start":498,"line_end":498,"column_start":12,"column_end":22},"name":"shift_take","qualname":"<IndexSet<T, S>>::shift_take","value":"pub fn shift_take<Q: ?Sized>(&mut Self, &Q) -> Option<T> where Q: Hash +\nEquivalent<T>","parent":null,"children":[],"decl_id":null,"docs":" Removes and returns the value in the set, if any, that is equal to the\n given one.","sig":null,"attributes":[{"value":"/ Removes and returns the value in the set, if any, that is equal to the","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":104966,"byte_end":105040,"line_start":488,"line_end":488,"column_start":5,"column_end":79}},{"value":"/ given one.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":105045,"byte_end":105059,"line_start":489,"line_end":489,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":105064,"byte_end":105067,"line_start":490,"line_end":490,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::remove`, the value is removed by shifting all of the","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":105072,"byte_end":105139,"line_start":491,"line_end":491,"column_start":5,"column_end":72}},{"value":"/ elements that follow it, preserving their relative order.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":105144,"byte_end":105205,"line_start":492,"line_end":492,"column_start":5,"column_end":66}},{"value":"/ **This perturbs the index of all of those elements!**","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":105210,"byte_end":105267,"line_start":493,"line_end":493,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":105272,"byte_end":105275,"line_start":494,"line_end":494,"column_start":5,"column_end":8}},{"value":"/ Return `None` if `value` was not in the set.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":105280,"byte_end":105328,"line_start":495,"line_end":495,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":105333,"byte_end":105336,"line_start":496,"line_end":496,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time (average).","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":105341,"byte_end":105381,"line_start":497,"line_end":497,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":917},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":105922,"byte_end":105938,"line_start":512,"line_end":512,"column_start":12,"column_end":28},"name":"swap_remove_full","qualname":"<IndexSet<T, S>>::swap_remove_full","value":"pub fn swap_remove_full<Q: ?Sized>(&mut Self, &Q) -> Option<(usize, T)> where\nQ: Hash + Equivalent<T>","parent":null,"children":[],"decl_id":null,"docs":" Remove the value from the set return it and the index it had.","sig":null,"attributes":[{"value":"/ Remove the value from the set return it and the index it had.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":105570,"byte_end":105635,"line_start":505,"line_end":505,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":105640,"byte_end":105643,"line_start":506,"line_end":506,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::swap_remove`, the value is removed by swapping it with the","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":105648,"byte_end":105721,"line_start":507,"line_end":507,"column_start":5,"column_end":78}},{"value":"/ last element of the set and popping it off. **This perturbs","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":105726,"byte_end":105789,"line_start":508,"line_end":508,"column_start":5,"column_end":68}},{"value":"/ the position of what used to be the last element!**","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":105794,"byte_end":105849,"line_start":509,"line_end":509,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":105854,"byte_end":105857,"line_start":510,"line_end":510,"column_start":5,"column_end":8}},{"value":"/ Return `None` if `value` was not in the set.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":105862,"byte_end":105910,"line_start":511,"line_end":511,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":920},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":106466,"byte_end":106483,"line_start":526,"line_end":526,"column_start":12,"column_end":29},"name":"shift_remove_full","qualname":"<IndexSet<T, S>>::shift_remove_full","value":"pub fn shift_remove_full<Q: ?Sized>(&mut Self, &Q) -> Option<(usize, T)> where\nQ: Hash + Equivalent<T>","parent":null,"children":[],"decl_id":null,"docs":" Remove the value from the set return it and the index it had.","sig":null,"attributes":[{"value":"/ Remove the value from the set return it and the index it had.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":106120,"byte_end":106185,"line_start":519,"line_end":519,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":106190,"byte_end":106193,"line_start":520,"line_end":520,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::remove`, the value is removed by shifting all of the","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":106198,"byte_end":106265,"line_start":521,"line_end":521,"column_start":5,"column_end":72}},{"value":"/ elements that follow it, preserving their relative order.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":106270,"byte_end":106331,"line_start":522,"line_end":522,"column_start":5,"column_end":66}},{"value":"/ **This perturbs the index of all of those elements!**","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":106336,"byte_end":106393,"line_start":523,"line_end":523,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":106398,"byte_end":106401,"line_start":524,"line_end":524,"column_start":5,"column_end":8}},{"value":"/ Return `None` if `value` was not in the set.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":106406,"byte_end":106454,"line_start":525,"line_end":525,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":923},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":106756,"byte_end":106759,"line_start":536,"line_end":536,"column_start":12,"column_end":15},"name":"pop","qualname":"<IndexSet<T, S>>::pop","value":"pub fn pop(&mut Self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Remove the last value","sig":null,"attributes":[{"value":"/ Remove the last value","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":106666,"byte_end":106691,"line_start":533,"line_end":533,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":106696,"byte_end":106699,"line_start":534,"line_end":534,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":106704,"byte_end":106744,"line_start":535,"line_end":535,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":925},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":107104,"byte_end":107110,"line_start":547,"line_end":547,"column_start":12,"column_end":18},"name":"retain","qualname":"<IndexSet<T, S>>::retain","value":"pub fn retain<F>(&mut Self, F) where F: FnMut(&T) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Scan through each value in the set and keep those where the\n closure `keep` returns `true`.","sig":null,"attributes":[{"value":"/ Scan through each value in the set and keep those where the","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":106837,"byte_end":106900,"line_start":540,"line_end":540,"column_start":5,"column_end":68}},{"value":"/ closure `keep` returns `true`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":106905,"byte_end":106939,"line_start":541,"line_end":541,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":106944,"byte_end":106947,"line_start":542,"line_end":542,"column_start":5,"column_end":8}},{"value":"/ The elements are visited in order, and remaining elements keep their","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":106952,"byte_end":107024,"line_start":543,"line_end":543,"column_start":5,"column_end":77}},{"value":"/ order.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":107029,"byte_end":107039,"line_start":544,"line_end":544,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":107044,"byte_end":107047,"line_start":545,"line_end":545,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time (average).","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":107052,"byte_end":107092,"line_start":546,"line_end":546,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":928},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":107355,"byte_end":107359,"line_start":557,"line_end":557,"column_start":12,"column_end":16},"name":"sort","qualname":"<IndexSet<T, S>>::sort","value":"pub fn sort(&mut Self) where T: Ord","parent":null,"children":[],"decl_id":null,"docs":" Sort the set’s values by their default ordering.","sig":null,"attributes":[{"value":"/ Sort the set’s values by their default ordering.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":107246,"byte_end":107300,"line_start":554,"line_end":554,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":107305,"byte_end":107308,"line_start":555,"line_end":555,"column_start":5,"column_end":8}},{"value":"/ See `sort_by` for details.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":107313,"byte_end":107343,"line_start":556,"line_end":556,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":929},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":107620,"byte_end":107627,"line_start":567,"line_end":567,"column_start":12,"column_end":19},"name":"sort_by","qualname":"<IndexSet<T, S>>::sort_by","value":"pub fn sort_by<F>(&mut Self, F) where F: FnMut(&T, &T) -> Ordering","parent":null,"children":[],"decl_id":null,"docs":" Sort the set’s values in place using the comparison function `compare`.","sig":null,"attributes":[{"value":"/ Sort the set’s values in place using the comparison function `compare`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":107443,"byte_end":107520,"line_start":564,"line_end":564,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":107525,"byte_end":107528,"line_start":565,"line_end":565,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n log n)** time and **O(n)** space. The sort is stable.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":107533,"byte_end":107608,"line_start":566,"line_end":566,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":932},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":107930,"byte_end":107939,"line_start":578,"line_end":578,"column_start":12,"column_end":21},"name":"sorted_by","qualname":"<IndexSet<T, S>>::sorted_by","value":"pub fn sorted_by<F>(Self, F) -> IntoIter<T> where F: FnMut(&T, &T) -> Ordering","parent":null,"children":[],"decl_id":null,"docs":" Sort the values of the set and return a by value iterator of\n the values with the result.","sig":null,"attributes":[{"value":"/ Sort the values of the set and return a by value iterator of","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":107782,"byte_end":107846,"line_start":574,"line_end":574,"column_start":5,"column_end":69}},{"value":"/ the values with the result.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":107851,"byte_end":107882,"line_start":575,"line_end":575,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":107887,"byte_end":107890,"line_start":576,"line_end":576,"column_start":5,"column_end":8}},{"value":"/ The sort is stable.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":107895,"byte_end":107918,"line_start":577,"line_end":577,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":935},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":108274,"byte_end":108281,"line_start":590,"line_end":590,"column_start":12,"column_end":19},"name":"reverse","qualname":"<IndexSet<T, S>>::reverse","value":"pub fn reverse(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Reverses the order of the set’s values in place.","sig":null,"attributes":[{"value":"/ Reverses the order of the set’s values in place.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":108146,"byte_end":108200,"line_start":587,"line_end":587,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":108205,"byte_end":108208,"line_start":588,"line_end":588,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time and **O(1)** space.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":108213,"byte_end":108262,"line_start":589,"line_end":589,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":939},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":108502,"byte_end":108511,"line_start":601,"line_end":601,"column_start":12,"column_end":21},"name":"get_index","qualname":"<IndexSet<T, S>>::get_index","value":"pub fn get_index(&Self, usize) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":" Get a value by index","sig":null,"attributes":[{"value":"/ Get a value by index","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":108363,"byte_end":108387,"line_start":596,"line_end":596,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":108392,"byte_end":108395,"line_start":597,"line_end":597,"column_start":5,"column_end":8}},{"value":"/ Valid indices are *0 <= index < self.len()*","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":108400,"byte_end":108447,"line_start":598,"line_end":598,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":108452,"byte_end":108455,"line_start":599,"line_end":599,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":108460,"byte_end":108490,"line_start":600,"line_end":600,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":940},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":108696,"byte_end":108701,"line_start":608,"line_end":608,"column_start":12,"column_end":17},"name":"first","qualname":"<IndexSet<T, S>>::first","value":"pub fn first(&Self) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":" Get the first value","sig":null,"attributes":[{"value":"/ Get the first value","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":108618,"byte_end":108641,"line_start":605,"line_end":605,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":108646,"byte_end":108649,"line_start":606,"line_end":606,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":108654,"byte_end":108684,"line_start":607,"line_end":607,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":941},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":108868,"byte_end":108872,"line_start":615,"line_end":615,"column_start":12,"column_end":16},"name":"last","qualname":"<IndexSet<T, S>>::last","value":"pub fn last(&Self) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":" Get the last value","sig":null,"attributes":[{"value":"/ Get the last value","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":108791,"byte_end":108813,"line_start":612,"line_end":612,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":108818,"byte_end":108821,"line_start":613,"line_end":613,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":108826,"byte_end":108856,"line_start":614,"line_end":614,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":942},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":109329,"byte_end":109346,"line_start":628,"line_end":628,"column_start":12,"column_end":29},"name":"swap_remove_index","qualname":"<IndexSet<T, S>>::swap_remove_index","value":"pub fn swap_remove_index(&mut Self, usize) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Remove the value by index","sig":null,"attributes":[{"value":"/ Remove the value by index","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":108961,"byte_end":108990,"line_start":619,"line_end":619,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":108995,"byte_end":108998,"line_start":620,"line_end":620,"column_start":5,"column_end":8}},{"value":"/ Valid indices are *0 <= index < self.len()*","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":109003,"byte_end":109050,"line_start":621,"line_end":621,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":109055,"byte_end":109058,"line_start":622,"line_end":622,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::swap_remove`, the value is removed by swapping it with the","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":109063,"byte_end":109136,"line_start":623,"line_end":623,"column_start":5,"column_end":78}},{"value":"/ last element of the set and popping it off. **This perturbs","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":109141,"byte_end":109204,"line_start":624,"line_end":624,"column_start":5,"column_end":68}},{"value":"/ the position of what used to be the last element!**","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":109209,"byte_end":109264,"line_start":625,"line_end":625,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":109269,"byte_end":109272,"line_start":626,"line_end":626,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":109277,"byte_end":109317,"line_start":627,"line_end":627,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":944},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":109819,"byte_end":109837,"line_start":641,"line_end":641,"column_start":12,"column_end":30},"name":"shift_remove_index","qualname":"<IndexSet<T, S>>::shift_remove_index","value":"pub fn shift_remove_index(&mut Self, usize) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Remove the value by index","sig":null,"attributes":[{"value":"/ Remove the value by index","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":109457,"byte_end":109486,"line_start":632,"line_end":632,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":109491,"byte_end":109494,"line_start":633,"line_end":633,"column_start":5,"column_end":8}},{"value":"/ Valid indices are *0 <= index < self.len()*","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":109499,"byte_end":109546,"line_start":634,"line_end":634,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":109551,"byte_end":109554,"line_start":635,"line_end":635,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::remove`, the value is removed by shifting all of the","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":109559,"byte_end":109626,"line_start":636,"line_end":636,"column_start":5,"column_end":72}},{"value":"/ elements that follow it, preserving their relative order.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":109631,"byte_end":109692,"line_start":637,"line_end":637,"column_start":5,"column_end":66}},{"value":"/ **This perturbs the index of all of those elements!**","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":109697,"byte_end":109754,"line_start":638,"line_end":638,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":109759,"byte_end":109762,"line_start":639,"line_end":639,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time (average).","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":109767,"byte_end":109807,"line_start":640,"line_end":640,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":946},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":110071,"byte_end":110083,"line_start":648,"line_end":648,"column_start":12,"column_end":24},"name":"swap_indices","qualname":"<IndexSet<T, S>>::swap_indices","value":"pub fn swap_indices(&mut Self, usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Swaps the position of two values in the set.","sig":null,"attributes":[{"value":"/ Swaps the position of two values in the set.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":109949,"byte_end":109997,"line_start":645,"line_end":645,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":110002,"byte_end":110005,"line_start":646,"line_end":646,"column_start":5,"column_end":8}},{"value":"/ ***Panics*** if `a` or `b` are out of bounds.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":110010,"byte_end":110059,"line_start":647,"line_end":647,"column_start":5,"column_end":54}}]},{"kind":"Struct","id":{"krate":0,"index":952},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":111466,"byte_end":111474,"line_start":700,"line_end":700,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::set::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":954}],"decl_id":null,"docs":" An owning iterator over the items of a `IndexSet`.","sig":null,"attributes":[{"value":"/ An owning iterator over the items of a `IndexSet`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":111147,"byte_end":111201,"line_start":693,"line_end":693,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":111202,"byte_end":111205,"line_start":694,"line_end":694,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`into_iter`] method on [`IndexSet`]","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":111206,"byte_end":111278,"line_start":695,"line_end":695,"column_start":1,"column_end":73}},{"value":"/ (provided by the `IntoIterator` trait). See its documentation for more.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":111279,"byte_end":111354,"line_start":696,"line_end":696,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":111355,"byte_end":111358,"line_start":697,"line_end":697,"column_start":1,"column_end":4}},{"value":"/ [`IndexSet`]: struct.IndexSet.html","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":111359,"byte_end":111397,"line_start":698,"line_end":698,"column_start":1,"column_end":39}},{"value":"/ [`into_iter`]: struct.IndexSet.html#method.into_iter","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":111398,"byte_end":111454,"line_start":699,"line_end":699,"column_start":1,"column_end":57}}]},{"kind":"Struct","id":{"krate":0,"index":967},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":112367,"byte_end":112371,"line_start":736,"line_end":736,"column_start":12,"column_end":16},"name":"Iter","qualname":"::set::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":970}],"decl_id":null,"docs":" An iterator over the items of a `IndexSet`.","sig":null,"attributes":[{"value":"/ An iterator over the items of a `IndexSet`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":112109,"byte_end":112156,"line_start":729,"line_end":729,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":112157,"byte_end":112160,"line_start":730,"line_end":730,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`iter`] method on [`IndexSet`].","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":112161,"byte_end":112229,"line_start":731,"line_end":731,"column_start":1,"column_end":69}},{"value":"/ See its documentation for more.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":112230,"byte_end":112265,"line_start":732,"line_end":732,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":112266,"byte_end":112269,"line_start":733,"line_end":733,"column_start":1,"column_end":4}},{"value":"/ [`IndexSet`]: struct.IndexSet.html","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":112270,"byte_end":112308,"line_start":734,"line_end":734,"column_start":1,"column_end":39}},{"value":"/ [`iter`]: struct.IndexSet.html#method.iter","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":112309,"byte_end":112355,"line_start":735,"line_end":735,"column_start":1,"column_end":47}}]},{"kind":"Struct","id":{"krate":0,"index":987},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":113369,"byte_end":113374,"line_start":779,"line_end":779,"column_start":12,"column_end":17},"name":"Drain","qualname":"::set::Drain","value":"Drain {  }","parent":null,"children":[{"krate":0,"index":990}],"decl_id":null,"docs":" A draining iterator over the items of a `IndexSet`.","sig":null,"attributes":[{"value":"/ A draining iterator over the items of a `IndexSet`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":113100,"byte_end":113155,"line_start":772,"line_end":772,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":113156,"byte_end":113159,"line_start":773,"line_end":773,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`drain`] method on [`IndexSet`].","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":113160,"byte_end":113229,"line_start":774,"line_end":774,"column_start":1,"column_end":70}},{"value":"/ See its documentation for more.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":113230,"byte_end":113265,"line_start":775,"line_end":775,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":113266,"byte_end":113269,"line_start":776,"line_end":776,"column_start":1,"column_end":4}},{"value":"/ [`IndexSet`]: struct.IndexSet.html","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":113270,"byte_end":113308,"line_start":777,"line_end":777,"column_start":1,"column_end":39}},{"value":"/ [`drain`]: struct.IndexSet.html#method.drain","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":113309,"byte_end":113357,"line_start":778,"line_end":778,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1042},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":115572,"byte_end":115583,"line_start":884,"line_end":884,"column_start":12,"column_end":23},"name":"is_disjoint","qualname":"<IndexSet<T, S>>::is_disjoint","value":"pub fn is_disjoint<S2>(&Self, &IndexSet<T, S2>) -> bool where S2: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if `self` has no elements in common with `other`.\n","sig":null,"attributes":[{"value":"/ Returns `true` if `self` has no elements in common with `other`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":115492,"byte_end":115560,"line_start":883,"line_end":883,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":1046},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":115958,"byte_end":115967,"line_start":896,"line_end":896,"column_start":12,"column_end":21},"name":"is_subset","qualname":"<IndexSet<T, S>>::is_subset","value":"pub fn is_subset<S2>(&Self, &IndexSet<T, S2>) -> bool where S2: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if all elements of `self` are contained in `other`.\n","sig":null,"attributes":[{"value":"/ Returns `true` if all elements of `self` are contained in `other`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":115876,"byte_end":115946,"line_start":895,"line_end":895,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":1049},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":116235,"byte_end":116246,"line_start":904,"line_end":904,"column_start":12,"column_end":23},"name":"is_superset","qualname":"<IndexSet<T, S>>::is_superset","value":"pub fn is_superset<S2>(&Self, &IndexSet<T, S2>) -> bool where S2: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if all elements of `other` are contained in `self`.\n","sig":null,"attributes":[{"value":"/ Returns `true` if all elements of `other` are contained in `self`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":116153,"byte_end":116223,"line_start":903,"line_end":903,"column_start":5,"column_end":75}}]},{"kind":"Struct","id":{"krate":0,"index":1051},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":116672,"byte_end":116682,"line_start":919,"line_end":919,"column_start":12,"column_end":22},"name":"Difference","qualname":"::set::Difference","value":"Difference {  }","parent":null,"children":[{"krate":0,"index":1055},{"krate":0,"index":1056}],"decl_id":null,"docs":" A lazy iterator producing elements in the difference of `IndexSet`s.","sig":null,"attributes":[{"value":"/ A lazy iterator producing elements in the difference of `IndexSet`s.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":116371,"byte_end":116443,"line_start":912,"line_end":912,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":116444,"byte_end":116447,"line_start":913,"line_end":913,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`difference`] method on [`IndexSet`].","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":116448,"byte_end":116522,"line_start":914,"line_end":914,"column_start":1,"column_end":75}},{"value":"/ See its documentation for more.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":116523,"byte_end":116558,"line_start":915,"line_end":915,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":116559,"byte_end":116562,"line_start":916,"line_end":916,"column_start":1,"column_end":4}},{"value":"/ [`IndexSet`]: struct.IndexSet.html","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":116563,"byte_end":116601,"line_start":917,"line_end":917,"column_start":1,"column_end":39}},{"value":"/ [`difference`]: struct.IndexSet.html#method.difference","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":116602,"byte_end":116660,"line_start":918,"line_end":918,"column_start":1,"column_end":59}}]},{"kind":"Struct","id":{"krate":0,"index":1076},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":118235,"byte_end":118247,"line_start":986,"line_end":986,"column_start":12,"column_end":24},"name":"Intersection","qualname":"::set::Intersection","value":"Intersection {  }","parent":null,"children":[{"krate":0,"index":1080},{"krate":0,"index":1081}],"decl_id":null,"docs":" A lazy iterator producing elements in the intersection of `IndexSet`s.","sig":null,"attributes":[{"value":"/ A lazy iterator producing elements in the intersection of `IndexSet`s.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":117926,"byte_end":118000,"line_start":979,"line_end":979,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":118001,"byte_end":118004,"line_start":980,"line_end":980,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`intersection`] method on [`IndexSet`].","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":118005,"byte_end":118081,"line_start":981,"line_end":981,"column_start":1,"column_end":77}},{"value":"/ See its documentation for more.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":118082,"byte_end":118117,"line_start":982,"line_end":982,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":118118,"byte_end":118121,"line_start":983,"line_end":983,"column_start":1,"column_end":4}},{"value":"/ [`IndexSet`]: struct.IndexSet.html","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":118122,"byte_end":118160,"line_start":984,"line_end":984,"column_start":1,"column_end":39}},{"value":"/ [`intersection`]: struct.IndexSet.html#method.intersection","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":118161,"byte_end":118223,"line_start":985,"line_end":985,"column_start":1,"column_end":63}}]},{"kind":"Struct","id":{"krate":0,"index":1101},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":119840,"byte_end":119859,"line_start":1053,"line_end":1053,"column_start":12,"column_end":31},"name":"SymmetricDifference","qualname":"::set::SymmetricDifference","value":"SymmetricDifference {  }","parent":null,"children":[{"krate":0,"index":1106}],"decl_id":null,"docs":" A lazy iterator producing elements in the symmetric difference of `IndexSet`s.","sig":null,"attributes":[{"value":"/ A lazy iterator producing elements in the symmetric difference of `IndexSet`s.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":119499,"byte_end":119581,"line_start":1046,"line_end":1046,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":119582,"byte_end":119585,"line_start":1047,"line_end":1047,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`symmetric_difference`] method on","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":119586,"byte_end":119656,"line_start":1048,"line_end":1048,"column_start":1,"column_end":71}},{"value":"/ [`IndexSet`]. See its documentation for more.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":119657,"byte_end":119706,"line_start":1049,"line_end":1049,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":119707,"byte_end":119710,"line_start":1050,"line_end":1050,"column_start":1,"column_end":4}},{"value":"/ [`IndexSet`]: struct.IndexSet.html","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":119711,"byte_end":119749,"line_start":1051,"line_end":1051,"column_start":1,"column_end":39}},{"value":"/ [`symmetric_difference`]: struct.IndexSet.html#method.symmetric_difference","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":119750,"byte_end":119828,"line_start":1052,"line_end":1052,"column_start":1,"column_end":79}}]},{"kind":"Struct","id":{"krate":0,"index":1133},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":121377,"byte_end":121382,"line_start":1118,"line_end":1118,"column_start":12,"column_end":17},"name":"Union","qualname":"::set::Union","value":"Union {  }","parent":null,"children":[{"krate":0,"index":1137}],"decl_id":null,"docs":" A lazy iterator producing elements in the union of `IndexSet`s.","sig":null,"attributes":[{"value":"/ A lazy iterator producing elements in the union of `IndexSet`s.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":121096,"byte_end":121163,"line_start":1111,"line_end":1111,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":121164,"byte_end":121167,"line_start":1112,"line_end":1112,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`union`] method on [`IndexSet`].","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":121168,"byte_end":121237,"line_start":1113,"line_end":1113,"column_start":1,"column_end":70}},{"value":"/ See its documentation for more.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":121238,"byte_end":121273,"line_start":1114,"line_end":1114,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":121274,"byte_end":121277,"line_start":1115,"line_end":1115,"column_start":1,"column_end":4}},{"value":"/ [`IndexSet`]: struct.IndexSet.html","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":121278,"byte_end":121316,"line_start":1116,"line_end":1116,"column_start":1,"column_end":39}},{"value":"/ [`union`]: struct.IndexSet.html#method.union","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":121317,"byte_end":121365,"line_start":1117,"line_end":1117,"column_start":1,"column_end":49}}]},{"kind":"Type","id":{"krate":0,"index":1212},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":5206,"byte_end":5211,"line_start":185,"line_end":185,"column_start":10,"column_end":15},"name":"Entry","qualname":"::Entries::Entry","value":"type Entry;","parent":{"krate":0,"index":1211},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/equivalent.rs","byte_start":9263,"byte_end":9264,"line_start":18,"line_end":18,"column_start":46,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":27}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/mutable_keys.rs","byte_start":11092,"byte_end":11100,"line_start":51,"line_end":51,"column_start":31,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":56},{"krate":0,"index":57},{"krate":0,"index":58},{"krate":0,"index":60},{"krate":0,"index":62}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core/raw.rs","byte_start":84016,"byte_end":84028,"line_start":13,"line_end":13,"column_start":21,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":119}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core/raw.rs","byte_start":84328,"byte_end":84340,"line_start":21,"line_end":21,"column_start":12,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":124},{"krate":0,"index":125},{"krate":0,"index":126},{"krate":0,"index":129},{"krate":0,"index":131}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core/raw.rs","byte_start":87389,"byte_end":87402,"line_start":103,"line_end":103,"column_start":40,"column_end":53},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core/raw.rs","byte_start":87517,"byte_end":87530,"line_start":106,"line_end":106,"column_start":16,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":146},{"krate":0,"index":147},{"krate":0,"index":148},{"krate":0,"index":149},{"krate":0,"index":150},{"krate":0,"index":151},{"krate":0,"index":152},{"krate":0,"index":153}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":64005,"byte_end":64017,"line_start":58,"line_end":58,"column_start":22,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":220},{"krate":0,"index":221}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":64703,"byte_end":64715,"line_start":81,"line_end":81,"column_start":27,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":225}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":65034,"byte_end":65046,"line_start":94,"line_end":94,"column_start":24,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":229},{"krate":0,"index":230},{"krate":0,"index":231},{"krate":0,"index":232},{"krate":0,"index":233}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Inherent","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":65549,"byte_end":65561,"line_start":121,"line_end":121,"column_start":12,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":238},{"krate":0,"index":239},{"krate":0,"index":240},{"krate":0,"index":241},{"krate":0,"index":242},{"krate":0,"index":243},{"krate":0,"index":244},{"krate":0,"index":246},{"krate":0,"index":247},{"krate":0,"index":248},{"krate":0,"index":249},{"krate":0,"index":250},{"krate":0,"index":251},{"krate":0,"index":252},{"krate":0,"index":254},{"krate":0,"index":255},{"krate":0,"index":257},{"krate":0,"index":258},{"krate":0,"index":259},{"krate":0,"index":261},{"krate":0,"index":262},{"krate":0,"index":263},{"krate":0,"index":264},{"krate":0,"index":266},{"krate":0,"index":267}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":76968,"byte_end":76973,"line_start":447,"line_end":447,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":282},{"krate":0,"index":283},{"krate":0,"index":285},{"krate":0,"index":287},{"krate":0,"index":288},{"krate":0,"index":289},{"krate":0,"index":291}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":80030,"byte_end":80035,"line_start":537,"line_end":537,"column_start":51,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":295}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":80439,"byte_end":80452,"line_start":549,"line_end":549,"column_start":12,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":302},{"krate":0,"index":303},{"krate":0,"index":304},{"krate":0,"index":305},{"krate":0,"index":306}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":82013,"byte_end":82026,"line_start":592,"line_end":592,"column_start":51,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":310}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":82505,"byte_end":82516,"line_start":611,"line_end":611,"column_start":16,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":322},{"krate":0,"index":323},{"krate":0,"index":324},{"krate":0,"index":325}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":83219,"byte_end":83230,"line_start":635,"line_end":635,"column_start":39,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":329}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":15089,"byte_end":15097,"line_start":81,"line_end":81,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":418},{"krate":0,"index":419}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":15495,"byte_end":15503,"line_start":100,"line_end":100,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":424},{"krate":0,"index":425},{"krate":0,"index":426},{"krate":0,"index":427},{"krate":0,"index":428}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":16027,"byte_end":16035,"line_start":126,"line_end":126,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":434}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Inherent","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":16497,"byte_end":16505,"line_start":144,"line_end":144,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":438},{"krate":0,"index":439}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Inherent","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":16931,"byte_end":16939,"line_start":161,"line_end":161,"column_start":15,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":444},{"krate":0,"index":445},{"krate":0,"index":446},{"krate":0,"index":447},{"krate":0,"index":448},{"krate":0,"index":449},{"krate":0,"index":450},{"krate":0,"index":451},{"krate":0,"index":452},{"krate":0,"index":453},{"krate":0,"index":454},{"krate":0,"index":455},{"krate":0,"index":456},{"krate":0,"index":457},{"krate":0,"index":459}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Inherent","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":21129,"byte_end":21137,"line_start":302,"line_end":302,"column_start":15,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":464},{"krate":0,"index":465},{"krate":0,"index":466},{"krate":0,"index":468},{"krate":0,"index":469},{"krate":0,"index":470},{"krate":0,"index":471},{"krate":0,"index":473},{"krate":0,"index":475},{"krate":0,"index":477},{"krate":0,"index":479},{"krate":0,"index":481},{"krate":0,"index":483},{"krate":0,"index":485},{"krate":0,"index":487},{"krate":0,"index":489},{"krate":0,"index":491},{"krate":0,"index":493},{"krate":0,"index":495},{"krate":0,"index":497},{"krate":0,"index":499},{"krate":0,"index":501},{"krate":0,"index":503},{"krate":0,"index":504},{"krate":0,"index":507},{"krate":0,"index":509},{"krate":0,"index":512},{"krate":0,"index":516},{"krate":0,"index":519}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Inherent","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":33804,"byte_end":33812,"line_start":701,"line_end":701,"column_start":15,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":524},{"krate":0,"index":525},{"krate":0,"index":526},{"krate":0,"index":527},{"krate":0,"index":528},{"krate":0,"index":529},{"krate":0,"index":530},{"krate":0,"index":531},{"krate":0,"index":532}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":36794,"byte_end":36798,"line_start":793,"line_end":793,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":542},{"krate":0,"index":1218},{"krate":0,"index":1219},{"krate":0,"index":1220},{"krate":0,"index":1221},{"krate":0,"index":1222},{"krate":0,"index":1223}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":36913,"byte_end":36917,"line_start":799,"line_end":799,"column_start":36,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":546}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":37075,"byte_end":37079,"line_start":805,"line_end":805,"column_start":34,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":550}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":37230,"byte_end":37234,"line_start":812,"line_end":812,"column_start":22,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":554}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":37386,"byte_end":37390,"line_start":820,"line_end":820,"column_start":39,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":558}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":37883,"byte_end":37889,"line_start":837,"line_end":837,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":568},{"krate":0,"index":1225},{"krate":0,"index":1226},{"krate":0,"index":1227},{"krate":0,"index":1228},{"krate":0,"index":1229},{"krate":0,"index":1230}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":38006,"byte_end":38012,"line_start":843,"line_end":843,"column_start":36,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":572}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":38172,"byte_end":38178,"line_start":849,"line_end":849,"column_start":34,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":576}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":38329,"byte_end":38335,"line_start":856,"line_end":856,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":580}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":38489,"byte_end":38495,"line_start":864,"line_end":864,"column_start":39,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":584}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":39013,"byte_end":39022,"line_start":881,"line_end":881,"column_start":29,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":594},{"krate":0,"index":1232},{"krate":0,"index":1233},{"krate":0,"index":1234},{"krate":0,"index":1235},{"krate":0,"index":1236},{"krate":0,"index":1237}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":39143,"byte_end":39152,"line_start":887,"line_end":887,"column_start":36,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":598}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":39312,"byte_end":39321,"line_start":893,"line_end":893,"column_start":34,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":602}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":39743,"byte_end":39747,"line_start":910,"line_end":910,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":612},{"krate":0,"index":1239},{"krate":0,"index":1240},{"krate":0,"index":1241},{"krate":0,"index":1242},{"krate":0,"index":1243},{"krate":0,"index":1244}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":39868,"byte_end":39872,"line_start":916,"line_end":916,"column_start":36,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":616}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":40027,"byte_end":40031,"line_start":922,"line_end":922,"column_start":34,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":620}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":40182,"byte_end":40186,"line_start":929,"line_end":929,"column_start":22,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":624}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":40350,"byte_end":40354,"line_start":937,"line_end":937,"column_start":51,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":628}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":40865,"byte_end":40872,"line_start":954,"line_end":954,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":638},{"krate":0,"index":1246},{"krate":0,"index":1247},{"krate":0,"index":1248},{"krate":0,"index":1249},{"krate":0,"index":1250},{"krate":0,"index":1251}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":41000,"byte_end":41007,"line_start":960,"line_end":960,"column_start":36,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":642}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":41165,"byte_end":41172,"line_start":966,"line_end":966,"column_start":34,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":646}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":41662,"byte_end":41670,"line_start":983,"line_end":983,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":654},{"krate":0,"index":1253},{"krate":0,"index":1254},{"krate":0,"index":1255},{"krate":0,"index":1256},{"krate":0,"index":1257},{"krate":0,"index":1258}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":41784,"byte_end":41792,"line_start":989,"line_end":989,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":658}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":41948,"byte_end":41956,"line_start":995,"line_end":995,"column_start":34,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":662}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":42077,"byte_end":42085,"line_start":1001,"line_end":1001,"column_start":51,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":666}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":42645,"byte_end":42650,"line_start":1019,"line_end":1019,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":675},{"krate":0,"index":1260},{"krate":0,"index":1261},{"krate":0,"index":1262},{"krate":0,"index":1263},{"krate":0,"index":1264},{"krate":0,"index":1265}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":42768,"byte_end":42773,"line_start":1025,"line_end":1025,"column_start":36,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1267}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":43288,"byte_end":43296,"line_start":1045,"line_end":1045,"column_start":32,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":699},{"krate":0,"index":700},{"krate":0,"index":701}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":44080,"byte_end":44088,"line_start":1077,"line_end":1077,"column_start":40,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":707},{"krate":0,"index":708}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":45256,"byte_end":45264,"line_start":1122,"line_end":1122,"column_start":43,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":714}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":46341,"byte_end":46349,"line_start":1164,"line_end":1164,"column_start":32,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":719},{"krate":0,"index":720}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":47443,"byte_end":47451,"line_start":1206,"line_end":1206,"column_start":35,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":725}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":47799,"byte_end":47807,"line_start":1217,"line_end":1217,"column_start":40,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":730}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":48391,"byte_end":48399,"line_start":1236,"line_end":1236,"column_start":34,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":736}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":49698,"byte_end":49706,"line_start":1269,"line_end":1269,"column_start":46,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":744}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":50102,"byte_end":50110,"line_start":1283,"line_end":1283,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":751}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":50330,"byte_end":50338,"line_start":1293,"line_end":1293,"column_start":60,"column_end":68},"value":"","parent":null,"children":[{"krate":0,"index":758}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":50703,"byte_end":50711,"line_start":1310,"line_end":1310,"column_start":22,"column_end":30},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":92690,"byte_end":92698,"line_start":71,"line_end":71,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":837},{"krate":0,"index":838}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":92960,"byte_end":92968,"line_start":87,"line_end":87,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":842},{"krate":0,"index":843},{"krate":0,"index":844},{"krate":0,"index":845},{"krate":0,"index":846}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":93479,"byte_end":93487,"line_start":113,"line_end":113,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":851}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Inherent","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":93884,"byte_end":93892,"line_start":128,"line_end":128,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":854},{"krate":0,"index":855}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Inherent","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":94325,"byte_end":94333,"line_start":147,"line_end":147,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":859},{"krate":0,"index":860},{"krate":0,"index":861},{"krate":0,"index":862},{"krate":0,"index":863},{"krate":0,"index":864},{"krate":0,"index":865},{"krate":0,"index":866},{"krate":0,"index":867},{"krate":0,"index":868},{"krate":0,"index":870}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Inherent","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":97369,"byte_end":97377,"line_start":249,"line_end":249,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":874},{"krate":0,"index":875},{"krate":0,"index":876},{"krate":0,"index":877},{"krate":0,"index":879},{"krate":0,"index":882},{"krate":0,"index":885},{"krate":0,"index":888},{"krate":0,"index":891},{"krate":0,"index":893},{"krate":0,"index":896},{"krate":0,"index":899},{"krate":0,"index":901},{"krate":0,"index":903},{"krate":0,"index":905},{"krate":0,"index":907},{"krate":0,"index":909},{"krate":0,"index":911},{"krate":0,"index":914},{"krate":0,"index":917},{"krate":0,"index":920},{"krate":0,"index":923},{"krate":0,"index":925},{"krate":0,"index":928},{"krate":0,"index":929},{"krate":0,"index":932},{"krate":0,"index":935}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Inherent","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":108342,"byte_end":108350,"line_start":595,"line_end":595,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":939},{"krate":0,"index":940},{"krate":0,"index":941},{"krate":0,"index":942},{"krate":0,"index":944},{"krate":0,"index":946}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":110850,"byte_end":110858,"line_start":681,"line_end":681,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":950},{"krate":0,"index":951}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":111540,"byte_end":111548,"line_start":704,"line_end":704,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":957},{"krate":0,"index":1268},{"krate":0,"index":1269},{"krate":0,"index":1270},{"krate":0,"index":1271},{"krate":0,"index":1272},{"krate":0,"index":1273}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":111645,"byte_end":111653,"line_start":710,"line_end":710,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":960}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":111797,"byte_end":111805,"line_start":716,"line_end":716,"column_start":31,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":963}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":111908,"byte_end":111916,"line_start":722,"line_end":722,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":966}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":112447,"byte_end":112451,"line_start":740,"line_end":740,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":974},{"krate":0,"index":1275},{"krate":0,"index":1276},{"krate":0,"index":1277},{"krate":0,"index":1278},{"krate":0,"index":1279},{"krate":0,"index":1280}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":112560,"byte_end":112564,"line_start":746,"line_end":746,"column_start":33,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":977}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":112716,"byte_end":112720,"line_start":752,"line_end":752,"column_start":31,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":980}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":112810,"byte_end":112814,"line_start":758,"line_end":758,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":983}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":112960,"byte_end":112964,"line_start":766,"line_end":766,"column_start":36,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":986}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":113445,"byte_end":113450,"line_start":783,"line_end":783,"column_start":22,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":993},{"krate":0,"index":1282},{"krate":0,"index":1283},{"krate":0,"index":1284},{"krate":0,"index":1285},{"krate":0,"index":1286},{"krate":0,"index":1287}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":113551,"byte_end":113556,"line_start":789,"line_end":789,"column_start":33,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1289}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":113828,"byte_end":113836,"line_start":802,"line_end":802,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1006},{"krate":0,"index":1007},{"krate":0,"index":1008}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":114055,"byte_end":114063,"line_start":813,"line_end":813,"column_start":32,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1012}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":114358,"byte_end":114366,"line_start":826,"line_end":826,"column_start":26,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1018}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":114617,"byte_end":114625,"line_start":837,"line_end":837,"column_start":34,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1025}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":114906,"byte_end":114914,"line_start":848,"line_end":848,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1030}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":115130,"byte_end":115138,"line_start":860,"line_end":860,"column_start":48,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1035}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":115352,"byte_end":115360,"line_start":871,"line_end":871,"column_start":19,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Inherent","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":115427,"byte_end":115435,"line_start":878,"line_end":878,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1042},{"krate":0,"index":1046},{"krate":0,"index":1049}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":116780,"byte_end":116790,"line_start":924,"line_end":924,"column_start":29,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1061},{"krate":0,"index":1062},{"krate":0,"index":1063}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":117224,"byte_end":117234,"line_start":945,"line_end":945,"column_start":36,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1067}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":117544,"byte_end":117554,"line_start":960,"line_end":960,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1071}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":117720,"byte_end":117730,"line_start":969,"line_end":969,"column_start":27,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1075}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":118345,"byte_end":118357,"line_start":991,"line_end":991,"column_start":29,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1086},{"krate":0,"index":1087},{"krate":0,"index":1088}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":118790,"byte_end":118802,"line_start":1012,"line_end":1012,"column_start":36,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1092}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":119111,"byte_end":119123,"line_start":1027,"line_end":1027,"column_start":22,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1096}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":119291,"byte_end":119303,"line_start":1036,"line_end":1036,"column_start":27,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1100}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":119976,"byte_end":119995,"line_start":1057,"line_end":1057,"column_start":34,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":1112},{"krate":0,"index":1113},{"krate":0,"index":1114},{"krate":0,"index":1115}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":120450,"byte_end":120469,"line_start":1081,"line_end":1081,"column_start":41,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":1122}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":120670,"byte_end":120689,"line_start":1092,"line_end":1092,"column_start":27,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1127}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":120854,"byte_end":120873,"line_start":1100,"line_end":1100,"column_start":32,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":1132}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":121478,"byte_end":121483,"line_start":1122,"line_end":1122,"column_start":29,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1142},{"krate":0,"index":1143},{"krate":0,"index":1144},{"krate":0,"index":1145}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":121906,"byte_end":121911,"line_start":1145,"line_end":1145,"column_start":36,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1151}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":122080,"byte_end":122085,"line_start":1155,"line_end":1155,"column_start":22,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1155}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":122226,"byte_end":122231,"line_start":1163,"line_end":1163,"column_start":27,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1159}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Inherent","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":3933,"byte_end":3942,"line_start":122,"line_end":122,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1194}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":4140,"byte_end":4146,"line_start":136,"line_end":136,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1198},{"krate":0,"index":1199}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Inherent","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":4539,"byte_end":4545,"line_start":156,"line_end":156,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1203},{"krate":0,"index":1204},{"krate":0,"index":1205},{"krate":0,"index":1206},{"krate":0,"index":1207},{"krate":0,"index":1208},{"krate":0,"index":1209},{"krate":0,"index":1210}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":3450,"byte_end":3453,"line_start":103,"line_end":103,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":85}},{"kind":"Mod","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":3463,"byte_end":3466,"line_start":104,"line_end":104,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":765}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/equivalent.rs","byte_start":9263,"byte_end":9264,"line_start":18,"line_end":18,"column_start":46,"column_end":47},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":25},"to":{"krate":0,"index":21}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/mutable_keys.rs","byte_start":11092,"byte_end":11100,"line_start":51,"line_end":51,"column_start":31,"column_end":39},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":408},"to":{"krate":0,"index":44}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core/raw.rs","byte_start":84016,"byte_end":84028,"line_start":13,"line_end":13,"column_start":21,"column_end":33},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":114},"to":{"krate":1,"index":8829}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core/raw.rs","byte_start":84328,"byte_end":84340,"line_start":21,"line_end":21,"column_start":12,"column_end":24},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":196},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core/raw.rs","byte_start":87389,"byte_end":87402,"line_start":103,"line_end":103,"column_start":40,"column_end":53},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":132},"to":{"krate":1,"index":2837}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core/raw.rs","byte_start":87517,"byte_end":87530,"line_start":106,"line_end":106,"column_start":16,"column_end":29},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":132},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":64005,"byte_end":64017,"line_start":58,"line_end":58,"column_start":22,"column_end":34},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":196},"to":{"krate":1,"index":2450}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":64703,"byte_end":64715,"line_start":81,"line_end":81,"column_start":27,"column_end":39},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":196},"to":{"krate":1,"index":8829}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":65034,"byte_end":65046,"line_start":94,"line_end":94,"column_start":24,"column_end":36},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":196},"to":{"krate":0,"index":1211}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":65549,"byte_end":65561,"line_start":121,"line_end":121,"column_start":12,"column_end":24},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":196},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":76968,"byte_end":76973,"line_start":447,"line_end":447,"column_start":16,"column_end":21},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":268},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":80030,"byte_end":80035,"line_start":537,"line_end":537,"column_start":51,"column_end":56},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":268},"to":{"krate":1,"index":8829}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":80439,"byte_end":80452,"line_start":549,"line_end":549,"column_start":12,"column_end":25},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":132},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":82013,"byte_end":82026,"line_start":592,"line_end":592,"column_start":51,"column_end":64},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":132},"to":{"krate":1,"index":8829}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":82505,"byte_end":82516,"line_start":611,"line_end":611,"column_start":16,"column_end":27},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":311},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":83219,"byte_end":83230,"line_start":635,"line_end":635,"column_start":39,"column_end":50},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":311},"to":{"krate":1,"index":8829}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":15089,"byte_end":15097,"line_start":81,"line_end":81,"column_start":25,"column_end":33},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":408},"to":{"krate":1,"index":2450}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":15495,"byte_end":15503,"line_start":100,"line_end":100,"column_start":27,"column_end":35},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":408},"to":{"krate":0,"index":1211}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":16027,"byte_end":16035,"line_start":126,"line_end":126,"column_start":30,"column_end":38},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":408},"to":{"krate":1,"index":8829}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":16497,"byte_end":16505,"line_start":144,"line_end":144,"column_start":12,"column_end":20},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":408},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":16931,"byte_end":16939,"line_start":161,"line_end":161,"column_start":15,"column_end":23},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":408},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":21129,"byte_end":21137,"line_start":302,"line_end":302,"column_start":15,"column_end":23},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":408},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":33804,"byte_end":33812,"line_start":701,"line_end":701,"column_start":15,"column_end":23},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":408},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":36794,"byte_end":36798,"line_start":793,"line_end":793,"column_start":29,"column_end":33},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":533},"to":{"krate":1,"index":7249}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":36913,"byte_end":36917,"line_start":799,"line_end":799,"column_start":36,"column_end":40},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":533},"to":{"krate":1,"index":7113}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":37075,"byte_end":37079,"line_start":805,"line_end":805,"column_start":34,"column_end":38},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":533},"to":{"krate":1,"index":7138}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":37230,"byte_end":37234,"line_start":812,"line_end":812,"column_start":22,"column_end":26},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":533},"to":{"krate":1,"index":2450}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":37386,"byte_end":37390,"line_start":820,"line_end":820,"column_start":39,"column_end":43},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":533},"to":{"krate":1,"index":8829}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":37883,"byte_end":37889,"line_start":837,"line_end":837,"column_start":29,"column_end":35},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":559},"to":{"krate":1,"index":7249}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":38006,"byte_end":38012,"line_start":843,"line_end":843,"column_start":36,"column_end":42},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":559},"to":{"krate":1,"index":7113}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":38172,"byte_end":38178,"line_start":849,"line_end":849,"column_start":34,"column_end":40},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":559},"to":{"krate":1,"index":7138}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":38329,"byte_end":38335,"line_start":856,"line_end":856,"column_start":22,"column_end":28},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":559},"to":{"krate":1,"index":2450}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":38489,"byte_end":38495,"line_start":864,"line_end":864,"column_start":39,"column_end":45},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":559},"to":{"krate":1,"index":8829}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":39013,"byte_end":39022,"line_start":881,"line_end":881,"column_start":29,"column_end":38},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":585},"to":{"krate":1,"index":7249}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":39143,"byte_end":39152,"line_start":887,"line_end":887,"column_start":36,"column_end":45},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":585},"to":{"krate":1,"index":7113}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":39312,"byte_end":39321,"line_start":893,"line_end":893,"column_start":34,"column_end":43},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":585},"to":{"krate":1,"index":7138}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":39743,"byte_end":39747,"line_start":910,"line_end":910,"column_start":29,"column_end":33},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":603},"to":{"krate":1,"index":7249}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":39868,"byte_end":39872,"line_start":916,"line_end":916,"column_start":36,"column_end":40},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":603},"to":{"krate":1,"index":7113}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":40027,"byte_end":40031,"line_start":922,"line_end":922,"column_start":34,"column_end":38},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":603},"to":{"krate":1,"index":7138}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":40182,"byte_end":40186,"line_start":929,"line_end":929,"column_start":22,"column_end":26},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":603},"to":{"krate":1,"index":2450}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":40350,"byte_end":40354,"line_start":937,"line_end":937,"column_start":51,"column_end":55},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":603},"to":{"krate":1,"index":8829}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":40865,"byte_end":40872,"line_start":954,"line_end":954,"column_start":29,"column_end":36},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":629},"to":{"krate":1,"index":7249}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":41000,"byte_end":41007,"line_start":960,"line_end":960,"column_start":36,"column_end":43},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":629},"to":{"krate":1,"index":7113}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":41165,"byte_end":41172,"line_start":966,"line_end":966,"column_start":34,"column_end":41},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":629},"to":{"krate":1,"index":7138}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":41662,"byte_end":41670,"line_start":983,"line_end":983,"column_start":25,"column_end":33},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":647},"to":{"krate":1,"index":7249}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":41784,"byte_end":41792,"line_start":989,"line_end":989,"column_start":36,"column_end":44},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":647},"to":{"krate":1,"index":7113}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":41948,"byte_end":41956,"line_start":995,"line_end":995,"column_start":34,"column_end":42},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":647},"to":{"krate":1,"index":7138}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":42077,"byte_end":42085,"line_start":1001,"line_end":1001,"column_start":51,"column_end":59},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":647},"to":{"krate":1,"index":8829}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":42645,"byte_end":42650,"line_start":1019,"line_end":1019,"column_start":25,"column_end":30},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":667},"to":{"krate":1,"index":7249}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":42768,"byte_end":42773,"line_start":1025,"line_end":1025,"column_start":36,"column_end":41},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":667},"to":{"krate":1,"index":7113}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":43288,"byte_end":43296,"line_start":1045,"line_end":1045,"column_start":32,"column_end":40},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":408},"to":{"krate":1,"index":7086}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":44080,"byte_end":44088,"line_start":1077,"line_end":1077,"column_start":40,"column_end":48},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":408},"to":{"krate":1,"index":3132}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":45256,"byte_end":45264,"line_start":1122,"line_end":1122,"column_start":43,"column_end":51},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":408},"to":{"krate":1,"index":3136}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":46341,"byte_end":46349,"line_start":1164,"line_end":1164,"column_start":32,"column_end":40},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":408},"to":{"krate":1,"index":3132}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":47443,"byte_end":47451,"line_start":1206,"line_end":1206,"column_start":35,"column_end":43},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":408},"to":{"krate":1,"index":3136}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":47799,"byte_end":47807,"line_start":1217,"line_end":1217,"column_start":40,"column_end":48},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":408},"to":{"krate":1,"index":7082}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":48391,"byte_end":48399,"line_start":1236,"line_end":1236,"column_start":34,"column_end":42},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":408},"to":{"krate":1,"index":7095}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":49698,"byte_end":49706,"line_start":1269,"line_end":1269,"column_start":46,"column_end":54},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":408},"to":{"krate":1,"index":7095}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":50102,"byte_end":50110,"line_start":1283,"line_end":1283,"column_start":27,"column_end":35},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":408},"to":{"krate":1,"index":2803}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":50330,"byte_end":50338,"line_start":1293,"line_end":1293,"column_start":60,"column_end":68},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":408},"to":{"krate":1,"index":2480}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":50703,"byte_end":50711,"line_start":1310,"line_end":1310,"column_start":22,"column_end":30},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":408},"to":{"krate":1,"index":2485}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":92690,"byte_end":92698,"line_start":71,"line_end":71,"column_start":22,"column_end":30},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":830},"to":{"krate":1,"index":2450}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":92960,"byte_end":92968,"line_start":87,"line_end":87,"column_start":24,"column_end":32},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":830},"to":{"krate":0,"index":1211}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":93479,"byte_end":93487,"line_start":113,"line_end":113,"column_start":27,"column_end":35},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":830},"to":{"krate":1,"index":8829}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":93884,"byte_end":93892,"line_start":128,"line_end":128,"column_start":9,"column_end":17},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":830},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":94325,"byte_end":94333,"line_start":147,"line_end":147,"column_start":12,"column_end":20},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":830},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":97369,"byte_end":97377,"line_start":249,"line_end":249,"column_start":12,"column_end":20},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":830},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":108342,"byte_end":108350,"line_start":595,"line_end":595,"column_start":12,"column_end":20},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":830},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":110850,"byte_end":110858,"line_start":681,"line_end":681,"column_start":29,"column_end":37},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":830},"to":{"krate":1,"index":3132}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":111540,"byte_end":111548,"line_start":704,"line_end":704,"column_start":22,"column_end":30},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":952},"to":{"krate":1,"index":7249}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":111645,"byte_end":111653,"line_start":710,"line_end":710,"column_start":33,"column_end":41},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":952},"to":{"krate":1,"index":7113}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":111797,"byte_end":111805,"line_start":716,"line_end":716,"column_start":31,"column_end":39},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":952},"to":{"krate":1,"index":7138}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":111908,"byte_end":111916,"line_start":722,"line_end":722,"column_start":36,"column_end":44},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":952},"to":{"krate":1,"index":8829}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":112447,"byte_end":112451,"line_start":740,"line_end":740,"column_start":26,"column_end":30},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":967},"to":{"krate":1,"index":7249}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":112560,"byte_end":112564,"line_start":746,"line_end":746,"column_start":33,"column_end":37},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":967},"to":{"krate":1,"index":7113}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":112716,"byte_end":112720,"line_start":752,"line_end":752,"column_start":31,"column_end":35},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":967},"to":{"krate":1,"index":7138}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":112810,"byte_end":112814,"line_start":758,"line_end":758,"column_start":19,"column_end":23},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":967},"to":{"krate":1,"index":2450}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":112960,"byte_end":112964,"line_start":766,"line_end":766,"column_start":36,"column_end":40},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":967},"to":{"krate":1,"index":8829}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":113445,"byte_end":113450,"line_start":783,"line_end":783,"column_start":22,"column_end":27},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":987},"to":{"krate":1,"index":7249}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":113551,"byte_end":113556,"line_start":789,"line_end":789,"column_start":33,"column_end":38},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":987},"to":{"krate":1,"index":7113}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":113828,"byte_end":113836,"line_start":802,"line_end":802,"column_start":29,"column_end":37},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":830},"to":{"krate":1,"index":7086}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":114055,"byte_end":114063,"line_start":813,"line_end":813,"column_start":32,"column_end":40},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":830},"to":{"krate":1,"index":7082}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":114358,"byte_end":114366,"line_start":826,"line_end":826,"column_start":26,"column_end":34},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":830},"to":{"krate":1,"index":7095}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":114617,"byte_end":114625,"line_start":837,"line_end":837,"column_start":34,"column_end":42},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":830},"to":{"krate":1,"index":7095}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":114906,"byte_end":114914,"line_start":848,"line_end":848,"column_start":24,"column_end":32},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":830},"to":{"krate":1,"index":2803}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":115130,"byte_end":115138,"line_start":860,"line_end":860,"column_start":48,"column_end":56},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":830},"to":{"krate":1,"index":2480}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":115352,"byte_end":115360,"line_start":871,"line_end":871,"column_start":19,"column_end":27},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":830},"to":{"krate":1,"index":2485}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":115427,"byte_end":115435,"line_start":878,"line_end":878,"column_start":12,"column_end":20},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":830},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":116780,"byte_end":116790,"line_start":924,"line_end":924,"column_start":29,"column_end":39},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":1051},"to":{"krate":1,"index":7249}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":117224,"byte_end":117234,"line_start":945,"line_end":945,"column_start":36,"column_end":46},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":1051},"to":{"krate":1,"index":7113}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":117544,"byte_end":117554,"line_start":960,"line_end":960,"column_start":22,"column_end":32},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":1051},"to":{"krate":1,"index":2450}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":117720,"byte_end":117730,"line_start":969,"line_end":969,"column_start":27,"column_end":37},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":1051},"to":{"krate":1,"index":8829}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":118345,"byte_end":118357,"line_start":991,"line_end":991,"column_start":29,"column_end":41},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":1076},"to":{"krate":1,"index":7249}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":118790,"byte_end":118802,"line_start":1012,"line_end":1012,"column_start":36,"column_end":48},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":1076},"to":{"krate":1,"index":7113}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":119111,"byte_end":119123,"line_start":1027,"line_end":1027,"column_start":22,"column_end":34},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":1076},"to":{"krate":1,"index":2450}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":119291,"byte_end":119303,"line_start":1036,"line_end":1036,"column_start":27,"column_end":39},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":1076},"to":{"krate":1,"index":8829}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":119976,"byte_end":119995,"line_start":1057,"line_end":1057,"column_start":34,"column_end":53},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":1101},"to":{"krate":1,"index":7249}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":120450,"byte_end":120469,"line_start":1081,"line_end":1081,"column_start":41,"column_end":60},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":1101},"to":{"krate":1,"index":7113}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":120670,"byte_end":120689,"line_start":1092,"line_end":1092,"column_start":27,"column_end":46},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":1101},"to":{"krate":1,"index":2450}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":120854,"byte_end":120873,"line_start":1100,"line_end":1100,"column_start":32,"column_end":51},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":1101},"to":{"krate":1,"index":8829}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":121478,"byte_end":121483,"line_start":1122,"line_end":1122,"column_start":29,"column_end":34},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":1133},"to":{"krate":1,"index":7249}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":121906,"byte_end":121911,"line_start":1145,"line_end":1145,"column_start":36,"column_end":41},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":1133},"to":{"krate":1,"index":7113}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":122080,"byte_end":122085,"line_start":1155,"line_end":1155,"column_start":22,"column_end":27},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":1133},"to":{"krate":1,"index":2450}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":122226,"byte_end":122231,"line_start":1163,"line_end":1163,"column_start":27,"column_end":32},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":1133},"to":{"krate":1,"index":8829}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":3933,"byte_end":3942,"line_start":122,"line_end":122,"column_start":6,"column_end":15},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":1290},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":4140,"byte_end":4146,"line_start":136,"line_end":136,"column_start":22,"column_end":28},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":1302},"to":{"krate":1,"index":2450}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":4539,"byte_end":4545,"line_start":156,"line_end":156,"column_start":12,"column_end":18},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":1302},"to":{"krate":4294967295,"index":4294967295}}]}