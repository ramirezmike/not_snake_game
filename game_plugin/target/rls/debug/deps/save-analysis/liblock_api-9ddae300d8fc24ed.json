{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2","program":"/home/mramirez/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","lock_api","--edition=2018","/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=9ddae300d8fc24ed","-C","extra-filename=-9ddae300d8fc24ed","--out-dir","/home/mramirez/code/projects/games/bug_game/target/rls/debug/deps","-L","dependency=/home/mramirez/code/projects/games/bug_game/target/rls/debug/deps","--extern","scopeguard=/home/mramirez/code/projects/games/bug_game/target/rls/debug/deps/libscopeguard-a1c38818ebcc71f9.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/mramirez/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu"],"output":"/home/mramirez/code/projects/games/bug_game/target/rls/debug/deps/liblock_api-9ddae300d8fc24ed.rmeta"},"prelude":{"crate_id":{"name":"lock_api","disambiguator":[6843516370768696030,17695751663174820022]},"crate_root":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src","external_crates":[{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[17044353007700780372,2918200604221815240]}},{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[15333840167806743833,9889193056877993824]}},{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[4550415707075219492,6623162258675921486]}},{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/lib.rs","num":4,"id":{"name":"scopeguard","disambiguator":[12809663318761188287,17456442378003341401]}}],"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/lib.rs","byte_start":333,"byte_end":4077,"line_start":8,"line_end":111,"column_start":1,"column_end":26}},"imports":[{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/lib.rs","byte_start":3995,"byte_end":3996,"line_start":105,"line_end":105,"column_start":23,"column_end":24},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/lib.rs","byte_start":4036,"byte_end":4037,"line_start":108,"line_end":108,"column_start":25,"column_end":26},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/lib.rs","byte_start":4075,"byte_end":4076,"line_start":111,"line_end":111,"column_start":24,"column_end":25},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/lib.rs","byte_start":333,"byte_end":4077,"line_start":8,"line_end":111,"column_start":1,"column_end":26},"name":"","qualname":"::","value":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":8},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":218},{"krate":0,"index":219},{"krate":0,"index":488},{"krate":0,"index":489},{"krate":0,"index":923}],"decl_id":null,"docs":" This library provides type-safe and fully-featured `Mutex` and `RwLock`\n types which wrap a simple raw mutex or rwlock type. This has several\n benefits: not only does it eliminate a large portion of the work in\n implementing custom lock types, it also allows users to write code which is\n generic with regards to different lock implementations.","sig":null,"attributes":[{"value":"/ This library provides type-safe and fully-featured `Mutex` and `RwLock`","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/lib.rs","byte_start":333,"byte_end":408,"line_start":8,"line_end":8,"column_start":1,"column_end":76}},{"value":"/ types which wrap a simple raw mutex or rwlock type. This has several","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/lib.rs","byte_start":409,"byte_end":481,"line_start":9,"line_end":9,"column_start":1,"column_end":73}},{"value":"/ benefits: not only does it eliminate a large portion of the work in","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/lib.rs","byte_start":482,"byte_end":553,"line_start":10,"line_end":10,"column_start":1,"column_end":72}},{"value":"/ implementing custom lock types, it also allows users to write code which is","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/lib.rs","byte_start":554,"byte_end":633,"line_start":11,"line_end":11,"column_start":1,"column_end":80}},{"value":"/ generic with regards to different lock implementations.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/lib.rs","byte_start":634,"byte_end":693,"line_start":12,"line_end":12,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/lib.rs","byte_start":694,"byte_end":697,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ Basic usage of this crate is very straightforward:","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/lib.rs","byte_start":698,"byte_end":752,"line_start":14,"line_end":14,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/lib.rs","byte_start":753,"byte_end":756,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ 1. Create a raw lock type. This should only contain the lock state, not any","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/lib.rs","byte_start":757,"byte_end":836,"line_start":16,"line_end":16,"column_start":1,"column_end":80}},{"value":"/    data protected by the lock.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/lib.rs","byte_start":837,"byte_end":871,"line_start":17,"line_end":17,"column_start":1,"column_end":35}},{"value":"/ 2. Implement the `RawMutex` trait for your custom lock type.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/lib.rs","byte_start":872,"byte_end":936,"line_start":18,"line_end":18,"column_start":1,"column_end":65}},{"value":"/ 3. Export your mutex as a type alias for `lock_api::Mutex`, and","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/lib.rs","byte_start":937,"byte_end":1004,"line_start":19,"line_end":19,"column_start":1,"column_end":68}},{"value":"/    your mutex guard as a type alias for `lock_api::MutexGuard`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/lib.rs","byte_start":1005,"byte_end":1072,"line_start":20,"line_end":20,"column_start":1,"column_end":68}},{"value":"/    See the [example](#example) below for details.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/lib.rs","byte_start":1073,"byte_end":1126,"line_start":21,"line_end":21,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/lib.rs","byte_start":1127,"byte_end":1130,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ This process is similar for RwLocks, except that two guards need to be","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/lib.rs","byte_start":1131,"byte_end":1205,"line_start":23,"line_end":23,"column_start":1,"column_end":75}},{"value":"/ exported instead of one. (Or 3 guards if your type supports upgradable read","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/lib.rs","byte_start":1206,"byte_end":1285,"line_start":24,"line_end":24,"column_start":1,"column_end":80}},{"value":"/ locks, see [extension traits](#extension-traits) below for details)","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/lib.rs","byte_start":1286,"byte_end":1357,"line_start":25,"line_end":25,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/lib.rs","byte_start":1358,"byte_end":1361,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/lib.rs","byte_start":1362,"byte_end":1375,"line_start":27,"line_end":27,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/lib.rs","byte_start":1376,"byte_end":1379,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/lib.rs","byte_start":1380,"byte_end":1387,"line_start":29,"line_end":29,"column_start":1,"column_end":8}},{"value":"/ use lock_api::{RawMutex, Mutex, GuardSend};","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/lib.rs","byte_start":1388,"byte_end":1435,"line_start":30,"line_end":30,"column_start":1,"column_end":48}},{"value":"/ use std::sync::atomic::{AtomicBool, Ordering};","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/lib.rs","byte_start":1436,"byte_end":1486,"line_start":31,"line_end":31,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/lib.rs","byte_start":1487,"byte_end":1490,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ // 1. Define our raw lock type","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/lib.rs","byte_start":1491,"byte_end":1525,"line_start":33,"line_end":33,"column_start":1,"column_end":35}},{"value":"/ pub struct RawSpinlock(AtomicBool);","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/lib.rs","byte_start":1526,"byte_end":1565,"line_start":34,"line_end":34,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/lib.rs","byte_start":1566,"byte_end":1569,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ // 2. Implement RawMutex for this type","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/lib.rs","byte_start":1570,"byte_end":1612,"line_start":36,"line_end":36,"column_start":1,"column_end":43}},{"value":"/ unsafe impl RawMutex for RawSpinlock {","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/lib.rs","byte_start":1613,"byte_end":1655,"line_start":37,"line_end":37,"column_start":1,"column_end":43}},{"value":"/     const INIT: RawSpinlock = RawSpinlock(AtomicBool::new(false));","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/lib.rs","byte_start":1656,"byte_end":1726,"line_start":38,"line_end":38,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/lib.rs","byte_start":1727,"byte_end":1730,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/     // A spinlock guard can be sent to another thread and unlocked there","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/lib.rs","byte_start":1731,"byte_end":1807,"line_start":40,"line_end":40,"column_start":1,"column_end":77}},{"value":"/     type GuardMarker = GuardSend;","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/lib.rs","byte_start":1808,"byte_end":1845,"line_start":41,"line_end":41,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/lib.rs","byte_start":1846,"byte_end":1849,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/     fn lock(&self) {","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/lib.rs","byte_start":1850,"byte_end":1874,"line_start":43,"line_end":43,"column_start":1,"column_end":25}},{"value":"/         // Note: This isn't the best way of implementing a spinlock, but it","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/lib.rs","byte_start":1875,"byte_end":1954,"line_start":44,"line_end":44,"column_start":1,"column_end":80}},{"value":"/         // suffices for the sake of this example.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/lib.rs","byte_start":1955,"byte_end":2008,"line_start":45,"line_end":45,"column_start":1,"column_end":54}},{"value":"/         while !self.try_lock() {}","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/lib.rs","byte_start":2009,"byte_end":2046,"line_start":46,"line_end":46,"column_start":1,"column_end":38}},{"value":"/     }","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/lib.rs","byte_start":2047,"byte_end":2056,"line_start":47,"line_end":47,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/lib.rs","byte_start":2057,"byte_end":2060,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/     fn try_lock(&self) -> bool {","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/lib.rs","byte_start":2061,"byte_end":2097,"line_start":49,"line_end":49,"column_start":1,"column_end":37}},{"value":"/         self.0","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/lib.rs","byte_start":2098,"byte_end":2116,"line_start":50,"line_end":50,"column_start":1,"column_end":19}},{"value":"/             .compare_exchange(false, true, Ordering::Acquire, Ordering::Relaxed)","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/lib.rs","byte_start":2117,"byte_end":2201,"line_start":51,"line_end":51,"column_start":1,"column_end":85}},{"value":"/             .is_ok()","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/lib.rs","byte_start":2202,"byte_end":2226,"line_start":52,"line_end":52,"column_start":1,"column_end":25}},{"value":"/     }","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/lib.rs","byte_start":2227,"byte_end":2236,"line_start":53,"line_end":53,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/lib.rs","byte_start":2237,"byte_end":2240,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/     unsafe fn unlock(&self) {","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/lib.rs","byte_start":2241,"byte_end":2274,"line_start":55,"line_end":55,"column_start":1,"column_end":34}},{"value":"/         self.0.store(false, Ordering::Release);","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/lib.rs","byte_start":2275,"byte_end":2326,"line_start":56,"line_end":56,"column_start":1,"column_end":52}},{"value":"/     }","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/lib.rs","byte_start":2327,"byte_end":2336,"line_start":57,"line_end":57,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/lib.rs","byte_start":2337,"byte_end":2342,"line_start":58,"line_end":58,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/lib.rs","byte_start":2343,"byte_end":2346,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ // 3. Export the wrappers. This are the types that your users will actually use.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/lib.rs","byte_start":2347,"byte_end":2431,"line_start":60,"line_end":60,"column_start":1,"column_end":85}},{"value":"/ pub type Spinlock<T> = lock_api::Mutex<RawSpinlock, T>;","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/lib.rs","byte_start":2432,"byte_end":2491,"line_start":61,"line_end":61,"column_start":1,"column_end":60}},{"value":"/ pub type SpinlockGuard<'a, T> = lock_api::MutexGuard<'a, RawSpinlock, T>;","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/lib.rs","byte_start":2492,"byte_end":2569,"line_start":62,"line_end":62,"column_start":1,"column_end":78}},{"value":"/ ```","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/lib.rs","byte_start":2570,"byte_end":2577,"line_start":63,"line_end":63,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/lib.rs","byte_start":2578,"byte_end":2581,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/ # Extension traits","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/lib.rs","byte_start":2582,"byte_end":2604,"line_start":65,"line_end":65,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/lib.rs","byte_start":2605,"byte_end":2608,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ In addition to basic locking & unlocking functionality, you have the option","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/lib.rs","byte_start":2609,"byte_end":2688,"line_start":67,"line_end":67,"column_start":1,"column_end":80}},{"value":"/ of exposing additional functionality in your lock types by implementing","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/lib.rs","byte_start":2689,"byte_end":2764,"line_start":68,"line_end":68,"column_start":1,"column_end":76}},{"value":"/ additional traits for it. Examples of extension features include:","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/lib.rs","byte_start":2765,"byte_end":2834,"line_start":69,"line_end":69,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/lib.rs","byte_start":2835,"byte_end":2838,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ - Fair unlocking (`RawMutexFair`, `RawRwLockFair`)","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/lib.rs","byte_start":2839,"byte_end":2893,"line_start":71,"line_end":71,"column_start":1,"column_end":55}},{"value":"/ - Lock timeouts (`RawMutexTimed`, `RawRwLockTimed`)","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/lib.rs","byte_start":2894,"byte_end":2949,"line_start":72,"line_end":72,"column_start":1,"column_end":56}},{"value":"/ - Downgradable write locks (`RawRwLockDowngradable`)","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/lib.rs","byte_start":2950,"byte_end":3006,"line_start":73,"line_end":73,"column_start":1,"column_end":57}},{"value":"/ - Recursive read locks (`RawRwLockRecursive`)","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/lib.rs","byte_start":3007,"byte_end":3056,"line_start":74,"line_end":74,"column_start":1,"column_end":50}},{"value":"/ - Upgradable read locks (`RawRwLockUpgrade`)","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/lib.rs","byte_start":3057,"byte_end":3105,"line_start":75,"line_end":75,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/lib.rs","byte_start":3106,"byte_end":3109,"line_start":76,"line_end":76,"column_start":1,"column_end":4}},{"value":"/ The `Mutex` and `RwLock` wrappers will automatically expose this additional","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/lib.rs","byte_start":3110,"byte_end":3189,"line_start":77,"line_end":77,"column_start":1,"column_end":80}},{"value":"/ functionality if the raw lock type implements these extension traits.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/lib.rs","byte_start":3190,"byte_end":3263,"line_start":78,"line_end":78,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/lib.rs","byte_start":3264,"byte_end":3267,"line_start":79,"line_end":79,"column_start":1,"column_end":4}},{"value":"/ # Cargo features","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/lib.rs","byte_start":3268,"byte_end":3288,"line_start":80,"line_end":80,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/lib.rs","byte_start":3289,"byte_end":3292,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ This crate supports two cargo features:","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/lib.rs","byte_start":3293,"byte_end":3336,"line_start":82,"line_end":82,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/lib.rs","byte_start":3337,"byte_end":3340,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"/ - `owning_ref`: Allows your lock types to be used with the `owning_ref` crate.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/lib.rs","byte_start":3341,"byte_end":3423,"line_start":84,"line_end":84,"column_start":1,"column_end":83}},{"value":"/ - `nightly`: Enables nightly-only features. At the moment the only such","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/lib.rs","byte_start":3424,"byte_end":3499,"line_start":85,"line_end":85,"column_start":1,"column_end":76}},{"value":"/   feature is `const fn` constructors for lock types.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/lib.rs","byte_start":3500,"byte_end":3556,"line_start":86,"line_end":86,"column_start":1,"column_end":57}},{"value":"no_std","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/lib.rs","byte_start":3558,"byte_end":3568,"line_start":88,"line_end":88,"column_start":1,"column_end":11}},{"value":"warn(missing_docs)","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/lib.rs","byte_start":3569,"byte_end":3591,"line_start":89,"line_end":89,"column_start":1,"column_end":23}},{"value":"warn(rust_2018_idioms)","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/lib.rs","byte_start":3592,"byte_end":3618,"line_start":90,"line_end":90,"column_start":1,"column_end":27}}]},{"kind":"Struct","id":{"krate":0,"index":5},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/lib.rs","byte_start":3797,"byte_end":3806,"line_start":97,"line_end":97,"column_start":12,"column_end":21},"name":"GuardSend","qualname":"::GuardSend","value":"","parent":null,"children":[],"decl_id":null,"docs":" Marker type which indicates that the Guard type for a lock is `Send`.\n","sig":null,"attributes":[{"value":"/ Marker type which indicates that the Guard type for a lock is `Send`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/lib.rs","byte_start":3712,"byte_end":3785,"line_start":96,"line_end":96,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":8},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/lib.rs","byte_start":3902,"byte_end":3913,"line_start":100,"line_end":100,"column_start":12,"column_end":23},"name":"GuardNoSend","qualname":"::GuardNoSend","value":"","parent":null,"children":[],"decl_id":null,"docs":" Marker type which indicates that the Guard type for a lock is not `Send`.\n","sig":null,"attributes":[{"value":"/ Marker type which indicates that the Guard type for a lock is not `Send`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/lib.rs","byte_start":3813,"byte_end":3890,"line_start":99,"line_end":99,"column_start":1,"column_end":78}}]},{"kind":"Trait","id":{"krate":0,"index":32},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":5023,"byte_end":5031,"line_start":29,"line_end":29,"column_start":18,"column_end":26},"name":"RawMutex","qualname":"::mutex::RawMutex","value":"RawMutex","parent":null,"children":[{"krate":0,"index":33},{"krate":0,"index":34},{"krate":0,"index":35},{"krate":0,"index":36},{"krate":0,"index":37},{"krate":0,"index":38}],"decl_id":null,"docs":" Basic operations for a mutex.","sig":null,"attributes":[{"value":"/ Basic operations for a mutex.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":4689,"byte_end":4722,"line_start":20,"line_end":20,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":4723,"byte_end":4726,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ Types implementing this trait can be used by `Mutex` to form a safe and","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":4727,"byte_end":4802,"line_start":22,"line_end":22,"column_start":1,"column_end":76}},{"value":"/ fully-functioning mutex type.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":4803,"byte_end":4836,"line_start":23,"line_end":23,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":4837,"byte_end":4840,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ # Safety","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":4841,"byte_end":4853,"line_start":25,"line_end":25,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":4854,"byte_end":4857,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ Implementations of this trait must ensure that the mutex is actually","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":4858,"byte_end":4930,"line_start":27,"line_end":27,"column_start":1,"column_end":73}},{"value":"/ exclusive: a lock can't be acquired while the mutex is already locked.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":4931,"byte_end":5005,"line_start":28,"line_end":28,"column_start":1,"column_end":75}}]},{"kind":"Const","id":{"krate":0,"index":33},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":5334,"byte_end":5338,"line_start":34,"line_end":34,"column_start":11,"column_end":15},"name":"INIT","qualname":"::mutex::RawMutex::INIT","value":"Self","parent":{"krate":0,"index":32},"children":[],"decl_id":null,"docs":" Initial value for an unlocked mutex.\n","sig":null,"attributes":[{"value":"/ Initial value for an unlocked mutex.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":5038,"byte_end":5078,"line_start":30,"line_end":30,"column_start":5,"column_end":45}},{"value":"allow(clippy :: declare_interior_mutable_const)","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":5275,"byte_end":5323,"line_start":33,"line_end":33,"column_start":5,"column_end":53}}]},{"kind":"Type","id":{"krate":0,"index":34},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":5503,"byte_end":5514,"line_start":38,"line_end":38,"column_start":10,"column_end":21},"name":"GuardMarker","qualname":"::mutex::RawMutex::GuardMarker","value":"type GuardMarker;","parent":{"krate":0,"index":32},"children":[],"decl_id":null,"docs":" Marker type which determines whether a lock guard should be `Send`. Use\n one of the `GuardSend` or `GuardNoSend` helper types here.\n","sig":null,"attributes":[{"value":"/ Marker type which determines whether a lock guard should be `Send`. Use","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":5351,"byte_end":5426,"line_start":36,"line_end":36,"column_start":5,"column_end":80}},{"value":"/ one of the `GuardSend` or `GuardNoSend` helper types here.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":5431,"byte_end":5493,"line_start":37,"line_end":37,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":35},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":5608,"byte_end":5612,"line_start":41,"line_end":41,"column_start":8,"column_end":12},"name":"lock","qualname":"::mutex::RawMutex::lock","value":"pub fn lock(&Self)","parent":{"krate":0,"index":32},"children":[],"decl_id":null,"docs":" Acquires this mutex, blocking the current thread until it is able to do so.\n","sig":null,"attributes":[{"value":"/ Acquires this mutex, blocking the current thread until it is able to do so.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":5521,"byte_end":5600,"line_start":40,"line_end":40,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":36},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":5770,"byte_end":5778,"line_start":45,"line_end":45,"column_start":8,"column_end":16},"name":"try_lock","qualname":"::mutex::RawMutex::try_lock","value":"pub fn try_lock(&Self) -> bool","parent":{"krate":0,"index":32},"children":[],"decl_id":null,"docs":" Attempts to acquire this mutex without blocking. Returns `true`\n if the lock was successfully acquired and `false` otherwise.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire this mutex without blocking. Returns `true`","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":5626,"byte_end":5693,"line_start":43,"line_end":43,"column_start":5,"column_end":72}},{"value":"/ if the lock was successfully acquired and `false` otherwise.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":5698,"byte_end":5762,"line_start":44,"line_end":44,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":37},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":6308,"byte_end":6314,"line_start":58,"line_end":58,"column_start":15,"column_end":21},"name":"unlock","qualname":"::mutex::RawMutex::unlock","value":"pub unsafe fn unlock(&Self)","parent":{"krate":0,"index":32},"children":[],"decl_id":null,"docs":" Unlocks this mutex.","sig":null,"attributes":[{"value":"/ Unlocks this mutex.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":5800,"byte_end":5823,"line_start":47,"line_end":47,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":5828,"byte_end":5831,"line_start":48,"line_end":48,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":5836,"byte_end":5848,"line_start":49,"line_end":49,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":5853,"byte_end":5856,"line_start":50,"line_end":50,"column_start":5,"column_end":8}},{"value":"/ This method may only be called if the mutex is held in the current context, i.e. it must","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":5861,"byte_end":5953,"line_start":51,"line_end":51,"column_start":5,"column_end":97}},{"value":"/ be paired with a successful call to [`lock`], [`try_lock`], [`try_lock_for`] or [`try_lock_until`].","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":5958,"byte_end":6061,"line_start":52,"line_end":52,"column_start":5,"column_end":108}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":6066,"byte_end":6069,"line_start":53,"line_end":53,"column_start":5,"column_end":8}},{"value":"/ [`lock`]: #tymethod.lock","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":6074,"byte_end":6102,"line_start":54,"line_end":54,"column_start":5,"column_end":33}},{"value":"/ [`try_lock`]: #tymethod.try_lock","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":6107,"byte_end":6143,"line_start":55,"line_end":55,"column_start":5,"column_end":41}},{"value":"/ [`try_lock_for`]: trait.RawMutexTimed.html#tymethod.try_lock_for","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":6148,"byte_end":6216,"line_start":56,"line_end":56,"column_start":5,"column_end":73}},{"value":"/ [`try_lock_until`]: trait.RawMutexTimed.html#tymethod.try_lock_until","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":6221,"byte_end":6293,"line_start":57,"line_end":57,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":38},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":6399,"byte_end":6408,"line_start":62,"line_end":62,"column_start":8,"column_end":17},"name":"is_locked","qualname":"::mutex::RawMutex::is_locked","value":"pub fn is_locked(&Self) -> bool","parent":{"krate":0,"index":32},"children":[],"decl_id":null,"docs":" Checks whether the mutex is currently locked.\n","sig":null,"attributes":[{"value":"/ Checks whether the mutex is currently locked.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":6328,"byte_end":6377,"line_start":60,"line_end":60,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":6382,"byte_end":6391,"line_start":61,"line_end":61,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":39},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":7056,"byte_end":7068,"line_start":80,"line_end":80,"column_start":18,"column_end":30},"name":"RawMutexFair","qualname":"::mutex::RawMutexFair","value":"RawMutexFair: RawMutex","parent":null,"children":[{"krate":0,"index":40},{"krate":0,"index":41}],"decl_id":null,"docs":" Additional methods for mutexes which support fair unlocking.","sig":null,"attributes":[{"value":"/ Additional methods for mutexes which support fair unlocking.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":6676,"byte_end":6740,"line_start":74,"line_end":74,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":6741,"byte_end":6744,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ Fair unlocking means that a lock is handed directly over to the next waiting","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":6745,"byte_end":6825,"line_start":76,"line_end":76,"column_start":1,"column_end":81}},{"value":"/ thread if there is one, without giving other threads the opportunity to","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":6826,"byte_end":6901,"line_start":77,"line_end":77,"column_start":1,"column_end":76}},{"value":"/ \"steal\" the lock in the meantime. This is typically slower than unfair","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":6902,"byte_end":6976,"line_start":78,"line_end":78,"column_start":1,"column_end":75}},{"value":"/ unlocking, but may be necessary in certain circumstances.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":6977,"byte_end":7038,"line_start":79,"line_end":79,"column_start":1,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":40},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":7378,"byte_end":7389,"line_start":89,"line_end":89,"column_start":15,"column_end":26},"name":"unlock_fair","qualname":"::mutex::RawMutexFair::unlock_fair","value":"pub unsafe fn unlock_fair(&Self)","parent":{"krate":0,"index":39},"children":[],"decl_id":null,"docs":" Unlocks this mutex using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Unlocks this mutex using a fair unlock protocol.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":7085,"byte_end":7137,"line_start":81,"line_end":81,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":7142,"byte_end":7145,"line_start":82,"line_end":82,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":7150,"byte_end":7162,"line_start":83,"line_end":83,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":7167,"byte_end":7170,"line_start":84,"line_end":84,"column_start":5,"column_end":8}},{"value":"/ This method may only be called if the mutex is held in the current context, see","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":7175,"byte_end":7258,"line_start":85,"line_end":85,"column_start":5,"column_end":88}},{"value":"/ the documentation of [`unlock`].","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":7263,"byte_end":7299,"line_start":86,"line_end":86,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":7304,"byte_end":7307,"line_start":87,"line_end":87,"column_start":5,"column_end":8}},{"value":"/ [`unlock`]: trait.RawMutex.html#tymethod.unlock","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":7312,"byte_end":7363,"line_start":88,"line_end":88,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":41},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":7915,"byte_end":7919,"line_start":103,"line_end":103,"column_start":15,"column_end":19},"name":"bump","qualname":"::mutex::RawMutexFair::bump","value":"pub unsafe fn bump(&Self)","parent":{"krate":0,"index":39},"children":[],"decl_id":null,"docs":" Temporarily yields the mutex to a waiting thread if there is one.","sig":null,"attributes":[{"value":"/ Temporarily yields the mutex to a waiting thread if there is one.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":7403,"byte_end":7472,"line_start":91,"line_end":91,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":7477,"byte_end":7480,"line_start":92,"line_end":92,"column_start":5,"column_end":8}},{"value":"/ This method is functionally equivalent to calling `unlock_fair` followed","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":7485,"byte_end":7561,"line_start":93,"line_end":93,"column_start":5,"column_end":81}},{"value":"/ by `lock`, however it can be much more efficient in the case where there","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":7566,"byte_end":7642,"line_start":94,"line_end":94,"column_start":5,"column_end":81}},{"value":"/ are no waiting threads.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":7647,"byte_end":7674,"line_start":95,"line_end":95,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":7679,"byte_end":7682,"line_start":96,"line_end":96,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":7687,"byte_end":7699,"line_start":97,"line_end":97,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":7704,"byte_end":7707,"line_start":98,"line_end":98,"column_start":5,"column_end":8}},{"value":"/ This method may only be called if the mutex is held in the current context, see","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":7712,"byte_end":7795,"line_start":99,"line_end":99,"column_start":5,"column_end":88}},{"value":"/ the documentation of [`unlock`].","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":7800,"byte_end":7836,"line_start":100,"line_end":100,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":7841,"byte_end":7844,"line_start":101,"line_end":101,"column_start":5,"column_end":8}},{"value":"/ [`unlock`]: trait.RawMutex.html#tymethod.unlock","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":7849,"byte_end":7900,"line_start":102,"line_end":102,"column_start":5,"column_end":56}}]},{"kind":"Trait","id":{"krate":0,"index":42},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":8217,"byte_end":8230,"line_start":113,"line_end":113,"column_start":18,"column_end":31},"name":"RawMutexTimed","qualname":"::mutex::RawMutexTimed","value":"RawMutexTimed: RawMutex","parent":null,"children":[{"krate":0,"index":43},{"krate":0,"index":44},{"krate":0,"index":45},{"krate":0,"index":46}],"decl_id":null,"docs":" Additional methods for mutexes which support locking with timeouts.","sig":null,"attributes":[{"value":"/ Additional methods for mutexes which support locking with timeouts.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":7987,"byte_end":8058,"line_start":109,"line_end":109,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":8059,"byte_end":8062,"line_start":110,"line_end":110,"column_start":1,"column_end":4}},{"value":"/ The `Duration` and `Instant` types are specified as associated types so that","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":8063,"byte_end":8143,"line_start":111,"line_end":111,"column_start":1,"column_end":81}},{"value":"/ this trait is usable even in `no_std` environments.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":8144,"byte_end":8199,"line_start":112,"line_end":112,"column_start":1,"column_end":56}}]},{"kind":"Type","id":{"krate":0,"index":43},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":8299,"byte_end":8307,"line_start":115,"line_end":115,"column_start":10,"column_end":18},"name":"Duration","qualname":"::mutex::RawMutexTimed::Duration","value":"type Duration;","parent":{"krate":0,"index":42},"children":[],"decl_id":null,"docs":" Duration type used for `try_lock_for`.\n","sig":null,"attributes":[{"value":"/ Duration type used for `try_lock_for`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":8247,"byte_end":8289,"line_start":114,"line_end":114,"column_start":5,"column_end":47}}]},{"kind":"Type","id":{"krate":0,"index":44},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":8367,"byte_end":8374,"line_start":118,"line_end":118,"column_start":10,"column_end":17},"name":"Instant","qualname":"::mutex::RawMutexTimed::Instant","value":"type Instant;","parent":{"krate":0,"index":42},"children":[],"decl_id":null,"docs":" Instant type used for `try_lock_until`.\n","sig":null,"attributes":[{"value":"/ Instant type used for `try_lock_until`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":8314,"byte_end":8357,"line_start":117,"line_end":117,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":45},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":8450,"byte_end":8462,"line_start":121,"line_end":121,"column_start":8,"column_end":20},"name":"try_lock_for","qualname":"::mutex::RawMutexTimed::try_lock_for","value":"pub fn try_lock_for(&Self, Self::Duration) -> bool","parent":{"krate":0,"index":42},"children":[],"decl_id":null,"docs":" Attempts to acquire this lock until a timeout is reached.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire this lock until a timeout is reached.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":8381,"byte_end":8442,"line_start":120,"line_end":120,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":46},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":8578,"byte_end":8592,"line_start":124,"line_end":124,"column_start":8,"column_end":22},"name":"try_lock_until","qualname":"::mutex::RawMutexTimed::try_lock_until","value":"pub fn try_lock_until(&Self, Self::Instant) -> bool","parent":{"krate":0,"index":42},"children":[],"decl_id":null,"docs":" Attempts to acquire this lock until a timeout is reached.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire this lock until a timeout is reached.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":8509,"byte_end":8570,"line_start":123,"line_end":123,"column_start":5,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":47},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":9146,"byte_end":9151,"line_start":135,"line_end":135,"column_start":12,"column_end":17},"name":"Mutex","qualname":"::mutex::Mutex","value":"Mutex {  }","parent":null,"children":[{"krate":0,"index":50},{"krate":0,"index":51}],"decl_id":null,"docs":" A mutual exclusion primitive useful for protecting shared data","sig":null,"attributes":[{"value":"/ A mutual exclusion primitive useful for protecting shared data","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":8636,"byte_end":8702,"line_start":127,"line_end":127,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":8703,"byte_end":8706,"line_start":128,"line_end":128,"column_start":1,"column_end":4}},{"value":"/ This mutex will block threads waiting for the lock to become available. The","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":8707,"byte_end":8786,"line_start":129,"line_end":129,"column_start":1,"column_end":80}},{"value":"/ mutex can also be statically initialized or created via a `new`","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":8787,"byte_end":8854,"line_start":130,"line_end":130,"column_start":1,"column_end":68}},{"value":"/ constructor. Each mutex has a type parameter which represents the data that","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":8855,"byte_end":8934,"line_start":131,"line_end":131,"column_start":1,"column_end":80}},{"value":"/ it is protecting. The data can only be accessed through the RAII guards","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":8935,"byte_end":9010,"line_start":132,"line_end":132,"column_start":1,"column_end":76}},{"value":"/ returned from `lock` and `try_lock`, which guarantees that the data is only","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":9011,"byte_end":9090,"line_start":133,"line_end":133,"column_start":1,"column_end":80}},{"value":"/ ever accessed when the mutex is locked.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":9091,"byte_end":9134,"line_start":134,"line_end":134,"column_start":1,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":61},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":9773,"byte_end":9776,"line_start":157,"line_end":157,"column_start":12,"column_end":15},"name":"new","qualname":"<Mutex<R, T>>::new","value":"pub fn new(T) -> Mutex<R, T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new mutex in an unlocked state ready for use.\n","sig":null,"attributes":[{"value":"/ Creates a new mutex in an unlocked state ready for use.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":9651,"byte_end":9710,"line_start":154,"line_end":154,"column_start":5,"column_end":64}},{"value":"cfg(not(feature = \"nightly\"))","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":9715,"byte_end":9747,"line_start":155,"line_end":155,"column_start":5,"column_end":37}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":9752,"byte_end":9761,"line_start":156,"line_end":156,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":62},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":9986,"byte_end":9996,"line_start":166,"line_end":166,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<Mutex<R, T>>::into_inner","value":"pub fn into_inner(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Consumes this mutex, returning the underlying data.\n","sig":null,"attributes":[{"value":"/ Consumes this mutex, returning the underlying data.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":9905,"byte_end":9960,"line_start":164,"line_end":164,"column_start":5,"column_end":60}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":9965,"byte_end":9974,"line_start":165,"line_end":165,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":66},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":10252,"byte_end":10261,"line_start":176,"line_end":176,"column_start":18,"column_end":27},"name":"const_new","qualname":"<Mutex<R, T>>::const_new","value":"pub const fn const_new(R, T) -> Mutex<R, T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new mutex based on a pre-existing raw mutex.","sig":null,"attributes":[{"value":"/ Creates a new mutex based on a pre-existing raw mutex.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":10079,"byte_end":10137,"line_start":172,"line_end":172,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":10142,"byte_end":10145,"line_start":173,"line_end":173,"column_start":5,"column_end":8}},{"value":"/ This allows creating a mutex in a constant context on stable Rust.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":10150,"byte_end":10220,"line_start":174,"line_end":174,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":10225,"byte_end":10234,"line_start":175,"line_end":175,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":71},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":11233,"byte_end":11237,"line_start":206,"line_end":206,"column_start":12,"column_end":16},"name":"lock","qualname":"<Mutex<R, T>>::lock","value":"pub fn lock(&Self) -> MutexGuard<, R, T>","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutex, blocking the current thread until it is able to do so.","sig":null,"attributes":[{"value":"/ Acquires a mutex, blocking the current thread until it is able to do so.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":10695,"byte_end":10771,"line_start":196,"line_end":196,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":10776,"byte_end":10779,"line_start":197,"line_end":197,"column_start":5,"column_end":8}},{"value":"/ This function will block the local thread until it is available to acquire","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":10784,"byte_end":10862,"line_start":198,"line_end":198,"column_start":5,"column_end":83}},{"value":"/ the mutex. Upon returning, the thread is the only thread with the mutex","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":10867,"byte_end":10942,"line_start":199,"line_end":199,"column_start":5,"column_end":80}},{"value":"/ held. An RAII guard is returned to allow scoped unlock of the lock. When","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":10947,"byte_end":11023,"line_start":200,"line_end":200,"column_start":5,"column_end":81}},{"value":"/ the guard goes out of scope, the mutex will be unlocked.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":11028,"byte_end":11088,"line_start":201,"line_end":201,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":11093,"byte_end":11096,"line_start":202,"line_end":202,"column_start":5,"column_end":8}},{"value":"/ Attempts to lock a mutex in the thread which already holds the lock will","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":11101,"byte_end":11177,"line_start":203,"line_end":203,"column_start":5,"column_end":81}},{"value":"/ result in a deadlock.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":11182,"byte_end":11207,"line_start":204,"line_end":204,"column_start":5,"column_end":30}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":11212,"byte_end":11221,"line_start":205,"line_end":205,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":72},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":11691,"byte_end":11699,"line_start":220,"line_end":220,"column_start":12,"column_end":20},"name":"try_lock","qualname":"<Mutex<R, T>>::try_lock","value":"pub fn try_lock(&Self) -> Option<MutexGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this lock.","sig":null,"attributes":[{"value":"/ Attempts to acquire this lock.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":11389,"byte_end":11423,"line_start":212,"line_end":212,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":11428,"byte_end":11431,"line_start":213,"line_end":213,"column_start":5,"column_end":8}},{"value":"/ If the lock could not be acquired at this time, then `None` is returned.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":11436,"byte_end":11512,"line_start":214,"line_end":214,"column_start":5,"column_end":81}},{"value":"/ Otherwise, an RAII guard is returned. The lock will be unlocked when the","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":11517,"byte_end":11593,"line_start":215,"line_end":215,"column_start":5,"column_end":81}},{"value":"/ guard is dropped.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":11598,"byte_end":11619,"line_start":216,"line_end":216,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":11624,"byte_end":11627,"line_start":217,"line_end":217,"column_start":5,"column_end":8}},{"value":"/ This function does not block.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":11632,"byte_end":11665,"line_start":218,"line_end":218,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":11670,"byte_end":11679,"line_start":219,"line_end":219,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":73},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":12172,"byte_end":12179,"line_start":234,"line_end":234,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<Mutex<R, T>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the underlying data.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the underlying data.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":11925,"byte_end":11980,"line_start":229,"line_end":229,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":11985,"byte_end":11988,"line_start":230,"line_end":230,"column_start":5,"column_end":8}},{"value":"/ Since this call borrows the `Mutex` mutably, no actual locking needs to","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":11993,"byte_end":12068,"line_start":231,"line_end":231,"column_start":5,"column_end":80}},{"value":"/ take place---the mutable borrow statically guarantees no locks exist.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":12073,"byte_end":12146,"line_start":232,"line_end":232,"column_start":5,"column_end":78}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":12151,"byte_end":12160,"line_start":233,"line_end":233,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":74},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":12330,"byte_end":12339,"line_start":240,"line_end":240,"column_start":12,"column_end":21},"name":"is_locked","qualname":"<Mutex<R, T>>::is_locked","value":"pub fn is_locked(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Checks whether the mutex is currently locked.\n","sig":null,"attributes":[{"value":"/ Checks whether the mutex is currently locked.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":12255,"byte_end":12304,"line_start":238,"line_end":238,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":12309,"byte_end":12318,"line_start":239,"line_end":239,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":75},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":12905,"byte_end":12917,"line_start":256,"line_end":256,"column_start":19,"column_end":31},"name":"force_unlock","qualname":"<Mutex<R, T>>::force_unlock","value":"pub unsafe fn force_unlock(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Forcibly unlocks the mutex.","sig":null,"attributes":[{"value":"/ Forcibly unlocks the mutex.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":12397,"byte_end":12428,"line_start":244,"line_end":244,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":12433,"byte_end":12436,"line_start":245,"line_end":245,"column_start":5,"column_end":8}},{"value":"/ This is useful when combined with `mem::forget` to hold a lock without","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":12441,"byte_end":12515,"line_start":246,"line_end":246,"column_start":5,"column_end":79}},{"value":"/ the need to maintain a `MutexGuard` object alive, for example when","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":12520,"byte_end":12590,"line_start":247,"line_end":247,"column_start":5,"column_end":75}},{"value":"/ dealing with FFI.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":12595,"byte_end":12616,"line_start":248,"line_end":248,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":12621,"byte_end":12624,"line_start":249,"line_end":249,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":12629,"byte_end":12641,"line_start":250,"line_end":250,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":12646,"byte_end":12649,"line_start":251,"line_end":251,"column_start":5,"column_end":8}},{"value":"/ This method must only be called if the current thread logically owns a","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":12654,"byte_end":12728,"line_start":252,"line_end":252,"column_start":5,"column_end":79}},{"value":"/ `MutexGuard` but that guard has be discarded using `mem::forget`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":12733,"byte_end":12802,"line_start":253,"line_end":253,"column_start":5,"column_end":74}},{"value":"/ Behavior is undefined if a mutex is unlocked when not locked.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":12807,"byte_end":12872,"line_start":254,"line_end":254,"column_start":5,"column_end":70}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":12877,"byte_end":12886,"line_start":255,"line_end":255,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":76},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":13354,"byte_end":13357,"line_start":270,"line_end":270,"column_start":19,"column_end":22},"name":"raw","qualname":"<Mutex<R, T>>::raw","value":"pub unsafe fn raw(&Self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Returns the underlying raw mutex object.","sig":null,"attributes":[{"value":"/ Returns the underlying raw mutex object.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":12965,"byte_end":13009,"line_start":260,"line_end":260,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":13014,"byte_end":13017,"line_start":261,"line_end":261,"column_start":5,"column_end":8}},{"value":"/ Note that you will most likely need to import the `RawMutex` trait from","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":13022,"byte_end":13097,"line_start":262,"line_end":262,"column_start":5,"column_end":80}},{"value":"/ `lock_api` to be able to call functions on the raw mutex.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":13102,"byte_end":13163,"line_start":263,"line_end":263,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":13168,"byte_end":13171,"line_start":264,"line_end":264,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":13176,"byte_end":13188,"line_start":265,"line_end":265,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":13193,"byte_end":13196,"line_start":266,"line_end":266,"column_start":5,"column_end":8}},{"value":"/ This method is unsafe because it allows unlocking a mutex while","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":13201,"byte_end":13268,"line_start":267,"line_end":267,"column_start":5,"column_end":72}},{"value":"/ still holding a reference to a `MutexGuard`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":13273,"byte_end":13321,"line_start":268,"line_end":268,"column_start":5,"column_end":53}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":13326,"byte_end":13335,"line_start":269,"line_end":269,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":77},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":13927,"byte_end":13935,"line_start":286,"line_end":286,"column_start":12,"column_end":20},"name":"data_ptr","qualname":"<Mutex<R, T>>::data_ptr","value":"pub fn data_ptr(&Self) -> *mut T","parent":null,"children":[],"decl_id":null,"docs":" Returns a raw pointer to the underlying data.","sig":null,"attributes":[{"value":"/ Returns a raw pointer to the underlying data.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":13402,"byte_end":13451,"line_start":274,"line_end":274,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":13456,"byte_end":13459,"line_start":275,"line_end":275,"column_start":5,"column_end":8}},{"value":"/ This is useful when combined with `mem::forget` to hold a lock without","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":13464,"byte_end":13538,"line_start":276,"line_end":276,"column_start":5,"column_end":79}},{"value":"/ the need to maintain a `MutexGuard` object alive, for example when","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":13543,"byte_end":13613,"line_start":277,"line_end":277,"column_start":5,"column_end":75}},{"value":"/ dealing with FFI.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":13618,"byte_end":13639,"line_start":278,"line_end":278,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":13644,"byte_end":13647,"line_start":279,"line_end":279,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":13652,"byte_end":13664,"line_start":280,"line_end":280,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":13669,"byte_end":13672,"line_start":281,"line_end":281,"column_start":5,"column_end":8}},{"value":"/ You must ensure that there are no data races when dereferencing the","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":13677,"byte_end":13748,"line_start":282,"line_end":282,"column_start":5,"column_end":76}},{"value":"/ returned pointer, for example if the current thread logically owns","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":13753,"byte_end":13823,"line_start":283,"line_end":283,"column_start":5,"column_end":75}},{"value":"/ a `MutexGuard` but that guard has been discarded using `mem::forget`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":13828,"byte_end":13901,"line_start":284,"line_end":284,"column_start":5,"column_end":78}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":13906,"byte_end":13915,"line_start":285,"line_end":285,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":81},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":14576,"byte_end":14593,"line_start":304,"line_end":304,"column_start":19,"column_end":36},"name":"force_unlock_fair","qualname":"<Mutex<R, T>>::force_unlock_fair","value":"pub unsafe fn force_unlock_fair(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Forcibly unlocks the mutex using a fair unlock procotol.","sig":null,"attributes":[{"value":"/ Forcibly unlocks the mutex using a fair unlock procotol.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":14039,"byte_end":14099,"line_start":292,"line_end":292,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":14104,"byte_end":14107,"line_start":293,"line_end":293,"column_start":5,"column_end":8}},{"value":"/ This is useful when combined with `mem::forget` to hold a lock without","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":14112,"byte_end":14186,"line_start":294,"line_end":294,"column_start":5,"column_end":79}},{"value":"/ the need to maintain a `MutexGuard` object alive, for example when","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":14191,"byte_end":14261,"line_start":295,"line_end":295,"column_start":5,"column_end":75}},{"value":"/ dealing with FFI.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":14266,"byte_end":14287,"line_start":296,"line_end":296,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":14292,"byte_end":14295,"line_start":297,"line_end":297,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":14300,"byte_end":14312,"line_start":298,"line_end":298,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":14317,"byte_end":14320,"line_start":299,"line_end":299,"column_start":5,"column_end":8}},{"value":"/ This method must only be called if the current thread logically owns a","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":14325,"byte_end":14399,"line_start":300,"line_end":300,"column_start":5,"column_end":79}},{"value":"/ `MutexGuard` but that guard has be discarded using `mem::forget`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":14404,"byte_end":14473,"line_start":301,"line_end":301,"column_start":5,"column_end":74}},{"value":"/ Behavior is undefined if a mutex is unlocked when not locked.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":14478,"byte_end":14543,"line_start":302,"line_end":302,"column_start":5,"column_end":70}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":14548,"byte_end":14557,"line_start":303,"line_end":303,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":85},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":14993,"byte_end":15005,"line_start":316,"line_end":316,"column_start":12,"column_end":24},"name":"try_lock_for","qualname":"<Mutex<R, T>>::try_lock_for","value":"pub fn try_lock_for(&Self, R::Duration) -> Option<MutexGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this lock until a timeout is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this lock until a timeout is reached.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":14696,"byte_end":14757,"line_start":310,"line_end":310,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":14762,"byte_end":14765,"line_start":311,"line_end":311,"column_start":5,"column_end":8}},{"value":"/ If the lock could not be acquired before the timeout expired, then","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":14770,"byte_end":14840,"line_start":312,"line_end":312,"column_start":5,"column_end":75}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned. The lock will","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":14845,"byte_end":14920,"line_start":313,"line_end":313,"column_start":5,"column_end":80}},{"value":"/ be unlocked when the guard is dropped.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":14925,"byte_end":14967,"line_start":314,"line_end":314,"column_start":5,"column_end":47}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":14972,"byte_end":14981,"line_start":315,"line_end":315,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":86},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":15561,"byte_end":15575,"line_start":331,"line_end":331,"column_start":12,"column_end":26},"name":"try_lock_until","qualname":"<Mutex<R, T>>::try_lock_until","value":"pub fn try_lock_until(&Self, R::Instant) -> Option<MutexGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this lock until a timeout is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this lock until a timeout is reached.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":15264,"byte_end":15325,"line_start":325,"line_end":325,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":15330,"byte_end":15333,"line_start":326,"line_end":326,"column_start":5,"column_end":8}},{"value":"/ If the lock could not be acquired before the timeout expired, then","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":15338,"byte_end":15408,"line_start":327,"line_end":327,"column_start":5,"column_end":75}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned. The lock will","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":15413,"byte_end":15488,"line_start":328,"line_end":328,"column_start":5,"column_end":80}},{"value":"/ be unlocked when the guard is dropped.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":15493,"byte_end":15535,"line_start":329,"line_end":329,"column_start":5,"column_end":47}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":15540,"byte_end":15549,"line_start":330,"line_end":330,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":103},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":17783,"byte_end":17793,"line_start":410,"line_end":410,"column_start":12,"column_end":22},"name":"MutexGuard","qualname":"::mutex::MutexGuard","value":"MutexGuard {  }","parent":null,"children":[{"krate":0,"index":107},{"krate":0,"index":108}],"decl_id":null,"docs":" An RAII implementation of a \"scoped lock\" of a mutex. When this structure is\n dropped (falls out of scope), the lock will be unlocked.","sig":null,"attributes":[{"value":"/ An RAII implementation of a \"scoped lock\" of a mutex. When this structure is","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":17443,"byte_end":17523,"line_start":404,"line_end":404,"column_start":1,"column_end":81}},{"value":"/ dropped (falls out of scope), the lock will be unlocked.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":17524,"byte_end":17584,"line_start":405,"line_end":405,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":17585,"byte_end":17588,"line_start":406,"line_end":406,"column_start":1,"column_end":4}},{"value":"/ The data protected by the mutex can be accessed through this guard via its","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":17589,"byte_end":17667,"line_start":407,"line_end":407,"column_start":1,"column_end":79}},{"value":"/ `Deref` and `DerefMut` implementations.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":17668,"byte_end":17711,"line_start":408,"line_end":408,"column_start":1,"column_end":44}},{"value":"must_use = \"if unused the Mutex will immediately unlock\"","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":17712,"byte_end":17771,"line_start":409,"line_end":409,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":117},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":18144,"byte_end":18149,"line_start":419,"line_end":419,"column_start":12,"column_end":17},"name":"mutex","qualname":"<MutexGuard>::mutex","value":"pub fn mutex(&Self) -> &'a Mutex<R, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the original `Mutex` object.\n","sig":null,"attributes":[{"value":"/ Returns a reference to the original `Mutex` object.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":18077,"byte_end":18132,"line_start":418,"line_end":418,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":118},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":18614,"byte_end":18617,"line_start":432,"line_end":432,"column_start":12,"column_end":15},"name":"map","qualname":"<MutexGuard>::map","value":"pub fn map<U: ?Sized, F>(Self, F) -> MappedMutexGuard where F: FnOnce(&mut T)\n-> &mut U","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `MappedMutexGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"/ Makes a new `MappedMutexGuard` for a component of the locked data.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":18208,"byte_end":18278,"line_start":423,"line_end":423,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":18283,"byte_end":18286,"line_start":424,"line_end":424,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `MutexGuard` passed","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":18291,"byte_end":18348,"line_start":425,"line_end":425,"column_start":5,"column_end":62}},{"value":"/ in already locked the mutex.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":18353,"byte_end":18385,"line_start":426,"line_end":426,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":18390,"byte_end":18393,"line_start":427,"line_end":427,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":18398,"byte_end":18449,"line_start":428,"line_end":428,"column_start":5,"column_end":56}},{"value":"/ used as `MutexGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":18454,"byte_end":18530,"line_start":429,"line_end":429,"column_start":5,"column_end":81}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":18535,"byte_end":18588,"line_start":430,"line_end":430,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":18593,"byte_end":18602,"line_start":431,"line_end":431,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":121},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":19452,"byte_end":19459,"line_start":456,"line_end":456,"column_start":12,"column_end":19},"name":"try_map","qualname":"<MutexGuard>::try_map","value":"pub fn try_map<U: ?Sized, F>(Self, F) -> Result<MappedMutexGuard, Self> where\nF: FnOnce(&mut T) -> Option<&mut U>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make a new `MappedMutexGuard` for a component of the\n locked data. The original guard is returned if the closure returns `None`.","sig":null,"attributes":[{"value":"/ Attempts to make a new `MappedMutexGuard` for a component of the","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":18961,"byte_end":19029,"line_start":446,"line_end":446,"column_start":5,"column_end":73}},{"value":"/ locked data. The original guard is returned if the closure returns `None`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":19034,"byte_end":19112,"line_start":447,"line_end":447,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":19117,"byte_end":19120,"line_start":448,"line_end":448,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `MutexGuard` passed","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":19125,"byte_end":19182,"line_start":449,"line_end":449,"column_start":5,"column_end":62}},{"value":"/ in already locked the mutex.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":19187,"byte_end":19219,"line_start":450,"line_end":450,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":19224,"byte_end":19227,"line_start":451,"line_end":451,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":19232,"byte_end":19283,"line_start":452,"line_end":452,"column_start":5,"column_end":56}},{"value":"/ used as `MutexGuard::try_map(...)`. A method would interfere with methods of","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":19288,"byte_end":19368,"line_start":453,"line_end":453,"column_start":5,"column_end":85}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":19373,"byte_end":19426,"line_start":454,"line_end":454,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":19431,"byte_end":19440,"line_start":455,"line_end":455,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":124},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":20140,"byte_end":20148,"line_start":478,"line_end":478,"column_start":12,"column_end":20},"name":"unlocked","qualname":"<MutexGuard>::unlocked","value":"pub fn unlocked<F, U>(&mut Self, F) -> U where F: FnOnce() -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the mutex to execute the given function.","sig":null,"attributes":[{"value":"/ Temporarily unlocks the mutex to execute the given function.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":19914,"byte_end":19978,"line_start":473,"line_end":473,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":19983,"byte_end":19986,"line_start":474,"line_end":474,"column_start":5,"column_end":8}},{"value":"/ This is safe because `&mut` guarantees that there exist no other","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":19991,"byte_end":20059,"line_start":475,"line_end":475,"column_start":5,"column_end":73}},{"value":"/ references to the data protected by the mutex.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":20064,"byte_end":20114,"line_start":476,"line_end":476,"column_start":5,"column_end":55}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":20119,"byte_end":20128,"line_start":477,"line_end":477,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":131},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":21250,"byte_end":21261,"line_start":505,"line_end":505,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<MutexGuard>::unlock_fair","value":"pub fn unlock_fair(Self)","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the mutex using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Unlocks the mutex using a fair unlock protocol.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":20469,"byte_end":20520,"line_start":492,"line_end":492,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":20525,"byte_end":20528,"line_start":493,"line_end":493,"column_start":5,"column_end":8}},{"value":"/ By default, mutexes are unfair and allow the current thread to re-lock","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":20533,"byte_end":20607,"line_start":494,"line_end":494,"column_start":5,"column_end":79}},{"value":"/ the mutex before another has the chance to acquire the lock, even if","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":20612,"byte_end":20684,"line_start":495,"line_end":495,"column_start":5,"column_end":77}},{"value":"/ that thread has been blocked on the mutex for a long time. This is the","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":20689,"byte_end":20763,"line_start":496,"line_end":496,"column_start":5,"column_end":79}},{"value":"/ default because it allows much higher throughput as it avoids forcing a","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":20768,"byte_end":20843,"line_start":497,"line_end":497,"column_start":5,"column_end":80}},{"value":"/ context switch on every mutex unlock. This can result in one thread","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":20848,"byte_end":20919,"line_start":498,"line_end":498,"column_start":5,"column_end":76}},{"value":"/ acquiring a mutex many more times than other threads.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":20924,"byte_end":20981,"line_start":499,"line_end":499,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":20986,"byte_end":20989,"line_start":500,"line_end":500,"column_start":5,"column_end":8}},{"value":"/ However in some cases it can be beneficial to ensure fairness by forcing","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":20994,"byte_end":21070,"line_start":501,"line_end":501,"column_start":5,"column_end":81}},{"value":"/ the lock to pass on to a waiting thread if there is one. This is done by","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":21075,"byte_end":21151,"line_start":502,"line_end":502,"column_start":5,"column_end":81}},{"value":"/ using this method instead of dropping the `MutexGuard` normally.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":21156,"byte_end":21224,"line_start":503,"line_end":503,"column_start":5,"column_end":73}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":21229,"byte_end":21238,"line_start":504,"line_end":504,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":132},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":21723,"byte_end":21736,"line_start":520,"line_end":520,"column_start":12,"column_end":25},"name":"unlocked_fair","qualname":"<MutexGuard>::unlocked_fair","value":"pub fn unlocked_fair<F, U>(&mut Self, F) -> U where F: FnOnce() -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the mutex to execute the given function.","sig":null,"attributes":[{"value":"/ Temporarily unlocks the mutex to execute the given function.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":21429,"byte_end":21493,"line_start":513,"line_end":513,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":21498,"byte_end":21501,"line_start":514,"line_end":514,"column_start":5,"column_end":8}},{"value":"/ The mutex is unlocked using a fair unlock protocol.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":21506,"byte_end":21561,"line_start":515,"line_end":515,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":21566,"byte_end":21569,"line_start":516,"line_end":516,"column_start":5,"column_end":8}},{"value":"/ This is safe because `&mut` guarantees that there exist no other","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":21574,"byte_end":21642,"line_start":517,"line_end":517,"column_start":5,"column_end":73}},{"value":"/ references to the data protected by the mutex.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":21647,"byte_end":21697,"line_start":518,"line_end":518,"column_start":5,"column_end":55}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":21702,"byte_end":21711,"line_start":519,"line_end":519,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":135},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":22287,"byte_end":22291,"line_start":538,"line_end":538,"column_start":12,"column_end":16},"name":"bump","qualname":"<MutexGuard>::bump","value":"pub fn bump(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Temporarily yields the mutex to a waiting thread if there is one.","sig":null,"attributes":[{"value":"/ Temporarily yields the mutex to a waiting thread if there is one.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":21990,"byte_end":22059,"line_start":532,"line_end":532,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":22064,"byte_end":22067,"line_start":533,"line_end":533,"column_start":5,"column_end":8}},{"value":"/ This method is functionally equivalent to calling `unlock_fair` followed","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":22072,"byte_end":22148,"line_start":534,"line_end":534,"column_start":5,"column_end":81}},{"value":"/ by `lock`, however it can be much more efficient in the case where there","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":22153,"byte_end":22229,"line_start":535,"line_end":535,"column_start":5,"column_end":81}},{"value":"/ are no waiting threads.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":22234,"byte_end":22261,"line_start":536,"line_end":536,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":22266,"byte_end":22275,"line_start":537,"line_end":537,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":162},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":24009,"byte_end":24025,"line_start":594,"line_end":594,"column_start":12,"column_end":28},"name":"MappedMutexGuard","qualname":"::mutex::MappedMutexGuard","value":"MappedMutexGuard {  }","parent":null,"children":[{"krate":0,"index":166},{"krate":0,"index":167},{"krate":0,"index":168}],"decl_id":null,"docs":" An RAII mutex guard returned by `MutexGuard::map`, which can point to a\n subfield of the protected data.","sig":null,"attributes":[{"value":"/ An RAII mutex guard returned by `MutexGuard::map`, which can point to a","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":23573,"byte_end":23648,"line_start":586,"line_end":586,"column_start":1,"column_end":76}},{"value":"/ subfield of the protected data.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":23649,"byte_end":23684,"line_start":587,"line_end":587,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":23685,"byte_end":23688,"line_start":588,"line_end":588,"column_start":1,"column_end":4}},{"value":"/ The main difference between `MappedMutexGuard` and `MutexGuard` is that the","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":23689,"byte_end":23768,"line_start":589,"line_end":589,"column_start":1,"column_end":80}},{"value":"/ former doesn't support temporarily unlocking and re-locking, since that","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":23769,"byte_end":23844,"line_start":590,"line_end":590,"column_start":1,"column_end":76}},{"value":"/ could introduce soundness issues if the locked object is modified by another","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":23845,"byte_end":23925,"line_start":591,"line_end":591,"column_start":1,"column_end":81}},{"value":"/ thread.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":23926,"byte_end":23937,"line_start":592,"line_end":592,"column_start":1,"column_end":12}},{"value":"must_use = \"if unused the Mutex will immediately unlock\"","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":23938,"byte_end":23997,"line_start":593,"line_end":593,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":181},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":24860,"byte_end":24863,"line_start":619,"line_end":619,"column_start":12,"column_end":15},"name":"map","qualname":"<MappedMutexGuard>::map","value":"pub fn map<U: ?Sized, F>(Self, F) -> MappedMutexGuard where F: FnOnce(&mut T)\n-> &mut U","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `MappedMutexGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"/ Makes a new `MappedMutexGuard` for a component of the locked data.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":24442,"byte_end":24512,"line_start":610,"line_end":610,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":24517,"byte_end":24520,"line_start":611,"line_end":611,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `MappedMutexGuard` passed","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":24525,"byte_end":24588,"line_start":612,"line_end":612,"column_start":5,"column_end":68}},{"value":"/ in already locked the mutex.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":24593,"byte_end":24625,"line_start":613,"line_end":613,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":24630,"byte_end":24633,"line_start":614,"line_end":614,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":24638,"byte_end":24689,"line_start":615,"line_end":615,"column_start":5,"column_end":56}},{"value":"/ used as `MappedMutexGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":24694,"byte_end":24776,"line_start":616,"line_end":616,"column_start":5,"column_end":87}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":24781,"byte_end":24834,"line_start":617,"line_end":617,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":24839,"byte_end":24848,"line_start":618,"line_end":618,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":184},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":25691,"byte_end":25698,"line_start":643,"line_end":643,"column_start":12,"column_end":19},"name":"try_map","qualname":"<MappedMutexGuard>::try_map","value":"pub fn try_map<U: ?Sized, F>(Self, F) -> Result<MappedMutexGuard, Self> where\nF: FnOnce(&mut T) -> Option<&mut U>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make a new `MappedMutexGuard` for a component of the\n locked data. The original guard is returned if the closure returns `None`.","sig":null,"attributes":[{"value":"/ Attempts to make a new `MappedMutexGuard` for a component of the","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":25188,"byte_end":25256,"line_start":633,"line_end":633,"column_start":5,"column_end":73}},{"value":"/ locked data. The original guard is returned if the closure returns `None`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":25261,"byte_end":25339,"line_start":634,"line_end":634,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":25344,"byte_end":25347,"line_start":635,"line_end":635,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `MappedMutexGuard` passed","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":25352,"byte_end":25415,"line_start":636,"line_end":636,"column_start":5,"column_end":68}},{"value":"/ in already locked the mutex.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":25420,"byte_end":25452,"line_start":637,"line_end":637,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":25457,"byte_end":25460,"line_start":638,"line_end":638,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":25465,"byte_end":25516,"line_start":639,"line_end":639,"column_start":5,"column_end":56}},{"value":"/ used as `MappedMutexGuard::try_map(...)`. A method would interfere with methods of","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":25521,"byte_end":25607,"line_start":640,"line_end":640,"column_start":5,"column_end":91}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":25612,"byte_end":25665,"line_start":641,"line_end":641,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":25670,"byte_end":25679,"line_start":642,"line_end":642,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":191},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":26993,"byte_end":27004,"line_start":675,"line_end":675,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<MappedMutexGuard>::unlock_fair","value":"pub fn unlock_fair(Self)","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the mutex using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Unlocks the mutex using a fair unlock protocol.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":26212,"byte_end":26263,"line_start":662,"line_end":662,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":26268,"byte_end":26271,"line_start":663,"line_end":663,"column_start":5,"column_end":8}},{"value":"/ By default, mutexes are unfair and allow the current thread to re-lock","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":26276,"byte_end":26350,"line_start":664,"line_end":664,"column_start":5,"column_end":79}},{"value":"/ the mutex before another has the chance to acquire the lock, even if","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":26355,"byte_end":26427,"line_start":665,"line_end":665,"column_start":5,"column_end":77}},{"value":"/ that thread has been blocked on the mutex for a long time. This is the","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":26432,"byte_end":26506,"line_start":666,"line_end":666,"column_start":5,"column_end":79}},{"value":"/ default because it allows much higher throughput as it avoids forcing a","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":26511,"byte_end":26586,"line_start":667,"line_end":667,"column_start":5,"column_end":80}},{"value":"/ context switch on every mutex unlock. This can result in one thread","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":26591,"byte_end":26662,"line_start":668,"line_end":668,"column_start":5,"column_end":76}},{"value":"/ acquiring a mutex many more times than other threads.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":26667,"byte_end":26724,"line_start":669,"line_end":669,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":26729,"byte_end":26732,"line_start":670,"line_end":670,"column_start":5,"column_end":8}},{"value":"/ However in some cases it can be beneficial to ensure fairness by forcing","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":26737,"byte_end":26813,"line_start":671,"line_end":671,"column_start":5,"column_end":81}},{"value":"/ the lock to pass on to a waiting thread if there is one. This is done by","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":26818,"byte_end":26894,"line_start":672,"line_end":672,"column_start":5,"column_end":81}},{"value":"/ using this method instead of dropping the `MutexGuard` normally.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":26899,"byte_end":26967,"line_start":673,"line_end":673,"column_start":5,"column_end":73}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":26972,"byte_end":26981,"line_start":674,"line_end":674,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":264},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":29465,"byte_end":29476,"line_start":38,"line_end":38,"column_start":18,"column_end":29},"name":"GetThreadId","qualname":"::remutex::GetThreadId","value":"GetThreadId","parent":null,"children":[{"krate":0,"index":265},{"krate":0,"index":266}],"decl_id":null,"docs":" Helper trait which returns a non-zero thread ID.","sig":null,"attributes":[{"value":"/ Helper trait which returns a non-zero thread ID.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":29064,"byte_end":29116,"line_start":28,"line_end":28,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":29117,"byte_end":29120,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ The simplest way to implement this trait is to return the address of a","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":29121,"byte_end":29195,"line_start":30,"line_end":30,"column_start":1,"column_end":75}},{"value":"/ thread-local variable.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":29196,"byte_end":29222,"line_start":31,"line_end":31,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":29223,"byte_end":29226,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ # Safety","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":29227,"byte_end":29239,"line_start":33,"line_end":33,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":29240,"byte_end":29243,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ Implementations of this trait must ensure that no two active threads share","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":29244,"byte_end":29322,"line_start":35,"line_end":35,"column_start":1,"column_end":79}},{"value":"/ the same thread ID. However the ID of a thread that has exited can be","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":29323,"byte_end":29396,"line_start":36,"line_end":36,"column_start":1,"column_end":74}},{"value":"/ re-used since that thread is no longer active.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":29397,"byte_end":29447,"line_start":37,"line_end":37,"column_start":1,"column_end":51}}]},{"kind":"Const","id":{"krate":0,"index":265},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":29757,"byte_end":29761,"line_start":43,"line_end":43,"column_start":11,"column_end":15},"name":"INIT","qualname":"::remutex::GetThreadId::INIT","value":"Self","parent":{"krate":0,"index":264},"children":[],"decl_id":null,"docs":" Initial value.\n","sig":null,"attributes":[{"value":"/ Initial value.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":29483,"byte_end":29501,"line_start":39,"line_end":39,"column_start":5,"column_end":23}},{"value":"allow(clippy :: declare_interior_mutable_const)","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":29698,"byte_end":29746,"line_start":42,"line_end":42,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":266},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":29872,"byte_end":29889,"line_start":47,"line_end":47,"column_start":8,"column_end":25},"name":"nonzero_thread_id","qualname":"::remutex::GetThreadId::nonzero_thread_id","value":"pub fn nonzero_thread_id(&Self) -> NonZeroUsize","parent":{"krate":0,"index":264},"children":[],"decl_id":null,"docs":" Returns a non-zero thread ID which identifies the current thread of\n execution.\n","sig":null,"attributes":[{"value":"/ Returns a non-zero thread ID which identifies the current thread of","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":29774,"byte_end":29845,"line_start":45,"line_end":45,"column_start":5,"column_end":76}},{"value":"/ execution.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":29850,"byte_end":29864,"line_start":46,"line_end":46,"column_start":5,"column_end":19}}]},{"kind":"Struct","id":{"krate":0,"index":267},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":30457,"byte_end":30474,"line_start":60,"line_end":60,"column_start":12,"column_end":29},"name":"RawReentrantMutex","qualname":"::remutex::RawReentrantMutex","value":"RawReentrantMutex {  }","parent":null,"children":[{"krate":0,"index":270},{"krate":0,"index":271},{"krate":0,"index":272},{"krate":0,"index":273}],"decl_id":null,"docs":" A raw mutex type that wraps another raw mutex to provide reentrancy.","sig":null,"attributes":[{"value":"/ A raw mutex type that wraps another raw mutex to provide reentrancy.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":29917,"byte_end":29989,"line_start":50,"line_end":50,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":29990,"byte_end":29993,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ Although this has the same methods as the [`RawMutex`] trait, it does","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":29994,"byte_end":30067,"line_start":52,"line_end":52,"column_start":1,"column_end":74}},{"value":"/ not implement it, and should not be used in the same way, since this","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":30068,"byte_end":30140,"line_start":53,"line_end":53,"column_start":1,"column_end":73}},{"value":"/ mutex can successfully acquire a lock multiple times in the same thread.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":30141,"byte_end":30217,"line_start":54,"line_end":54,"column_start":1,"column_end":77}},{"value":"/ Only use this when you know you want a raw mutex that can be locked","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":30218,"byte_end":30289,"line_start":55,"line_end":55,"column_start":1,"column_end":72}},{"value":"/ reentrantly; you probably want [`ReentrantMutex`] instead.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":30290,"byte_end":30352,"line_start":56,"line_end":56,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":30353,"byte_end":30356,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ [`RawMutex`]: trait.RawMutex.html","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":30357,"byte_end":30394,"line_start":58,"line_end":58,"column_start":1,"column_end":38}},{"value":"/ [`ReentrantMutex`]: struct.ReentrantMutex.html","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":30395,"byte_end":30445,"line_start":59,"line_end":59,"column_start":1,"column_end":51}}]},{"kind":"Const","id":{"krate":0,"index":283},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":30930,"byte_end":30934,"line_start":73,"line_end":73,"column_start":15,"column_end":19},"name":"INIT","qualname":"::remutex::RawReentrantMutex::<R, G>::INIT","value":"Self","parent":{"krate":0,"index":280},"children":[],"decl_id":null,"docs":" Initial value for an unlocked mutex.\n","sig":null,"attributes":[{"value":"/ Initial value for an unlocked mutex.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":30822,"byte_end":30862,"line_start":71,"line_end":71,"column_start":5,"column_end":45}},{"value":"allow(clippy :: declare_interior_mutable_const)","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":30867,"byte_end":30915,"line_start":72,"line_end":72,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":286},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":31870,"byte_end":31874,"line_start":103,"line_end":103,"column_start":12,"column_end":16},"name":"lock","qualname":"<RawReentrantMutex<R, G>>::lock","value":"pub fn lock(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Acquires this mutex, blocking if it's held by another thread.\n","sig":null,"attributes":[{"value":"/ Acquires this mutex, blocking if it's held by another thread.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":31779,"byte_end":31844,"line_start":101,"line_end":101,"column_start":5,"column_end":70}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":31849,"byte_end":31858,"line_start":102,"line_end":102,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":288},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":32149,"byte_end":32157,"line_start":113,"line_end":113,"column_start":12,"column_end":20},"name":"try_lock","qualname":"<RawReentrantMutex<R, G>>::try_lock","value":"pub fn try_lock(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this mutex without blocking. Returns `true`\n if the lock was successfully acquired and `false` otherwise.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire this mutex without blocking. Returns `true`","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":31987,"byte_end":32054,"line_start":110,"line_end":110,"column_start":5,"column_end":72}},{"value":"/ if the lock was successfully acquired and `false` otherwise.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":32059,"byte_end":32123,"line_start":111,"line_end":111,"column_start":5,"column_end":69}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":32128,"byte_end":32137,"line_start":112,"line_end":112,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":290},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":32516,"byte_end":32522,"line_start":124,"line_end":124,"column_start":19,"column_end":25},"name":"unlock","qualname":"<RawReentrantMutex<R, G>>::unlock","value":"pub unsafe fn unlock(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Unlocks this mutex. The inner mutex may not be unlocked if\n this mutex was acquired previously in the current thread.","sig":null,"attributes":[{"value":"/ Unlocks this mutex. The inner mutex may not be unlocked if","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":32239,"byte_end":32301,"line_start":117,"line_end":117,"column_start":5,"column_end":67}},{"value":"/ this mutex was acquired previously in the current thread.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":32306,"byte_end":32367,"line_start":118,"line_end":118,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":32372,"byte_end":32375,"line_start":119,"line_end":119,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":32380,"byte_end":32392,"line_start":120,"line_end":120,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":32397,"byte_end":32400,"line_start":121,"line_end":121,"column_start":5,"column_end":8}},{"value":"/ This method may only be called if the mutex is held by the current thread.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":32405,"byte_end":32483,"line_start":122,"line_end":122,"column_start":5,"column_end":83}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":32488,"byte_end":32497,"line_start":123,"line_end":123,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":291},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":32835,"byte_end":32844,"line_start":135,"line_end":135,"column_start":12,"column_end":21},"name":"is_locked","qualname":"<RawReentrantMutex<R, G>>::is_locked","value":"pub fn is_locked(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Checks whether the mutex is currently locked.\n","sig":null,"attributes":[{"value":"/ Checks whether the mutex is currently locked.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":32760,"byte_end":32809,"line_start":133,"line_end":133,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":32814,"byte_end":32823,"line_start":134,"line_end":134,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":295},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":33284,"byte_end":33295,"line_start":149,"line_end":149,"column_start":19,"column_end":30},"name":"unlock_fair","qualname":"<RawReentrantMutex<R, G>>::unlock_fair","value":"pub unsafe fn unlock_fair(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Unlocks this mutex using a fair unlock protocol. The inner mutex\n may not be unlocked if this mutex was acquired previously in the\n current thread.","sig":null,"attributes":[{"value":"/ Unlocks this mutex using a fair unlock protocol. The inner mutex","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":32970,"byte_end":33038,"line_start":141,"line_end":141,"column_start":5,"column_end":73}},{"value":"/ may not be unlocked if this mutex was acquired previously in the","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":33043,"byte_end":33111,"line_start":142,"line_end":142,"column_start":5,"column_end":73}},{"value":"/ current thread.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":33116,"byte_end":33135,"line_start":143,"line_end":143,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":33140,"byte_end":33143,"line_start":144,"line_end":144,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":33148,"byte_end":33160,"line_start":145,"line_end":145,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":33165,"byte_end":33168,"line_start":146,"line_end":146,"column_start":5,"column_end":8}},{"value":"/ This method may only be called if the mutex is held by the current thread.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":33173,"byte_end":33251,"line_start":147,"line_end":147,"column_start":5,"column_end":83}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":33256,"byte_end":33265,"line_start":148,"line_end":148,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":296},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":33958,"byte_end":33962,"line_start":168,"line_end":168,"column_start":19,"column_end":23},"name":"bump","qualname":"<RawReentrantMutex<R, G>>::bump","value":"pub unsafe fn bump(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Temporarily yields the mutex to a waiting thread if there is one.","sig":null,"attributes":[{"value":"/ Temporarily yields the mutex to a waiting thread if there is one.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":33538,"byte_end":33607,"line_start":158,"line_end":158,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":33612,"byte_end":33615,"line_start":159,"line_end":159,"column_start":5,"column_end":8}},{"value":"/ This method is functionally equivalent to calling `unlock_fair` followed","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":33620,"byte_end":33696,"line_start":160,"line_end":160,"column_start":5,"column_end":81}},{"value":"/ by `lock`, however it can be much more efficient in the case where there","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":33701,"byte_end":33777,"line_start":161,"line_end":161,"column_start":5,"column_end":81}},{"value":"/ are no waiting threads.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":33782,"byte_end":33809,"line_start":162,"line_end":162,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":33814,"byte_end":33817,"line_start":163,"line_end":163,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":33822,"byte_end":33834,"line_start":164,"line_end":164,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":33839,"byte_end":33842,"line_start":165,"line_end":165,"column_start":5,"column_end":8}},{"value":"/ This method may only be called if the mutex is held by the current thread.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":33847,"byte_end":33925,"line_start":166,"line_end":166,"column_start":5,"column_end":83}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":33930,"byte_end":33939,"line_start":167,"line_end":167,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":300},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":34380,"byte_end":34394,"line_start":181,"line_end":181,"column_start":12,"column_end":26},"name":"try_lock_until","qualname":"<RawReentrantMutex<R, G>>::try_lock_until","value":"pub fn try_lock_until(&Self, R::Instant) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this lock until a timeout is reached.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire this lock until a timeout is reached.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":34293,"byte_end":34354,"line_start":179,"line_end":179,"column_start":5,"column_end":66}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":34359,"byte_end":34368,"line_start":180,"line_end":180,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":302},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":34597,"byte_end":34609,"line_start":187,"line_end":187,"column_start":12,"column_end":24},"name":"try_lock_for","qualname":"<RawReentrantMutex<R, G>>::try_lock_for","value":"pub fn try_lock_for(&Self, R::Duration) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this lock until a timeout is reached.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire this lock until a timeout is reached.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":34510,"byte_end":34571,"line_start":185,"line_end":185,"column_start":5,"column_end":66}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":34576,"byte_end":34585,"line_start":186,"line_end":186,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":304},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":35197,"byte_end":35211,"line_start":203,"line_end":203,"column_start":12,"column_end":26},"name":"ReentrantMutex","qualname":"::remutex::ReentrantMutex","value":"ReentrantMutex {  }","parent":null,"children":[{"krate":0,"index":308},{"krate":0,"index":309}],"decl_id":null,"docs":" A mutex which can be recursively locked by a single thread.","sig":null,"attributes":[{"value":"/ A mutex which can be recursively locked by a single thread.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":34722,"byte_end":34785,"line_start":192,"line_end":192,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":34786,"byte_end":34789,"line_start":193,"line_end":193,"column_start":1,"column_end":4}},{"value":"/ This type is identical to `Mutex` except for the following points:","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":34790,"byte_end":34860,"line_start":194,"line_end":194,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":34861,"byte_end":34864,"line_start":195,"line_end":195,"column_start":1,"column_end":4}},{"value":"/ - Locking multiple times from the same thread will work correctly instead of","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":34865,"byte_end":34945,"line_start":196,"line_end":196,"column_start":1,"column_end":81}},{"value":"/   deadlocking.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":34946,"byte_end":34964,"line_start":197,"line_end":197,"column_start":1,"column_end":19}},{"value":"/ - `ReentrantMutexGuard` does not give mutable references to the locked data.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":34965,"byte_end":35045,"line_start":198,"line_end":198,"column_start":1,"column_end":81}},{"value":"/   Use a `RefCell` if you need this.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":35046,"byte_end":35085,"line_start":199,"line_end":199,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":35086,"byte_end":35089,"line_start":200,"line_end":200,"column_start":1,"column_end":4}},{"value":"/ See [`Mutex`](struct.Mutex.html) for more details about the underlying mutex","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":35090,"byte_end":35170,"line_start":201,"line_end":201,"column_start":1,"column_end":81}},{"value":"/ primitive.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":35171,"byte_end":35185,"line_start":202,"line_end":202,"column_start":1,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":322},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":36191,"byte_end":36194,"line_start":236,"line_end":236,"column_start":12,"column_end":15},"name":"new","qualname":"<ReentrantMutex<R, G, T>>::new","value":"pub fn new(T) -> ReentrantMutex<R, G, T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new reentrant mutex in an unlocked state ready for use.\n","sig":null,"attributes":[{"value":"/ Creates a new reentrant mutex in an unlocked state ready for use.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":36059,"byte_end":36128,"line_start":233,"line_end":233,"column_start":5,"column_end":74}},{"value":"cfg(not(feature = \"nightly\"))","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":36133,"byte_end":36165,"line_start":234,"line_end":234,"column_start":5,"column_end":37}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":36170,"byte_end":36179,"line_start":235,"line_end":235,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":323},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":36609,"byte_end":36619,"line_start":250,"line_end":250,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<ReentrantMutex<R, G, T>>::into_inner","value":"pub fn into_inner(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Consumes this mutex, returning the underlying data.\n","sig":null,"attributes":[{"value":"/ Consumes this mutex, returning the underlying data.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":36528,"byte_end":36583,"line_start":248,"line_end":248,"column_start":5,"column_end":60}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":36588,"byte_end":36597,"line_start":249,"line_end":249,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":328},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":36960,"byte_end":36969,"line_start":262,"line_end":262,"column_start":18,"column_end":27},"name":"const_new","qualname":"<ReentrantMutex<R, G, T>>::const_new","value":"pub const fn const_new(R, G, T) -> ReentrantMutex<R, G, T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new reentrant mutex based on a pre-existing raw mutex and a\n helper to get the thread ID.","sig":null,"attributes":[{"value":"/ Creates a new reentrant mutex based on a pre-existing raw mutex and a","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":36717,"byte_end":36790,"line_start":256,"line_end":256,"column_start":5,"column_end":78}},{"value":"/ helper to get the thread ID.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":36795,"byte_end":36827,"line_start":257,"line_end":257,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":36832,"byte_end":36835,"line_start":258,"line_end":258,"column_start":5,"column_end":8}},{"value":"/ This allows creating a reentrant mutex in a constant context on stable","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":36840,"byte_end":36914,"line_start":259,"line_end":259,"column_start":5,"column_end":79}},{"value":"/ Rust.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":36919,"byte_end":36928,"line_start":260,"line_end":260,"column_start":5,"column_end":14}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":36933,"byte_end":36942,"line_start":261,"line_end":261,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":334},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":38308,"byte_end":38312,"line_start":298,"line_end":298,"column_start":12,"column_end":16},"name":"lock","qualname":"<ReentrantMutex<R, G, T>>::lock","value":"pub fn lock(&Self) -> ReentrantMutexGuard<, R, G, T>","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reentrant mutex, blocking the current thread until it is able\n to do so.","sig":null,"attributes":[{"value":"/ Acquires a reentrant mutex, blocking the current thread until it is able","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":37669,"byte_end":37745,"line_start":287,"line_end":287,"column_start":5,"column_end":81}},{"value":"/ to do so.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":37750,"byte_end":37763,"line_start":288,"line_end":288,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":37768,"byte_end":37771,"line_start":289,"line_end":289,"column_start":5,"column_end":8}},{"value":"/ If the mutex is held by another thread then this function will block the","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":37776,"byte_end":37852,"line_start":290,"line_end":290,"column_start":5,"column_end":81}},{"value":"/ local thread until it is available to acquire the mutex. If the mutex is","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":37857,"byte_end":37933,"line_start":291,"line_end":291,"column_start":5,"column_end":81}},{"value":"/ already held by the current thread then this function will increment the","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":37938,"byte_end":38014,"line_start":292,"line_end":292,"column_start":5,"column_end":81}},{"value":"/ lock reference count and return immediately. Upon returning,","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":38019,"byte_end":38083,"line_start":293,"line_end":293,"column_start":5,"column_end":69}},{"value":"/ the thread is the only thread with the mutex held. An RAII guard is","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":38088,"byte_end":38159,"line_start":294,"line_end":294,"column_start":5,"column_end":76}},{"value":"/ returned to allow scoped unlock of the lock. When the guard goes out of","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":38164,"byte_end":38239,"line_start":295,"line_end":295,"column_start":5,"column_end":80}},{"value":"/ scope, the mutex will be unlocked.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":38244,"byte_end":38282,"line_start":296,"line_end":296,"column_start":5,"column_end":43}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":38287,"byte_end":38296,"line_start":297,"line_end":297,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":335},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":38778,"byte_end":38786,"line_start":312,"line_end":312,"column_start":12,"column_end":20},"name":"try_lock","qualname":"<ReentrantMutex<R, G, T>>::try_lock","value":"pub fn try_lock(&Self) -> Option<ReentrantMutexGuard<, R, G, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this lock.","sig":null,"attributes":[{"value":"/ Attempts to acquire this lock.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":38476,"byte_end":38510,"line_start":304,"line_end":304,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":38515,"byte_end":38518,"line_start":305,"line_end":305,"column_start":5,"column_end":8}},{"value":"/ If the lock could not be acquired at this time, then `None` is returned.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":38523,"byte_end":38599,"line_start":306,"line_end":306,"column_start":5,"column_end":81}},{"value":"/ Otherwise, an RAII guard is returned. The lock will be unlocked when the","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":38604,"byte_end":38680,"line_start":307,"line_end":307,"column_start":5,"column_end":81}},{"value":"/ guard is dropped.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":38685,"byte_end":38706,"line_start":308,"line_end":308,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":38711,"byte_end":38714,"line_start":309,"line_end":309,"column_start":5,"column_end":8}},{"value":"/ This function does not block.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":38719,"byte_end":38752,"line_start":310,"line_end":310,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":38757,"byte_end":38766,"line_start":311,"line_end":311,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":336},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":39280,"byte_end":39287,"line_start":326,"line_end":326,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<ReentrantMutex<R, G, T>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the underlying data.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the underlying data.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":39024,"byte_end":39079,"line_start":321,"line_end":321,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":39084,"byte_end":39087,"line_start":322,"line_end":322,"column_start":5,"column_end":8}},{"value":"/ Since this call borrows the `ReentrantMutex` mutably, no actual locking needs to","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":39092,"byte_end":39176,"line_start":323,"line_end":323,"column_start":5,"column_end":89}},{"value":"/ take place---the mutable borrow statically guarantees no locks exist.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":39181,"byte_end":39254,"line_start":324,"line_end":324,"column_start":5,"column_end":78}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":39259,"byte_end":39268,"line_start":325,"line_end":325,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":337},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":39438,"byte_end":39447,"line_start":332,"line_end":332,"column_start":12,"column_end":21},"name":"is_locked","qualname":"<ReentrantMutex<R, G, T>>::is_locked","value":"pub fn is_locked(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Checks whether the mutex is currently locked.\n","sig":null,"attributes":[{"value":"/ Checks whether the mutex is currently locked.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":39363,"byte_end":39412,"line_start":330,"line_end":330,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":39417,"byte_end":39426,"line_start":331,"line_end":331,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":338},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":40031,"byte_end":40043,"line_start":348,"line_end":348,"column_start":19,"column_end":31},"name":"force_unlock","qualname":"<ReentrantMutex<R, G, T>>::force_unlock","value":"pub unsafe fn force_unlock(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Forcibly unlocks the mutex.","sig":null,"attributes":[{"value":"/ Forcibly unlocks the mutex.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":39505,"byte_end":39536,"line_start":336,"line_end":336,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":39541,"byte_end":39544,"line_start":337,"line_end":337,"column_start":5,"column_end":8}},{"value":"/ This is useful when combined with `mem::forget` to hold a lock without","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":39549,"byte_end":39623,"line_start":338,"line_end":338,"column_start":5,"column_end":79}},{"value":"/ the need to maintain a `ReentrantMutexGuard` object alive, for example when","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":39628,"byte_end":39707,"line_start":339,"line_end":339,"column_start":5,"column_end":84}},{"value":"/ dealing with FFI.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":39712,"byte_end":39733,"line_start":340,"line_end":340,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":39738,"byte_end":39741,"line_start":341,"line_end":341,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":39746,"byte_end":39758,"line_start":342,"line_end":342,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":39763,"byte_end":39766,"line_start":343,"line_end":343,"column_start":5,"column_end":8}},{"value":"/ This method must only be called if the current thread logically owns a","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":39771,"byte_end":39845,"line_start":344,"line_end":344,"column_start":5,"column_end":79}},{"value":"/ `ReentrantMutexGuard` but that guard has be discarded using `mem::forget`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":39850,"byte_end":39928,"line_start":345,"line_end":345,"column_start":5,"column_end":83}},{"value":"/ Behavior is undefined if a mutex is unlocked when not locked.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":39933,"byte_end":39998,"line_start":346,"line_end":346,"column_start":5,"column_end":70}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":40003,"byte_end":40012,"line_start":347,"line_end":347,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":339},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":40489,"byte_end":40492,"line_start":362,"line_end":362,"column_start":19,"column_end":22},"name":"raw","qualname":"<ReentrantMutex<R, G, T>>::raw","value":"pub unsafe fn raw(&Self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Returns the underlying raw mutex object.","sig":null,"attributes":[{"value":"/ Returns the underlying raw mutex object.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":40091,"byte_end":40135,"line_start":352,"line_end":352,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":40140,"byte_end":40143,"line_start":353,"line_end":353,"column_start":5,"column_end":8}},{"value":"/ Note that you will most likely need to import the `RawMutex` trait from","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":40148,"byte_end":40223,"line_start":354,"line_end":354,"column_start":5,"column_end":80}},{"value":"/ `lock_api` to be able to call functions on the raw mutex.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":40228,"byte_end":40289,"line_start":355,"line_end":355,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":40294,"byte_end":40297,"line_start":356,"line_end":356,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":40302,"byte_end":40314,"line_start":357,"line_end":357,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":40319,"byte_end":40322,"line_start":358,"line_end":358,"column_start":5,"column_end":8}},{"value":"/ This method is unsafe because it allows unlocking a mutex while","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":40327,"byte_end":40394,"line_start":359,"line_end":359,"column_start":5,"column_end":72}},{"value":"/ still holding a reference to a `ReentrantMutexGuard`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":40399,"byte_end":40456,"line_start":360,"line_end":360,"column_start":5,"column_end":62}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":40461,"byte_end":40470,"line_start":361,"line_end":361,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":340},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":41094,"byte_end":41102,"line_start":379,"line_end":379,"column_start":12,"column_end":20},"name":"data_ptr","qualname":"<ReentrantMutex<R, G, T>>::data_ptr","value":"pub fn data_ptr(&Self) -> *mut T","parent":null,"children":[],"decl_id":null,"docs":" Returns a raw pointer to the underlying data.","sig":null,"attributes":[{"value":"/ Returns a raw pointer to the underlying data.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":40543,"byte_end":40592,"line_start":366,"line_end":366,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":40597,"byte_end":40600,"line_start":367,"line_end":367,"column_start":5,"column_end":8}},{"value":"/ This is useful when combined with `mem::forget` to hold a lock without","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":40605,"byte_end":40679,"line_start":368,"line_end":368,"column_start":5,"column_end":79}},{"value":"/ the need to maintain a `ReentrantMutexGuard` object alive, for example","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":40684,"byte_end":40758,"line_start":369,"line_end":369,"column_start":5,"column_end":79}},{"value":"/ when dealing with FFI.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":40763,"byte_end":40789,"line_start":370,"line_end":370,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":40794,"byte_end":40797,"line_start":371,"line_end":371,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":40802,"byte_end":40814,"line_start":372,"line_end":372,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":40819,"byte_end":40822,"line_start":373,"line_end":373,"column_start":5,"column_end":8}},{"value":"/ You must ensure that there are no data races when dereferencing the","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":40827,"byte_end":40898,"line_start":374,"line_end":374,"column_start":5,"column_end":76}},{"value":"/ returned pointer, for example if the current thread logically owns a","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":40903,"byte_end":40975,"line_start":375,"line_end":375,"column_start":5,"column_end":77}},{"value":"/ `ReentrantMutexGuard` but that guard has been discarded using","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":40980,"byte_end":41045,"line_start":376,"line_end":376,"column_start":5,"column_end":70}},{"value":"/ `mem::forget`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":41050,"byte_end":41068,"line_start":377,"line_end":377,"column_start":5,"column_end":23}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":41073,"byte_end":41082,"line_start":378,"line_end":378,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":345},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":41789,"byte_end":41806,"line_start":397,"line_end":397,"column_start":19,"column_end":36},"name":"force_unlock_fair","qualname":"<ReentrantMutex<R, G, T>>::force_unlock_fair","value":"pub unsafe fn force_unlock_fair(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Forcibly unlocks the mutex using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Forcibly unlocks the mutex using a fair unlock protocol.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":41234,"byte_end":41294,"line_start":385,"line_end":385,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":41299,"byte_end":41302,"line_start":386,"line_end":386,"column_start":5,"column_end":8}},{"value":"/ This is useful when combined with `mem::forget` to hold a lock without","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":41307,"byte_end":41381,"line_start":387,"line_end":387,"column_start":5,"column_end":79}},{"value":"/ the need to maintain a `ReentrantMutexGuard` object alive, for example when","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":41386,"byte_end":41465,"line_start":388,"line_end":388,"column_start":5,"column_end":84}},{"value":"/ dealing with FFI.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":41470,"byte_end":41491,"line_start":389,"line_end":389,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":41496,"byte_end":41499,"line_start":390,"line_end":390,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":41504,"byte_end":41516,"line_start":391,"line_end":391,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":41521,"byte_end":41524,"line_start":392,"line_end":392,"column_start":5,"column_end":8}},{"value":"/ This method must only be called if the current thread logically owns a","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":41529,"byte_end":41603,"line_start":393,"line_end":393,"column_start":5,"column_end":79}},{"value":"/ `ReentrantMutexGuard` but that guard has be discarded using `mem::forget`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":41608,"byte_end":41686,"line_start":394,"line_end":394,"column_start":5,"column_end":83}},{"value":"/ Behavior is undefined if a mutex is unlocked when not locked.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":41691,"byte_end":41756,"line_start":395,"line_end":395,"column_start":5,"column_end":70}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":41761,"byte_end":41770,"line_start":396,"line_end":396,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":350},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":42234,"byte_end":42246,"line_start":409,"line_end":409,"column_start":12,"column_end":24},"name":"try_lock_for","qualname":"<ReentrantMutex<R, G, T>>::try_lock_for","value":"pub fn try_lock_for(&Self, R::Duration)\n-> Option<ReentrantMutexGuard<, R, G, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this lock until a timeout is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this lock until a timeout is reached.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":41937,"byte_end":41998,"line_start":403,"line_end":403,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":42003,"byte_end":42006,"line_start":404,"line_end":404,"column_start":5,"column_end":8}},{"value":"/ If the lock could not be acquired before the timeout expired, then","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":42011,"byte_end":42081,"line_start":405,"line_end":405,"column_start":5,"column_end":75}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned. The lock will","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":42086,"byte_end":42161,"line_start":406,"line_end":406,"column_start":5,"column_end":80}},{"value":"/ be unlocked when the guard is dropped.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":42166,"byte_end":42208,"line_start":407,"line_end":407,"column_start":5,"column_end":47}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":42213,"byte_end":42222,"line_start":408,"line_end":408,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":351},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":42814,"byte_end":42828,"line_start":424,"line_end":424,"column_start":12,"column_end":26},"name":"try_lock_until","qualname":"<ReentrantMutex<R, G, T>>::try_lock_until","value":"pub fn try_lock_until(&Self, R::Instant)\n-> Option<ReentrantMutexGuard<, R, G, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this lock until a timeout is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this lock until a timeout is reached.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":42517,"byte_end":42578,"line_start":418,"line_end":418,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":42583,"byte_end":42586,"line_start":419,"line_end":419,"column_start":5,"column_end":8}},{"value":"/ If the lock could not be acquired before the timeout expired, then","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":42591,"byte_end":42661,"line_start":420,"line_end":420,"column_start":5,"column_end":75}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned. The lock will","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":42666,"byte_end":42741,"line_start":421,"line_end":421,"column_start":5,"column_end":80}},{"value":"/ be unlocked when the guard is dropped.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":42746,"byte_end":42788,"line_start":422,"line_end":422,"column_start":5,"column_end":47}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":42793,"byte_end":42802,"line_start":423,"line_end":423,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":371},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":45325,"byte_end":45344,"line_start":508,"line_end":508,"column_start":12,"column_end":31},"name":"ReentrantMutexGuard","qualname":"::remutex::ReentrantMutexGuard","value":"ReentrantMutexGuard {  }","parent":null,"children":[{"krate":0,"index":376},{"krate":0,"index":377}],"decl_id":null,"docs":" An RAII implementation of a \"scoped lock\" of a reentrant mutex. When this structure\n is dropped (falls out of scope), the lock will be unlocked.","sig":null,"attributes":[{"value":"/ An RAII implementation of a \"scoped lock\" of a reentrant mutex. When this structure","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":44982,"byte_end":45069,"line_start":502,"line_end":502,"column_start":1,"column_end":88}},{"value":"/ is dropped (falls out of scope), the lock will be unlocked.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":45070,"byte_end":45133,"line_start":503,"line_end":503,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":45134,"byte_end":45137,"line_start":504,"line_end":504,"column_start":1,"column_end":4}},{"value":"/ The data protected by the mutex can be accessed through this guard via its","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":45138,"byte_end":45216,"line_start":505,"line_end":505,"column_start":1,"column_end":79}},{"value":"/ `Deref` implementation.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":45217,"byte_end":45244,"line_start":506,"line_end":506,"column_start":1,"column_end":28}},{"value":"must_use = \"if unused the ReentrantMutex will immediately unlock\"","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":45245,"byte_end":45313,"line_start":507,"line_end":507,"column_start":1,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":388},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":45805,"byte_end":45812,"line_start":520,"line_end":520,"column_start":12,"column_end":19},"name":"remutex","qualname":"<ReentrantMutexGuard>::remutex","value":"pub fn remutex(&Self) -> &'a ReentrantMutex<R, G, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the original `ReentrantMutex` object.\n","sig":null,"attributes":[{"value":"/ Returns a reference to the original `ReentrantMutex` object.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":45729,"byte_end":45793,"line_start":519,"line_end":519,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":389},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":46318,"byte_end":46321,"line_start":533,"line_end":533,"column_start":12,"column_end":15},"name":"map","qualname":"<ReentrantMutexGuard>::map","value":"pub fn map<U: ?Sized, F>(Self, F) -> MappedReentrantMutexGuard where\nF: FnOnce(&T) -> &U","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `MappedReentrantMutexGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"/ Makes a new `MappedReentrantMutexGuard` for a component of the locked data.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":45885,"byte_end":45964,"line_start":524,"line_end":524,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":45969,"byte_end":45972,"line_start":525,"line_end":525,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `ReentrantMutexGuard` passed","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":45977,"byte_end":46043,"line_start":526,"line_end":526,"column_start":5,"column_end":71}},{"value":"/ in already locked the mutex.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":46048,"byte_end":46080,"line_start":527,"line_end":527,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":46085,"byte_end":46088,"line_start":528,"line_end":528,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":46093,"byte_end":46144,"line_start":529,"line_end":529,"column_start":5,"column_end":56}},{"value":"/ used as `ReentrantMutexGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":46149,"byte_end":46234,"line_start":530,"line_end":530,"column_start":5,"column_end":90}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":46239,"byte_end":46292,"line_start":531,"line_end":531,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":46297,"byte_end":46306,"line_start":532,"line_end":532,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":392},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":47191,"byte_end":47198,"line_start":557,"line_end":557,"column_start":12,"column_end":19},"name":"try_map","qualname":"<ReentrantMutexGuard>::try_map","value":"pub fn try_map<U: ?Sized, F>(Self, F)\n-> Result<MappedReentrantMutexGuard, Self> where F: FnOnce(&mut T) ->\nOption<&mut U>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make  a new `MappedReentrantMutexGuard` for a component of the\n locked data. The original guard is return if the closure returns `None`.","sig":null,"attributes":[{"value":"/ Attempts to make  a new `MappedReentrantMutexGuard` for a component of the","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":46678,"byte_end":46756,"line_start":547,"line_end":547,"column_start":5,"column_end":83}},{"value":"/ locked data. The original guard is return if the closure returns `None`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":46761,"byte_end":46837,"line_start":548,"line_end":548,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":46842,"byte_end":46845,"line_start":549,"line_end":549,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `ReentrantMutexGuard` passed","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":46850,"byte_end":46916,"line_start":550,"line_end":550,"column_start":5,"column_end":71}},{"value":"/ in already locked the mutex.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":46921,"byte_end":46953,"line_start":551,"line_end":551,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":46958,"byte_end":46961,"line_start":552,"line_end":552,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":46966,"byte_end":47017,"line_start":553,"line_end":553,"column_start":5,"column_end":56}},{"value":"/ used as `ReentrantMutexGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":47022,"byte_end":47107,"line_start":554,"line_end":554,"column_start":5,"column_end":90}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":47112,"byte_end":47165,"line_start":555,"line_end":555,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":47170,"byte_end":47179,"line_start":556,"line_end":556,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":395},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":47927,"byte_end":47935,"line_start":582,"line_end":582,"column_start":12,"column_end":20},"name":"unlocked","qualname":"<ReentrantMutexGuard>::unlocked","value":"pub fn unlocked<F, U>(&mut Self, F) -> U where F: FnOnce() -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the mutex to execute the given function.","sig":null,"attributes":[{"value":"/ Temporarily unlocks the mutex to execute the given function.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":47701,"byte_end":47765,"line_start":577,"line_end":577,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":47770,"byte_end":47773,"line_start":578,"line_end":578,"column_start":5,"column_end":8}},{"value":"/ This is safe because `&mut` guarantees that there exist no other","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":47778,"byte_end":47846,"line_start":579,"line_end":579,"column_start":5,"column_end":73}},{"value":"/ references to the data protected by the mutex.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":47851,"byte_end":47901,"line_start":580,"line_end":580,"column_start":5,"column_end":55}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":47906,"byte_end":47915,"line_start":581,"line_end":581,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":403},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":49096,"byte_end":49107,"line_start":611,"line_end":611,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<ReentrantMutexGuard>::unlock_fair","value":"pub fn unlock_fair(Self)","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the mutex using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Unlocks the mutex using a fair unlock protocol.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":48306,"byte_end":48357,"line_start":598,"line_end":598,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":48362,"byte_end":48365,"line_start":599,"line_end":599,"column_start":5,"column_end":8}},{"value":"/ By default, mutexes are unfair and allow the current thread to re-lock","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":48370,"byte_end":48444,"line_start":600,"line_end":600,"column_start":5,"column_end":79}},{"value":"/ the mutex before another has the chance to acquire the lock, even if","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":48449,"byte_end":48521,"line_start":601,"line_end":601,"column_start":5,"column_end":77}},{"value":"/ that thread has been blocked on the mutex for a long time. This is the","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":48526,"byte_end":48600,"line_start":602,"line_end":602,"column_start":5,"column_end":79}},{"value":"/ default because it allows much higher throughput as it avoids forcing a","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":48605,"byte_end":48680,"line_start":603,"line_end":603,"column_start":5,"column_end":80}},{"value":"/ context switch on every mutex unlock. This can result in one thread","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":48685,"byte_end":48756,"line_start":604,"line_end":604,"column_start":5,"column_end":76}},{"value":"/ acquiring a mutex many more times than other threads.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":48761,"byte_end":48818,"line_start":605,"line_end":605,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":48823,"byte_end":48826,"line_start":606,"line_end":606,"column_start":5,"column_end":8}},{"value":"/ However in some cases it can be beneficial to ensure fairness by forcing","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":48831,"byte_end":48907,"line_start":607,"line_end":607,"column_start":5,"column_end":81}},{"value":"/ the lock to pass on to a waiting thread if there is one. This is done by","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":48912,"byte_end":48988,"line_start":608,"line_end":608,"column_start":5,"column_end":81}},{"value":"/ using this method instead of dropping the `ReentrantMutexGuard` normally.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":48993,"byte_end":49070,"line_start":609,"line_end":609,"column_start":5,"column_end":82}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":49075,"byte_end":49084,"line_start":610,"line_end":610,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":404},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":49573,"byte_end":49586,"line_start":626,"line_end":626,"column_start":12,"column_end":25},"name":"unlocked_fair","qualname":"<ReentrantMutexGuard>::unlocked_fair","value":"pub fn unlocked_fair<F, U>(&mut Self, F) -> U where F: FnOnce() -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the mutex to execute the given function.","sig":null,"attributes":[{"value":"/ Temporarily unlocks the mutex to execute the given function.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":49285,"byte_end":49349,"line_start":619,"line_end":619,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":49354,"byte_end":49357,"line_start":620,"line_end":620,"column_start":5,"column_end":8}},{"value":"/ The mutex is unlocked a fair unlock protocol.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":49362,"byte_end":49411,"line_start":621,"line_end":621,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":49416,"byte_end":49419,"line_start":622,"line_end":622,"column_start":5,"column_end":8}},{"value":"/ This is safe because `&mut` guarantees that there exist no other","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":49424,"byte_end":49492,"line_start":623,"line_end":623,"column_start":5,"column_end":73}},{"value":"/ references to the data protected by the mutex.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":49497,"byte_end":49547,"line_start":624,"line_end":624,"column_start":5,"column_end":55}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":49552,"byte_end":49561,"line_start":625,"line_end":625,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":407},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":50149,"byte_end":50153,"line_start":644,"line_end":644,"column_start":12,"column_end":16},"name":"bump","qualname":"<ReentrantMutexGuard>::bump","value":"pub fn bump(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Temporarily yields the mutex to a waiting thread if there is one.","sig":null,"attributes":[{"value":"/ Temporarily yields the mutex to a waiting thread if there is one.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":49852,"byte_end":49921,"line_start":638,"line_end":638,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":49926,"byte_end":49929,"line_start":639,"line_end":639,"column_start":5,"column_end":8}},{"value":"/ This method is functionally equivalent to calling `unlock_fair` followed","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":49934,"byte_end":50010,"line_start":640,"line_end":640,"column_start":5,"column_end":81}},{"value":"/ by `lock`, however it can be much more efficient in the case where there","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":50015,"byte_end":50091,"line_start":641,"line_end":641,"column_start":5,"column_end":81}},{"value":"/ are no waiting threads.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":50096,"byte_end":50123,"line_start":642,"line_end":642,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":50128,"byte_end":50137,"line_start":643,"line_end":643,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":433},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":51927,"byte_end":51952,"line_start":704,"line_end":704,"column_start":12,"column_end":37},"name":"MappedReentrantMutexGuard","qualname":"::remutex::MappedReentrantMutexGuard","value":"MappedReentrantMutexGuard {  }","parent":null,"children":[{"krate":0,"index":438},{"krate":0,"index":439},{"krate":0,"index":440}],"decl_id":null,"docs":" An RAII mutex guard returned by `ReentrantMutexGuard::map`, which can point to a\n subfield of the protected data.","sig":null,"attributes":[{"value":"/ An RAII mutex guard returned by `ReentrantMutexGuard::map`, which can point to a","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":51455,"byte_end":51539,"line_start":696,"line_end":696,"column_start":1,"column_end":85}},{"value":"/ subfield of the protected data.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":51540,"byte_end":51575,"line_start":697,"line_end":697,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":51576,"byte_end":51579,"line_start":698,"line_end":698,"column_start":1,"column_end":4}},{"value":"/ The main difference between `MappedReentrantMutexGuard` and `ReentrantMutexGuard` is that the","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":51580,"byte_end":51677,"line_start":699,"line_end":699,"column_start":1,"column_end":98}},{"value":"/ former doesn't support temporarily unlocking and re-locking, since that","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":51678,"byte_end":51753,"line_start":700,"line_end":700,"column_start":1,"column_end":76}},{"value":"/ could introduce soundness issues if the locked object is modified by another","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":51754,"byte_end":51834,"line_start":701,"line_end":701,"column_start":1,"column_end":81}},{"value":"/ thread.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":51835,"byte_end":51846,"line_start":702,"line_end":702,"column_start":1,"column_end":12}},{"value":"must_use = \"if unused the ReentrantMutex will immediately unlock\"","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":51847,"byte_end":51915,"line_start":703,"line_end":703,"column_start":1,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":451},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":52799,"byte_end":52802,"line_start":727,"line_end":727,"column_start":12,"column_end":15},"name":"map","qualname":"<MappedReentrantMutexGuard>::map","value":"pub fn map<U: ?Sized, F>(Self, F) -> MappedReentrantMutexGuard where\nF: FnOnce(&T) -> &U","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `MappedReentrantMutexGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"/ Makes a new `MappedReentrantMutexGuard` for a component of the locked data.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":52354,"byte_end":52433,"line_start":718,"line_end":718,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":52438,"byte_end":52441,"line_start":719,"line_end":719,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `MappedReentrantMutexGuard` passed","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":52446,"byte_end":52518,"line_start":720,"line_end":720,"column_start":5,"column_end":77}},{"value":"/ in already locked the mutex.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":52523,"byte_end":52555,"line_start":721,"line_end":721,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":52560,"byte_end":52563,"line_start":722,"line_end":722,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":52568,"byte_end":52619,"line_start":723,"line_end":723,"column_start":5,"column_end":56}},{"value":"/ used as `MappedReentrantMutexGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":52624,"byte_end":52715,"line_start":724,"line_end":724,"column_start":5,"column_end":96}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":52720,"byte_end":52773,"line_start":725,"line_end":725,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":52778,"byte_end":52787,"line_start":726,"line_end":726,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":454},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":53661,"byte_end":53668,"line_start":751,"line_end":751,"column_start":12,"column_end":19},"name":"try_map","qualname":"<MappedReentrantMutexGuard>::try_map","value":"pub fn try_map<U: ?Sized, F>(Self, F)\n-> Result<MappedReentrantMutexGuard, Self> where F: FnOnce(&T) -> Option<&U>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make  a new `MappedReentrantMutexGuard` for a component of the\n locked data. The original guard is return if the closure returns `None`.","sig":null,"attributes":[{"value":"/ Attempts to make  a new `MappedReentrantMutexGuard` for a component of the","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":53136,"byte_end":53214,"line_start":741,"line_end":741,"column_start":5,"column_end":83}},{"value":"/ locked data. The original guard is return if the closure returns `None`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":53219,"byte_end":53295,"line_start":742,"line_end":742,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":53300,"byte_end":53303,"line_start":743,"line_end":743,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `MappedReentrantMutexGuard` passed","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":53308,"byte_end":53380,"line_start":744,"line_end":744,"column_start":5,"column_end":77}},{"value":"/ in already locked the mutex.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":53385,"byte_end":53417,"line_start":745,"line_end":745,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":53422,"byte_end":53425,"line_start":746,"line_end":746,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":53430,"byte_end":53481,"line_start":747,"line_end":747,"column_start":5,"column_end":56}},{"value":"/ used as `MappedReentrantMutexGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":53486,"byte_end":53577,"line_start":748,"line_end":748,"column_start":5,"column_end":96}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":53582,"byte_end":53635,"line_start":749,"line_end":749,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":53640,"byte_end":53649,"line_start":750,"line_end":750,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":462},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":55041,"byte_end":55052,"line_start":788,"line_end":788,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<MappedReentrantMutexGuard>::unlock_fair","value":"pub fn unlock_fair(Self)","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the mutex using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Unlocks the mutex using a fair unlock protocol.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":54251,"byte_end":54302,"line_start":775,"line_end":775,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":54307,"byte_end":54310,"line_start":776,"line_end":776,"column_start":5,"column_end":8}},{"value":"/ By default, mutexes are unfair and allow the current thread to re-lock","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":54315,"byte_end":54389,"line_start":777,"line_end":777,"column_start":5,"column_end":79}},{"value":"/ the mutex before another has the chance to acquire the lock, even if","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":54394,"byte_end":54466,"line_start":778,"line_end":778,"column_start":5,"column_end":77}},{"value":"/ that thread has been blocked on the mutex for a long time. This is the","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":54471,"byte_end":54545,"line_start":779,"line_end":779,"column_start":5,"column_end":79}},{"value":"/ default because it allows much higher throughput as it avoids forcing a","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":54550,"byte_end":54625,"line_start":780,"line_end":780,"column_start":5,"column_end":80}},{"value":"/ context switch on every mutex unlock. This can result in one thread","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":54630,"byte_end":54701,"line_start":781,"line_end":781,"column_start":5,"column_end":76}},{"value":"/ acquiring a mutex many more times than other threads.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":54706,"byte_end":54763,"line_start":782,"line_end":782,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":54768,"byte_end":54771,"line_start":783,"line_end":783,"column_start":5,"column_end":8}},{"value":"/ However in some cases it can be beneficial to ensure fairness by forcing","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":54776,"byte_end":54852,"line_start":784,"line_end":784,"column_start":5,"column_end":81}},{"value":"/ the lock to pass on to a waiting thread if there is one. This is done by","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":54857,"byte_end":54933,"line_start":785,"line_end":785,"column_start":5,"column_end":81}},{"value":"/ using this method instead of dropping the `ReentrantMutexGuard` normally.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":54938,"byte_end":55015,"line_start":786,"line_end":786,"column_start":5,"column_end":82}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":55020,"byte_end":55029,"line_start":787,"line_end":787,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":509},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":57449,"byte_end":57458,"line_start":31,"line_end":31,"column_start":18,"column_end":27},"name":"RawRwLock","qualname":"::rwlock::RawRwLock","value":"RawRwLock","parent":null,"children":[{"krate":0,"index":510},{"krate":0,"index":511},{"krate":0,"index":512},{"krate":0,"index":513},{"krate":0,"index":514},{"krate":0,"index":515},{"krate":0,"index":516},{"krate":0,"index":517},{"krate":0,"index":518}],"decl_id":null,"docs":" Basic operations for a reader-writer lock.","sig":null,"attributes":[{"value":"/ Basic operations for a reader-writer lock.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":57002,"byte_end":57048,"line_start":20,"line_end":20,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":57049,"byte_end":57052,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ Types implementing this trait can be used by `RwLock` to form a safe and","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":57053,"byte_end":57129,"line_start":22,"line_end":22,"column_start":1,"column_end":77}},{"value":"/ fully-functioning `RwLock` type.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":57130,"byte_end":57166,"line_start":23,"line_end":23,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":57167,"byte_end":57170,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ # Safety","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":57171,"byte_end":57183,"line_start":25,"line_end":25,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":57184,"byte_end":57187,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ Implementations of this trait must ensure that the `RwLock` is actually","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":57188,"byte_end":57263,"line_start":27,"line_end":27,"column_start":1,"column_end":76}},{"value":"/ exclusive: an exclusive lock can't be acquired while an exclusive or shared","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":57264,"byte_end":57343,"line_start":28,"line_end":28,"column_start":1,"column_end":80}},{"value":"/ lock exists, and a shared lock can't be acquire while an exclusive lock","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":57344,"byte_end":57419,"line_start":29,"line_end":29,"column_start":1,"column_end":76}},{"value":"/ exists.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":57420,"byte_end":57431,"line_start":30,"line_end":30,"column_start":1,"column_end":12}}]},{"kind":"Const","id":{"krate":0,"index":510},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":57764,"byte_end":57768,"line_start":36,"line_end":36,"column_start":11,"column_end":15},"name":"INIT","qualname":"::rwlock::RawRwLock::INIT","value":"Self","parent":{"krate":0,"index":509},"children":[],"decl_id":null,"docs":" Initial value for an unlocked `RwLock`.\n","sig":null,"attributes":[{"value":"/ Initial value for an unlocked `RwLock`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":57465,"byte_end":57508,"line_start":32,"line_end":32,"column_start":5,"column_end":48}},{"value":"allow(clippy :: declare_interior_mutable_const)","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":57705,"byte_end":57753,"line_start":35,"line_end":35,"column_start":5,"column_end":53}}]},{"kind":"Type","id":{"krate":0,"index":511},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":57933,"byte_end":57944,"line_start":40,"line_end":40,"column_start":10,"column_end":21},"name":"GuardMarker","qualname":"::rwlock::RawRwLock::GuardMarker","value":"type GuardMarker;","parent":{"krate":0,"index":509},"children":[],"decl_id":null,"docs":" Marker type which determines whether a lock guard should be `Send`. Use\n one of the `GuardSend` or `GuardNoSend` helper types here.\n","sig":null,"attributes":[{"value":"/ Marker type which determines whether a lock guard should be `Send`. Use","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":57781,"byte_end":57856,"line_start":38,"line_end":38,"column_start":5,"column_end":80}},{"value":"/ one of the `GuardSend` or `GuardNoSend` helper types here.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":57861,"byte_end":57923,"line_start":39,"line_end":39,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":512},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":58041,"byte_end":58052,"line_start":43,"line_end":43,"column_start":8,"column_end":19},"name":"lock_shared","qualname":"::rwlock::RawRwLock::lock_shared","value":"pub fn lock_shared(&Self)","parent":{"krate":0,"index":509},"children":[],"decl_id":null,"docs":" Acquires a shared lock, blocking the current thread until it is able to do so.\n","sig":null,"attributes":[{"value":"/ Acquires a shared lock, blocking the current thread until it is able to do so.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":57951,"byte_end":58033,"line_start":42,"line_end":42,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":513},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":58129,"byte_end":58144,"line_start":46,"line_end":46,"column_start":8,"column_end":23},"name":"try_lock_shared","qualname":"::rwlock::RawRwLock::try_lock_shared","value":"pub fn try_lock_shared(&Self) -> bool","parent":{"krate":0,"index":509},"children":[],"decl_id":null,"docs":" Attempts to acquire a shared lock without blocking.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire a shared lock without blocking.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":58066,"byte_end":58121,"line_start":45,"line_end":45,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":514},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":58329,"byte_end":58342,"line_start":53,"line_end":53,"column_start":15,"column_end":28},"name":"unlock_shared","qualname":"::rwlock::RawRwLock::unlock_shared","value":"pub unsafe fn unlock_shared(&Self)","parent":{"krate":0,"index":509},"children":[],"decl_id":null,"docs":" Releases a shared lock.","sig":null,"attributes":[{"value":"/ Releases a shared lock.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":58166,"byte_end":58193,"line_start":48,"line_end":48,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":58198,"byte_end":58201,"line_start":49,"line_end":49,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":58206,"byte_end":58218,"line_start":50,"line_end":50,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":58223,"byte_end":58226,"line_start":51,"line_end":51,"column_start":5,"column_end":8}},{"value":"/ This method may only be called if a shared lock is held in the current context.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":58231,"byte_end":58314,"line_start":52,"line_end":52,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":515},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":58450,"byte_end":58464,"line_start":56,"line_end":56,"column_start":8,"column_end":22},"name":"lock_exclusive","qualname":"::rwlock::RawRwLock::lock_exclusive","value":"pub fn lock_exclusive(&Self)","parent":{"krate":0,"index":509},"children":[],"decl_id":null,"docs":" Acquires an exclusive lock, blocking the current thread until it is able to do so.\n","sig":null,"attributes":[{"value":"/ Acquires an exclusive lock, blocking the current thread until it is able to do so.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":58356,"byte_end":58442,"line_start":55,"line_end":55,"column_start":5,"column_end":91}}]},{"kind":"Method","id":{"krate":0,"index":516},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":58545,"byte_end":58563,"line_start":59,"line_end":59,"column_start":8,"column_end":26},"name":"try_lock_exclusive","qualname":"::rwlock::RawRwLock::try_lock_exclusive","value":"pub fn try_lock_exclusive(&Self) -> bool","parent":{"krate":0,"index":509},"children":[],"decl_id":null,"docs":" Attempts to acquire an exclusive lock without blocking.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire an exclusive lock without blocking.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":58478,"byte_end":58537,"line_start":58,"line_end":58,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":517},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":58756,"byte_end":58772,"line_start":66,"line_end":66,"column_start":15,"column_end":31},"name":"unlock_exclusive","qualname":"::rwlock::RawRwLock::unlock_exclusive","value":"pub unsafe fn unlock_exclusive(&Self)","parent":{"krate":0,"index":509},"children":[],"decl_id":null,"docs":" Releases an exclusive lock.","sig":null,"attributes":[{"value":"/ Releases an exclusive lock.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":58585,"byte_end":58616,"line_start":61,"line_end":61,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":58621,"byte_end":58624,"line_start":62,"line_end":62,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":58629,"byte_end":58641,"line_start":63,"line_end":63,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":58646,"byte_end":58649,"line_start":64,"line_end":64,"column_start":5,"column_end":8}},{"value":"/ This method may only be called if an exclusive lock is held in the current context.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":58654,"byte_end":58741,"line_start":65,"line_end":65,"column_start":5,"column_end":92}}]},{"kind":"Method","id":{"krate":0,"index":518},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":58867,"byte_end":58876,"line_start":70,"line_end":70,"column_start":8,"column_end":17},"name":"is_locked","qualname":"::rwlock::RawRwLock::is_locked","value":"pub fn is_locked(&Self) -> bool","parent":{"krate":0,"index":509},"children":[],"decl_id":null,"docs":" Checks if this `RwLock` is currently locked in any way.\n","sig":null,"attributes":[{"value":"/ Checks if this `RwLock` is currently locked in any way.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":58786,"byte_end":58845,"line_start":68,"line_end":68,"column_start":5,"column_end":64}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":58850,"byte_end":58859,"line_start":69,"line_end":69,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":519},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":59537,"byte_end":59550,"line_start":88,"line_end":88,"column_start":18,"column_end":31},"name":"RawRwLockFair","qualname":"::rwlock::RawRwLockFair","value":"RawRwLockFair: RawRwLock","parent":null,"children":[{"krate":0,"index":520},{"krate":0,"index":521},{"krate":0,"index":522},{"krate":0,"index":523}],"decl_id":null,"docs":" Additional methods for RwLocks which support fair unlocking.","sig":null,"attributes":[{"value":"/ Additional methods for RwLocks which support fair unlocking.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":59157,"byte_end":59221,"line_start":82,"line_end":82,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":59222,"byte_end":59225,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"/ Fair unlocking means that a lock is handed directly over to the next waiting","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":59226,"byte_end":59306,"line_start":84,"line_end":84,"column_start":1,"column_end":81}},{"value":"/ thread if there is one, without giving other threads the opportunity to","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":59307,"byte_end":59382,"line_start":85,"line_end":85,"column_start":1,"column_end":76}},{"value":"/ \"steal\" the lock in the meantime. This is typically slower than unfair","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":59383,"byte_end":59457,"line_start":86,"line_end":86,"column_start":1,"column_end":75}},{"value":"/ unlocking, but may be necessary in certain circumstances.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":59458,"byte_end":59519,"line_start":87,"line_end":87,"column_start":1,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":520},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":59760,"byte_end":59778,"line_start":94,"line_end":94,"column_start":15,"column_end":33},"name":"unlock_shared_fair","qualname":"::rwlock::RawRwLockFair::unlock_shared_fair","value":"pub unsafe fn unlock_shared_fair(&Self)","parent":{"krate":0,"index":519},"children":[],"decl_id":null,"docs":" Releases a shared lock using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Releases a shared lock using a fair unlock protocol.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":59568,"byte_end":59624,"line_start":89,"line_end":89,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":59629,"byte_end":59632,"line_start":90,"line_end":90,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":59637,"byte_end":59649,"line_start":91,"line_end":91,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":59654,"byte_end":59657,"line_start":92,"line_end":92,"column_start":5,"column_end":8}},{"value":"/ This method may only be called if a shared lock is held in the current context.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":59662,"byte_end":59745,"line_start":93,"line_end":93,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":521},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":59992,"byte_end":60013,"line_start":101,"line_end":101,"column_start":15,"column_end":36},"name":"unlock_exclusive_fair","qualname":"::rwlock::RawRwLockFair::unlock_exclusive_fair","value":"pub unsafe fn unlock_exclusive_fair(&Self)","parent":{"krate":0,"index":519},"children":[],"decl_id":null,"docs":" Releases an exclusive lock using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Releases an exclusive lock using a fair unlock protocol.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":59792,"byte_end":59852,"line_start":96,"line_end":96,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":59857,"byte_end":59860,"line_start":97,"line_end":97,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":59865,"byte_end":59877,"line_start":98,"line_end":98,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":59882,"byte_end":59885,"line_start":99,"line_end":99,"column_start":5,"column_end":8}},{"value":"/ This method may only be called if an exclusive lock is held in the current context.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":59890,"byte_end":59977,"line_start":100,"line_end":100,"column_start":5,"column_end":92}}]},{"kind":"Method","id":{"krate":0,"index":522},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":60452,"byte_end":60463,"line_start":112,"line_end":112,"column_start":15,"column_end":26},"name":"bump_shared","qualname":"::rwlock::RawRwLockFair::bump_shared","value":"pub unsafe fn bump_shared(&Self)","parent":{"krate":0,"index":519},"children":[],"decl_id":null,"docs":" Temporarily yields a shared lock to a waiting thread if there is one.","sig":null,"attributes":[{"value":"/ Temporarily yields a shared lock to a waiting thread if there is one.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":60027,"byte_end":60100,"line_start":103,"line_end":103,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":60105,"byte_end":60108,"line_start":104,"line_end":104,"column_start":5,"column_end":8}},{"value":"/ This method is functionally equivalent to calling `unlock_shared_fair` followed","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":60113,"byte_end":60196,"line_start":105,"line_end":105,"column_start":5,"column_end":88}},{"value":"/ by `lock_shared`, however it can be much more efficient in the case where there","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":60201,"byte_end":60284,"line_start":106,"line_end":106,"column_start":5,"column_end":88}},{"value":"/ are no waiting threads.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":60289,"byte_end":60316,"line_start":107,"line_end":107,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":60321,"byte_end":60324,"line_start":108,"line_end":108,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":60329,"byte_end":60341,"line_start":109,"line_end":109,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":60346,"byte_end":60349,"line_start":110,"line_end":110,"column_start":5,"column_end":8}},{"value":"/ This method may only be called if a shared lock is held in the current context.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":60354,"byte_end":60437,"line_start":111,"line_end":111,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":523},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":60986,"byte_end":61000,"line_start":126,"line_end":126,"column_start":15,"column_end":29},"name":"bump_exclusive","qualname":"::rwlock::RawRwLockFair::bump_exclusive","value":"pub unsafe fn bump_exclusive(&Self)","parent":{"krate":0,"index":519},"children":[],"decl_id":null,"docs":" Temporarily yields an exclusive lock to a waiting thread if there is one.","sig":null,"attributes":[{"value":"/ Temporarily yields an exclusive lock to a waiting thread if there is one.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":60547,"byte_end":60624,"line_start":117,"line_end":117,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":60629,"byte_end":60632,"line_start":118,"line_end":118,"column_start":5,"column_end":8}},{"value":"/ This method is functionally equivalent to calling `unlock_exclusive_fair` followed","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":60637,"byte_end":60723,"line_start":119,"line_end":119,"column_start":5,"column_end":91}},{"value":"/ by `lock_exclusive`, however it can be much more efficient in the case where there","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":60728,"byte_end":60814,"line_start":120,"line_end":120,"column_start":5,"column_end":91}},{"value":"/ are no waiting threads.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":60819,"byte_end":60846,"line_start":121,"line_end":121,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":60851,"byte_end":60854,"line_start":122,"line_end":122,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":60859,"byte_end":60871,"line_start":123,"line_end":123,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":60876,"byte_end":60879,"line_start":124,"line_end":124,"column_start":5,"column_end":8}},{"value":"/ This method may only be called if an exclusive lock is held in the current context.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":60884,"byte_end":60971,"line_start":125,"line_end":125,"column_start":5,"column_end":92}}]},{"kind":"Trait","id":{"krate":0,"index":524},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":61217,"byte_end":61235,"line_start":134,"line_end":134,"column_start":18,"column_end":36},"name":"RawRwLockDowngrade","qualname":"::rwlock::RawRwLockDowngrade","value":"RawRwLockDowngrade: RawRwLock","parent":null,"children":[{"krate":0,"index":525}],"decl_id":null,"docs":" Additional methods for RwLocks which support atomically downgrading an\n exclusive lock to a shared lock.\n","sig":null,"attributes":[{"value":"/ Additional methods for RwLocks which support atomically downgrading an","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":61088,"byte_end":61162,"line_start":132,"line_end":132,"column_start":1,"column_end":75}},{"value":"/ exclusive lock to a shared lock.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":61163,"byte_end":61199,"line_start":133,"line_end":133,"column_start":1,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":525},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":61534,"byte_end":61543,"line_start":141,"line_end":141,"column_start":15,"column_end":24},"name":"downgrade","qualname":"::rwlock::RawRwLockDowngrade::downgrade","value":"pub unsafe fn downgrade(&Self)","parent":{"krate":0,"index":524},"children":[],"decl_id":null,"docs":" Atomically downgrades an exclusive lock into a shared lock without\n allowing any thread to take an exclusive lock in the meantime.","sig":null,"attributes":[{"value":"/ Atomically downgrades an exclusive lock into a shared lock without","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":61253,"byte_end":61323,"line_start":135,"line_end":135,"column_start":5,"column_end":75}},{"value":"/ allowing any thread to take an exclusive lock in the meantime.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":61328,"byte_end":61394,"line_start":136,"line_end":136,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":61399,"byte_end":61402,"line_start":137,"line_end":137,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":61407,"byte_end":61419,"line_start":138,"line_end":138,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":61424,"byte_end":61427,"line_start":139,"line_end":139,"column_start":5,"column_end":8}},{"value":"/ This method may only be called if an exclusive lock is held in the current context.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":61432,"byte_end":61519,"line_start":140,"line_end":140,"column_start":5,"column_end":92}}]},{"kind":"Trait","id":{"krate":0,"index":526},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":61785,"byte_end":61799,"line_start":148,"line_end":148,"column_start":18,"column_end":32},"name":"RawRwLockTimed","qualname":"::rwlock::RawRwLockTimed","value":"RawRwLockTimed: RawRwLock","parent":null,"children":[{"krate":0,"index":527},{"krate":0,"index":528},{"krate":0,"index":529},{"krate":0,"index":530},{"krate":0,"index":531},{"krate":0,"index":532}],"decl_id":null,"docs":" Additional methods for RwLocks which support locking with timeouts.","sig":null,"attributes":[{"value":"/ Additional methods for RwLocks which support locking with timeouts.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":61555,"byte_end":61626,"line_start":144,"line_end":144,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":61627,"byte_end":61630,"line_start":145,"line_end":145,"column_start":1,"column_end":4}},{"value":"/ The `Duration` and `Instant` types are specified as associated types so that","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":61631,"byte_end":61711,"line_start":146,"line_end":146,"column_start":1,"column_end":81}},{"value":"/ this trait is usable even in `no_std` environments.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":61712,"byte_end":61767,"line_start":147,"line_end":147,"column_start":1,"column_end":56}}]},{"kind":"Type","id":{"krate":0,"index":527},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":61869,"byte_end":61877,"line_start":150,"line_end":150,"column_start":10,"column_end":18},"name":"Duration","qualname":"::rwlock::RawRwLockTimed::Duration","value":"type Duration;","parent":{"krate":0,"index":526},"children":[],"decl_id":null,"docs":" Duration type used for `try_lock_for`.\n","sig":null,"attributes":[{"value":"/ Duration type used for `try_lock_for`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":61817,"byte_end":61859,"line_start":149,"line_end":149,"column_start":5,"column_end":47}}]},{"kind":"Type","id":{"krate":0,"index":528},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":61937,"byte_end":61944,"line_start":153,"line_end":153,"column_start":10,"column_end":17},"name":"Instant","qualname":"::rwlock::RawRwLockTimed::Instant","value":"type Instant;","parent":{"krate":0,"index":526},"children":[],"decl_id":null,"docs":" Instant type used for `try_lock_until`.\n","sig":null,"attributes":[{"value":"/ Instant type used for `try_lock_until`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":61884,"byte_end":61927,"line_start":152,"line_end":152,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":529},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":62024,"byte_end":62043,"line_start":156,"line_end":156,"column_start":8,"column_end":27},"name":"try_lock_shared_for","qualname":"::rwlock::RawRwLockTimed::try_lock_shared_for","value":"pub fn try_lock_shared_for(&Self, Self::Duration) -> bool","parent":{"krate":0,"index":526},"children":[],"decl_id":null,"docs":" Attempts to acquire a shared lock until a timeout is reached.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire a shared lock until a timeout is reached.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":61951,"byte_end":62016,"line_start":155,"line_end":155,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":530},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":62163,"byte_end":62184,"line_start":159,"line_end":159,"column_start":8,"column_end":29},"name":"try_lock_shared_until","qualname":"::rwlock::RawRwLockTimed::try_lock_shared_until","value":"pub fn try_lock_shared_until(&Self, Self::Instant) -> bool","parent":{"krate":0,"index":526},"children":[],"decl_id":null,"docs":" Attempts to acquire a shared lock until a timeout is reached.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire a shared lock until a timeout is reached.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":62090,"byte_end":62155,"line_start":158,"line_end":158,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":531},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":62307,"byte_end":62329,"line_start":162,"line_end":162,"column_start":8,"column_end":30},"name":"try_lock_exclusive_for","qualname":"::rwlock::RawRwLockTimed::try_lock_exclusive_for","value":"pub fn try_lock_exclusive_for(&Self, Self::Duration) -> bool","parent":{"krate":0,"index":526},"children":[],"decl_id":null,"docs":" Attempts to acquire an exclusive lock until a timeout is reached.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire an exclusive lock until a timeout is reached.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":62230,"byte_end":62299,"line_start":161,"line_end":161,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":532},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":62453,"byte_end":62477,"line_start":165,"line_end":165,"column_start":8,"column_end":32},"name":"try_lock_exclusive_until","qualname":"::rwlock::RawRwLockTimed::try_lock_exclusive_until","value":"pub fn try_lock_exclusive_until(&Self, Self::Instant) -> bool","parent":{"krate":0,"index":526},"children":[],"decl_id":null,"docs":" Attempts to acquire an exclusive lock until a timeout is reached.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire an exclusive lock until a timeout is reached.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":62376,"byte_end":62445,"line_start":164,"line_end":164,"column_start":5,"column_end":74}}]},{"kind":"Trait","id":{"krate":0,"index":533},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":62910,"byte_end":62928,"line_start":175,"line_end":175,"column_start":18,"column_end":36},"name":"RawRwLockRecursive","qualname":"::rwlock::RawRwLockRecursive","value":"RawRwLockRecursive: RawRwLock","parent":null,"children":[{"krate":0,"index":534},{"krate":0,"index":535}],"decl_id":null,"docs":" Additional methods for RwLocks which support recursive read locks.","sig":null,"attributes":[{"value":"/ Additional methods for RwLocks which support recursive read locks.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":62521,"byte_end":62591,"line_start":168,"line_end":168,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":62592,"byte_end":62595,"line_start":169,"line_end":169,"column_start":1,"column_end":4}},{"value":"/ These are guaranteed to succeed without blocking if","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":62596,"byte_end":62651,"line_start":170,"line_end":170,"column_start":1,"column_end":56}},{"value":"/ another read lock is held at the time of the call. This allows a thread","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":62652,"byte_end":62727,"line_start":171,"line_end":171,"column_start":1,"column_end":76}},{"value":"/ to recursively lock a `RwLock`. However using this method can cause","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":62728,"byte_end":62799,"line_start":172,"line_end":172,"column_start":1,"column_end":72}},{"value":"/ writers to starve since readers no longer block if a writer is waiting","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":62800,"byte_end":62874,"line_start":173,"line_end":173,"column_start":1,"column_end":75}},{"value":"/ for the lock.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":62875,"byte_end":62892,"line_start":174,"line_end":174,"column_start":1,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":534},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":63029,"byte_end":63050,"line_start":177,"line_end":177,"column_start":8,"column_end":29},"name":"lock_shared_recursive","qualname":"::rwlock::RawRwLockRecursive::lock_shared_recursive","value":"pub fn lock_shared_recursive(&Self)","parent":{"krate":0,"index":533},"children":[],"decl_id":null,"docs":" Acquires a shared lock without deadlocking in case of a recursive lock.\n","sig":null,"attributes":[{"value":"/ Acquires a shared lock without deadlocking in case of a recursive lock.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":62946,"byte_end":63021,"line_start":176,"line_end":176,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":535},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":63158,"byte_end":63183,"line_start":180,"line_end":180,"column_start":8,"column_end":33},"name":"try_lock_shared_recursive","qualname":"::rwlock::RawRwLockRecursive::try_lock_shared_recursive","value":"pub fn try_lock_shared_recursive(&Self) -> bool","parent":{"krate":0,"index":533},"children":[],"decl_id":null,"docs":" Attempts to acquire a shared lock without deadlocking in case of a recursive lock.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire a shared lock without deadlocking in case of a recursive lock.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":63064,"byte_end":63150,"line_start":179,"line_end":179,"column_start":5,"column_end":91}}]},{"kind":"Trait","id":{"krate":0,"index":536},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":63304,"byte_end":63327,"line_start":184,"line_end":184,"column_start":18,"column_end":41},"name":"RawRwLockRecursiveTimed","qualname":"::rwlock::RawRwLockRecursiveTimed","value":"RawRwLockRecursiveTimed: RawRwLockRecursive + RawRwLockTimed","parent":null,"children":[{"krate":0,"index":537},{"krate":0,"index":538}],"decl_id":null,"docs":" Additional methods for RwLocks which support recursive read locks and timeouts.\n","sig":null,"attributes":[{"value":"/ Additional methods for RwLocks which support recursive read locks and timeouts.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":63203,"byte_end":63286,"line_start":183,"line_end":183,"column_start":1,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":537},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":63501,"byte_end":63530,"line_start":187,"line_end":187,"column_start":8,"column_end":37},"name":"try_lock_shared_recursive_for","qualname":"::rwlock::RawRwLockRecursiveTimed::try_lock_shared_recursive_for","value":"pub fn try_lock_shared_recursive_for(&Self, Self::Duration) -> bool","parent":{"krate":0,"index":536},"children":[],"decl_id":null,"docs":" Attempts to acquire a shared lock until a timeout is reached, without\n deadlocking in case of a recursive lock.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire a shared lock until a timeout is reached, without","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":63371,"byte_end":63444,"line_start":185,"line_end":185,"column_start":5,"column_end":78}},{"value":"/ deadlocking in case of a recursive lock.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":63449,"byte_end":63493,"line_start":186,"line_end":186,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":538},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":63707,"byte_end":63738,"line_start":191,"line_end":191,"column_start":8,"column_end":39},"name":"try_lock_shared_recursive_until","qualname":"::rwlock::RawRwLockRecursiveTimed::try_lock_shared_recursive_until","value":"pub fn try_lock_shared_recursive_until(&Self, Self::Instant) -> bool","parent":{"krate":0,"index":536},"children":[],"decl_id":null,"docs":" Attempts to acquire a shared lock until a timeout is reached, without\n deadlocking in case of a recursive lock.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire a shared lock until a timeout is reached, without","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":63577,"byte_end":63650,"line_start":189,"line_end":189,"column_start":5,"column_end":78}},{"value":"/ deadlocking in case of a recursive lock.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":63655,"byte_end":63699,"line_start":190,"line_end":190,"column_start":5,"column_end":49}}]},{"kind":"Trait","id":{"krate":0,"index":539},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":64114,"byte_end":64130,"line_start":200,"line_end":200,"column_start":18,"column_end":34},"name":"RawRwLockUpgrade","qualname":"::rwlock::RawRwLockUpgrade","value":"RawRwLockUpgrade: RawRwLock","parent":null,"children":[{"krate":0,"index":540},{"krate":0,"index":541},{"krate":0,"index":542},{"krate":0,"index":543},{"krate":0,"index":544}],"decl_id":null,"docs":" Additional methods for RwLocks which support atomically upgrading a shared\n lock to an exclusive lock.","sig":null,"attributes":[{"value":"/ Additional methods for RwLocks which support atomically upgrading a shared","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":63782,"byte_end":63860,"line_start":194,"line_end":194,"column_start":1,"column_end":79}},{"value":"/ lock to an exclusive lock.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":63861,"byte_end":63891,"line_start":195,"line_end":195,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":63892,"byte_end":63895,"line_start":196,"line_end":196,"column_start":1,"column_end":4}},{"value":"/ This requires acquiring a special \"upgradable read lock\" instead of a","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":63896,"byte_end":63969,"line_start":197,"line_end":197,"column_start":1,"column_end":74}},{"value":"/ normal shared lock. There may only be one upgradable lock at any time,","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":63970,"byte_end":64044,"line_start":198,"line_end":198,"column_start":1,"column_end":75}},{"value":"/ otherwise deadlocks could occur when upgrading.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":64045,"byte_end":64096,"line_start":199,"line_end":199,"column_start":1,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":540},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":64243,"byte_end":64258,"line_start":202,"line_end":202,"column_start":8,"column_end":23},"name":"lock_upgradable","qualname":"::rwlock::RawRwLockUpgrade::lock_upgradable","value":"pub fn lock_upgradable(&Self)","parent":{"krate":0,"index":539},"children":[],"decl_id":null,"docs":" Acquires an upgradable lock, blocking the current thread until it is able to do so.\n","sig":null,"attributes":[{"value":"/ Acquires an upgradable lock, blocking the current thread until it is able to do so.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":64148,"byte_end":64235,"line_start":201,"line_end":201,"column_start":5,"column_end":92}}]},{"kind":"Method","id":{"krate":0,"index":541},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":64340,"byte_end":64359,"line_start":205,"line_end":205,"column_start":8,"column_end":27},"name":"try_lock_upgradable","qualname":"::rwlock::RawRwLockUpgrade::try_lock_upgradable","value":"pub fn try_lock_upgradable(&Self) -> bool","parent":{"krate":0,"index":539},"children":[],"decl_id":null,"docs":" Attempts to acquire an upgradable lock without blocking.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire an upgradable lock without blocking.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":64272,"byte_end":64332,"line_start":204,"line_end":204,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":542},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":64554,"byte_end":64571,"line_start":212,"line_end":212,"column_start":15,"column_end":32},"name":"unlock_upgradable","qualname":"::rwlock::RawRwLockUpgrade::unlock_upgradable","value":"pub unsafe fn unlock_upgradable(&Self)","parent":{"krate":0,"index":539},"children":[],"decl_id":null,"docs":" Releases an upgradable lock.","sig":null,"attributes":[{"value":"/ Releases an upgradable lock.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":64381,"byte_end":64413,"line_start":207,"line_end":207,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":64418,"byte_end":64421,"line_start":208,"line_end":208,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":64426,"byte_end":64438,"line_start":209,"line_end":209,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":64443,"byte_end":64446,"line_start":210,"line_end":210,"column_start":5,"column_end":8}},{"value":"/ This method may only be called if an upgradable lock is held in the current context.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":64451,"byte_end":64539,"line_start":211,"line_end":211,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":543},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":64779,"byte_end":64786,"line_start":219,"line_end":219,"column_start":15,"column_end":22},"name":"upgrade","qualname":"::rwlock::RawRwLockUpgrade::upgrade","value":"pub unsafe fn upgrade(&Self)","parent":{"krate":0,"index":539},"children":[],"decl_id":null,"docs":" Upgrades an upgradable lock to an exclusive lock.","sig":null,"attributes":[{"value":"/ Upgrades an upgradable lock to an exclusive lock.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":64585,"byte_end":64638,"line_start":214,"line_end":214,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":64643,"byte_end":64646,"line_start":215,"line_end":215,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":64651,"byte_end":64663,"line_start":216,"line_end":216,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":64668,"byte_end":64671,"line_start":217,"line_end":217,"column_start":5,"column_end":8}},{"value":"/ This method may only be called if an upgradable lock is held in the current context.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":64676,"byte_end":64764,"line_start":218,"line_end":218,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":544},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":65030,"byte_end":65041,"line_start":227,"line_end":227,"column_start":15,"column_end":26},"name":"try_upgrade","qualname":"::rwlock::RawRwLockUpgrade::try_upgrade","value":"pub unsafe fn try_upgrade(&Self) -> bool","parent":{"krate":0,"index":539},"children":[],"decl_id":null,"docs":" Attempts to upgrade an upgradable lock to an exclusive lock without\n blocking.","sig":null,"attributes":[{"value":"/ Attempts to upgrade an upgradable lock to an exclusive lock without","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":64800,"byte_end":64871,"line_start":221,"line_end":221,"column_start":5,"column_end":76}},{"value":"/ blocking.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":64876,"byte_end":64889,"line_start":222,"line_end":222,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":64894,"byte_end":64897,"line_start":223,"line_end":223,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":64902,"byte_end":64914,"line_start":224,"line_end":224,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":64919,"byte_end":64922,"line_start":225,"line_end":225,"column_start":5,"column_end":8}},{"value":"/ This method may only be called if an upgradable lock is held in the current context.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":64927,"byte_end":65015,"line_start":226,"line_end":226,"column_start":5,"column_end":93}}]},{"kind":"Trait","id":{"krate":0,"index":545},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":65168,"byte_end":65188,"line_start":232,"line_end":232,"column_start":18,"column_end":38},"name":"RawRwLockUpgradeFair","qualname":"::rwlock::RawRwLockUpgradeFair","value":"RawRwLockUpgradeFair: RawRwLockUpgrade + RawRwLockFair","parent":null,"children":[{"krate":0,"index":546},{"krate":0,"index":547}],"decl_id":null,"docs":" Additional methods for RwLocks which support upgradable locks and fair\n unlocking.\n","sig":null,"attributes":[{"value":"/ Additional methods for RwLocks which support upgradable locks and fair","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":65061,"byte_end":65135,"line_start":230,"line_end":230,"column_start":1,"column_end":75}},{"value":"/ unlocking.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":65136,"byte_end":65150,"line_start":231,"line_end":231,"column_start":1,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":546},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":65431,"byte_end":65453,"line_start":238,"line_end":238,"column_start":15,"column_end":37},"name":"unlock_upgradable_fair","qualname":"::rwlock::RawRwLockUpgradeFair::unlock_upgradable_fair","value":"pub unsafe fn unlock_upgradable_fair(&Self)","parent":{"krate":0,"index":545},"children":[],"decl_id":null,"docs":" Releases an upgradable lock using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Releases an upgradable lock using a fair unlock protocol.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":65229,"byte_end":65290,"line_start":233,"line_end":233,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":65295,"byte_end":65298,"line_start":234,"line_end":234,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":65303,"byte_end":65315,"line_start":235,"line_end":235,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":65320,"byte_end":65323,"line_start":236,"line_end":236,"column_start":5,"column_end":8}},{"value":"/ This method may only be called if an upgradable lock is held in the current context.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":65328,"byte_end":65416,"line_start":237,"line_end":237,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":547},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":65910,"byte_end":65925,"line_start":249,"line_end":249,"column_start":15,"column_end":30},"name":"bump_upgradable","qualname":"::rwlock::RawRwLockUpgradeFair::bump_upgradable","value":"pub unsafe fn bump_upgradable(&Self)","parent":{"krate":0,"index":545},"children":[],"decl_id":null,"docs":" Temporarily yields an upgradable lock to a waiting thread if there is one.","sig":null,"attributes":[{"value":"/ Temporarily yields an upgradable lock to a waiting thread if there is one.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":65467,"byte_end":65545,"line_start":240,"line_end":240,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":65550,"byte_end":65553,"line_start":241,"line_end":241,"column_start":5,"column_end":8}},{"value":"/ This method is functionally equivalent to calling `unlock_upgradable_fair` followed","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":65558,"byte_end":65645,"line_start":242,"line_end":242,"column_start":5,"column_end":92}},{"value":"/ by `lock_upgradable`, however it can be much more efficient in the case where there","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":65650,"byte_end":65737,"line_start":243,"line_end":243,"column_start":5,"column_end":92}},{"value":"/ are no waiting threads.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":65742,"byte_end":65769,"line_start":244,"line_end":244,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":65774,"byte_end":65777,"line_start":245,"line_end":245,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":65782,"byte_end":65794,"line_start":246,"line_end":246,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":65799,"byte_end":65802,"line_start":247,"line_end":247,"column_start":5,"column_end":8}},{"value":"/ This method may only be called if an upgradable lock is held in the current context.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":65807,"byte_end":65895,"line_start":248,"line_end":248,"column_start":5,"column_end":93}}]},{"kind":"Trait","id":{"krate":0,"index":548},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":66124,"byte_end":66149,"line_start":257,"line_end":257,"column_start":18,"column_end":43},"name":"RawRwLockUpgradeDowngrade","qualname":"::rwlock::RawRwLockUpgradeDowngrade","value":"RawRwLockUpgradeDowngrade: RawRwLockUpgrade + RawRwLockDowngrade","parent":null,"children":[{"krate":0,"index":549},{"krate":0,"index":550}],"decl_id":null,"docs":" Additional methods for RwLocks which support upgradable locks and lock\n downgrading.\n","sig":null,"attributes":[{"value":"/ Additional methods for RwLocks which support upgradable locks and lock","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":66015,"byte_end":66089,"line_start":255,"line_end":255,"column_start":1,"column_end":75}},{"value":"/ downgrading.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":66090,"byte_end":66106,"line_start":256,"line_end":256,"column_start":1,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":549},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":66387,"byte_end":66407,"line_start":263,"line_end":263,"column_start":15,"column_end":35},"name":"downgrade_upgradable","qualname":"::rwlock::RawRwLockUpgradeDowngrade::downgrade_upgradable","value":"pub unsafe fn downgrade_upgradable(&Self)","parent":{"krate":0,"index":548},"children":[],"decl_id":null,"docs":" Downgrades an upgradable lock to a shared lock.","sig":null,"attributes":[{"value":"/ Downgrades an upgradable lock to a shared lock.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":66195,"byte_end":66246,"line_start":258,"line_end":258,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":66251,"byte_end":66254,"line_start":259,"line_end":259,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":66259,"byte_end":66271,"line_start":260,"line_end":260,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":66276,"byte_end":66279,"line_start":261,"line_end":261,"column_start":5,"column_end":8}},{"value":"/ This method may only be called if an upgradable lock is held in the current context.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":66284,"byte_end":66372,"line_start":262,"line_end":262,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":550},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":66616,"byte_end":66639,"line_start":270,"line_end":270,"column_start":15,"column_end":38},"name":"downgrade_to_upgradable","qualname":"::rwlock::RawRwLockUpgradeDowngrade::downgrade_to_upgradable","value":"pub unsafe fn downgrade_to_upgradable(&Self)","parent":{"krate":0,"index":548},"children":[],"decl_id":null,"docs":" Downgrades an exclusive lock to an upgradable lock.","sig":null,"attributes":[{"value":"/ Downgrades an exclusive lock to an upgradable lock.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":66421,"byte_end":66476,"line_start":265,"line_end":265,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":66481,"byte_end":66484,"line_start":266,"line_end":266,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":66489,"byte_end":66501,"line_start":267,"line_end":267,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":66506,"byte_end":66509,"line_start":268,"line_end":268,"column_start":5,"column_end":8}},{"value":"/ This method may only be called if an exclusive lock is held in the current context.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":66514,"byte_end":66601,"line_start":269,"line_end":269,"column_start":5,"column_end":92}}]},{"kind":"Trait","id":{"krate":0,"index":551},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":66765,"byte_end":66786,"line_start":275,"line_end":275,"column_start":18,"column_end":39},"name":"RawRwLockUpgradeTimed","qualname":"::rwlock::RawRwLockUpgradeTimed","value":"RawRwLockUpgradeTimed: RawRwLockUpgrade + RawRwLockTimed","parent":null,"children":[{"krate":0,"index":552},{"krate":0,"index":553},{"krate":0,"index":554},{"krate":0,"index":555}],"decl_id":null,"docs":" Additional methods for RwLocks which support upgradable locks and locking\n with timeouts.\n","sig":null,"attributes":[{"value":"/ Additional methods for RwLocks which support upgradable locks and locking","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":66651,"byte_end":66728,"line_start":273,"line_end":273,"column_start":1,"column_end":78}},{"value":"/ with timeouts.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":66729,"byte_end":66747,"line_start":274,"line_end":274,"column_start":1,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":552},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":66906,"byte_end":66929,"line_start":277,"line_end":277,"column_start":8,"column_end":31},"name":"try_lock_upgradable_for","qualname":"::rwlock::RawRwLockUpgradeTimed::try_lock_upgradable_for","value":"pub fn try_lock_upgradable_for(&Self, Self::Duration) -> bool","parent":{"krate":0,"index":551},"children":[],"decl_id":null,"docs":" Attempts to acquire an upgradable lock until a timeout is reached.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire an upgradable lock until a timeout is reached.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":66828,"byte_end":66898,"line_start":276,"line_end":276,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":553},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":67054,"byte_end":67079,"line_start":280,"line_end":280,"column_start":8,"column_end":33},"name":"try_lock_upgradable_until","qualname":"::rwlock::RawRwLockUpgradeTimed::try_lock_upgradable_until","value":"pub fn try_lock_upgradable_until(&Self, Self::Instant) -> bool","parent":{"krate":0,"index":551},"children":[],"decl_id":null,"docs":" Attempts to acquire an upgradable lock until a timeout is reached.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire an upgradable lock until a timeout is reached.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":66976,"byte_end":67046,"line_start":279,"line_end":279,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":554},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":67365,"byte_end":67380,"line_start":288,"line_end":288,"column_start":15,"column_end":30},"name":"try_upgrade_for","qualname":"::rwlock::RawRwLockUpgradeTimed::try_upgrade_for","value":"pub unsafe fn try_upgrade_for(&Self, Self::Duration) -> bool","parent":{"krate":0,"index":551},"children":[],"decl_id":null,"docs":" Attempts to upgrade an upgradable lock to an exclusive lock until a\n timeout is reached.","sig":null,"attributes":[{"value":"/ Attempts to upgrade an upgradable lock to an exclusive lock until a","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":67125,"byte_end":67196,"line_start":282,"line_end":282,"column_start":5,"column_end":76}},{"value":"/ timeout is reached.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":67201,"byte_end":67224,"line_start":283,"line_end":283,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":67229,"byte_end":67232,"line_start":284,"line_end":284,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":67237,"byte_end":67249,"line_start":285,"line_end":285,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":67254,"byte_end":67257,"line_start":286,"line_end":286,"column_start":5,"column_end":8}},{"value":"/ This method may only be called if an upgradable lock is held in the current context.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":67262,"byte_end":67350,"line_start":287,"line_end":287,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":555},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":67667,"byte_end":67684,"line_start":296,"line_end":296,"column_start":15,"column_end":32},"name":"try_upgrade_until","qualname":"::rwlock::RawRwLockUpgradeTimed::try_upgrade_until","value":"pub unsafe fn try_upgrade_until(&Self, Self::Instant) -> bool","parent":{"krate":0,"index":551},"children":[],"decl_id":null,"docs":" Attempts to upgrade an upgradable lock to an exclusive lock until a\n timeout is reached.","sig":null,"attributes":[{"value":"/ Attempts to upgrade an upgradable lock to an exclusive lock until a","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":67427,"byte_end":67498,"line_start":290,"line_end":290,"column_start":5,"column_end":76}},{"value":"/ timeout is reached.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":67503,"byte_end":67526,"line_start":291,"line_end":291,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":67531,"byte_end":67534,"line_start":292,"line_end":292,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":67539,"byte_end":67551,"line_start":293,"line_end":293,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":67556,"byte_end":67559,"line_start":294,"line_end":294,"column_start":5,"column_end":8}},{"value":"/ This method may only be called if an upgradable lock is held in the current context.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":67564,"byte_end":67652,"line_start":295,"line_end":295,"column_start":5,"column_end":93}}]},{"kind":"Struct","id":{"krate":0,"index":556},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":68436,"byte_end":68442,"line_start":311,"line_end":311,"column_start":12,"column_end":18},"name":"RwLock","qualname":"::rwlock::RwLock","value":"RwLock {  }","parent":null,"children":[{"krate":0,"index":559},{"krate":0,"index":560}],"decl_id":null,"docs":" A reader-writer lock","sig":null,"attributes":[{"value":"/ A reader-writer lock","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":67728,"byte_end":67752,"line_start":299,"line_end":299,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":67753,"byte_end":67756,"line_start":300,"line_end":300,"column_start":1,"column_end":4}},{"value":"/ This type of lock allows a number of readers or at most one writer at any","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":67757,"byte_end":67834,"line_start":301,"line_end":301,"column_start":1,"column_end":78}},{"value":"/ point in time. The write portion of this lock typically allows modification","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":67835,"byte_end":67914,"line_start":302,"line_end":302,"column_start":1,"column_end":80}},{"value":"/ of the underlying data (exclusive access) and the read portion of this lock","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":67915,"byte_end":67994,"line_start":303,"line_end":303,"column_start":1,"column_end":80}},{"value":"/ typically allows for read-only access (shared access).","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":67995,"byte_end":68053,"line_start":304,"line_end":304,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":68054,"byte_end":68057,"line_start":305,"line_end":305,"column_start":1,"column_end":4}},{"value":"/ The type parameter `T` represents the data that this lock protects. It is","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":68058,"byte_end":68135,"line_start":306,"line_end":306,"column_start":1,"column_end":78}},{"value":"/ required that `T` satisfies `Send` to be shared across threads and `Sync` to","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":68136,"byte_end":68216,"line_start":307,"line_end":307,"column_start":1,"column_end":81}},{"value":"/ allow concurrent access through readers. The RAII guards returned from the","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":68217,"byte_end":68295,"line_start":308,"line_end":308,"column_start":1,"column_end":79}},{"value":"/ locking methods implement `Deref` (and `DerefMut` for the `write` methods)","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":68296,"byte_end":68374,"line_start":309,"line_end":309,"column_start":1,"column_end":79}},{"value":"/ to allow access to the contained of the lock.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":68375,"byte_end":68424,"line_start":310,"line_end":310,"column_start":1,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":570},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":69717,"byte_end":69720,"line_start":362,"line_end":362,"column_start":12,"column_end":15},"name":"new","qualname":"<RwLock<R, T>>::new","value":"pub fn new(T) -> RwLock<R, T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new instance of an `RwLock<T>` which is unlocked.\n","sig":null,"attributes":[{"value":"/ Creates a new instance of an `RwLock<T>` which is unlocked.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":69591,"byte_end":69654,"line_start":359,"line_end":359,"column_start":5,"column_end":68}},{"value":"cfg(not(feature = \"nightly\"))","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":69659,"byte_end":69691,"line_start":360,"line_end":360,"column_start":5,"column_end":37}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":69696,"byte_end":69705,"line_start":361,"line_end":361,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":571},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":69963,"byte_end":69973,"line_start":372,"line_end":372,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<RwLock<R, T>>::into_inner","value":"pub fn into_inner(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Consumes this `RwLock`, returning the underlying data.\n","sig":null,"attributes":[{"value":"/ Consumes this `RwLock`, returning the underlying data.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":69851,"byte_end":69909,"line_start":369,"line_end":369,"column_start":5,"column_end":63}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":69914,"byte_end":69923,"line_start":370,"line_end":370,"column_start":5,"column_end":14}},{"value":"allow(unused_unsafe)","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":69928,"byte_end":69951,"line_start":371,"line_end":371,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":575},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":70293,"byte_end":70302,"line_start":384,"line_end":384,"column_start":18,"column_end":27},"name":"const_new","qualname":"<RwLock<R, T>>::const_new","value":"pub const fn const_new(R, T) -> RwLock<R, T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new new instance of an `RwLock<T>` based on a pre-existing\n `RawRwLock<T>`.","sig":null,"attributes":[{"value":"/ Creates a new new instance of an `RwLock<T>` based on a pre-existing","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":70068,"byte_end":70140,"line_start":378,"line_end":378,"column_start":5,"column_end":77}},{"value":"/ `RawRwLock<T>`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":70145,"byte_end":70164,"line_start":379,"line_end":379,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":70169,"byte_end":70172,"line_start":380,"line_end":380,"column_start":5,"column_end":8}},{"value":"/ This allows creating a `RwLock<T>` in a constant context on stable","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":70177,"byte_end":70247,"line_start":381,"line_end":381,"column_start":5,"column_end":75}},{"value":"/ Rust.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":70252,"byte_end":70261,"line_start":382,"line_end":382,"column_start":5,"column_end":14}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":70266,"byte_end":70275,"line_start":383,"line_end":383,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":581},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":71629,"byte_end":71633,"line_start":428,"line_end":428,"column_start":12,"column_end":16},"name":"read","qualname":"<RwLock<R, T>>::read","value":"pub fn read(&Self) -> RwLockReadGuard<, R, T>","parent":null,"children":[],"decl_id":null,"docs":" Locks this `RwLock` with shared read access, blocking the current thread\n until it can be acquired.","sig":null,"attributes":[{"value":"/ Locks this `RwLock` with shared read access, blocking the current thread","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":71021,"byte_end":71097,"line_start":415,"line_end":415,"column_start":5,"column_end":81}},{"value":"/ until it can be acquired.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":71102,"byte_end":71131,"line_start":416,"line_end":416,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":71136,"byte_end":71139,"line_start":417,"line_end":417,"column_start":5,"column_end":8}},{"value":"/ The calling thread will be blocked until there are no more writers which","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":71144,"byte_end":71220,"line_start":418,"line_end":418,"column_start":5,"column_end":81}},{"value":"/ hold the lock. There may be other readers currently inside the lock when","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":71225,"byte_end":71301,"line_start":419,"line_end":419,"column_start":5,"column_end":81}},{"value":"/ this method returns.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":71306,"byte_end":71330,"line_start":420,"line_end":420,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":71335,"byte_end":71338,"line_start":421,"line_end":421,"column_start":5,"column_end":8}},{"value":"/ Note that attempts to recursively acquire a read lock on a `RwLock` when","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":71343,"byte_end":71419,"line_start":422,"line_end":422,"column_start":5,"column_end":81}},{"value":"/ the current thread already holds one may result in a deadlock.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":71424,"byte_end":71490,"line_start":423,"line_end":423,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":71495,"byte_end":71498,"line_start":424,"line_end":424,"column_start":5,"column_end":8}},{"value":"/ Returns an RAII guard which will release this thread's shared access","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":71503,"byte_end":71575,"line_start":425,"line_end":425,"column_start":5,"column_end":77}},{"value":"/ once it is dropped.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":71580,"byte_end":71603,"line_start":426,"line_end":426,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":71608,"byte_end":71617,"line_start":427,"line_end":427,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":582},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":72136,"byte_end":72144,"line_start":442,"line_end":442,"column_start":12,"column_end":20},"name":"try_read","qualname":"<RwLock<R, T>>::try_read","value":"pub fn try_read(&Self) -> Option<RwLockReadGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with shared read access.","sig":null,"attributes":[{"value":"/ Attempts to acquire this `RwLock` with shared read access.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":71802,"byte_end":71864,"line_start":434,"line_end":434,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":71869,"byte_end":71872,"line_start":435,"line_end":435,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted at this time, then `None` is returned.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":71877,"byte_end":71954,"line_start":436,"line_end":436,"column_start":5,"column_end":82}},{"value":"/ Otherwise, an RAII guard is returned which will release the shared access","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":71959,"byte_end":72036,"line_start":437,"line_end":437,"column_start":5,"column_end":82}},{"value":"/ when it is dropped.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":72041,"byte_end":72064,"line_start":438,"line_end":438,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":72069,"byte_end":72072,"line_start":439,"line_end":439,"column_start":5,"column_end":8}},{"value":"/ This function does not block.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":72077,"byte_end":72110,"line_start":440,"line_end":440,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":72115,"byte_end":72124,"line_start":441,"line_end":441,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":583},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":72763,"byte_end":72768,"line_start":460,"line_end":460,"column_start":12,"column_end":17},"name":"write","qualname":"<RwLock<R, T>>::write","value":"pub fn write(&Self) -> RwLockWriteGuard<, R, T>","parent":null,"children":[],"decl_id":null,"docs":" Locks this `RwLock` with exclusive write access, blocking the current\n thread until it can be acquired.","sig":null,"attributes":[{"value":"/ Locks this `RwLock` with exclusive write access, blocking the current","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":72387,"byte_end":72460,"line_start":451,"line_end":451,"column_start":5,"column_end":78}},{"value":"/ thread until it can be acquired.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":72465,"byte_end":72501,"line_start":452,"line_end":452,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":72506,"byte_end":72509,"line_start":453,"line_end":453,"column_start":5,"column_end":8}},{"value":"/ This function will not return while other writers or other readers","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":72514,"byte_end":72584,"line_start":454,"line_end":454,"column_start":5,"column_end":75}},{"value":"/ currently have access to the lock.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":72589,"byte_end":72627,"line_start":455,"line_end":455,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":72632,"byte_end":72635,"line_start":456,"line_end":456,"column_start":5,"column_end":8}},{"value":"/ Returns an RAII guard which will drop the write access of this `RwLock`","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":72640,"byte_end":72715,"line_start":457,"line_end":457,"column_start":5,"column_end":80}},{"value":"/ when dropped.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":72720,"byte_end":72737,"line_start":458,"line_end":458,"column_start":5,"column_end":22}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":72742,"byte_end":72751,"line_start":459,"line_end":459,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":584},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":73267,"byte_end":73276,"line_start":474,"line_end":474,"column_start":12,"column_end":21},"name":"try_write","qualname":"<RwLock<R, T>>::try_write","value":"pub fn try_write(&Self) -> Option<RwLockWriteGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to lock this `RwLock` with exclusive write access.","sig":null,"attributes":[{"value":"/ Attempts to lock this `RwLock` with exclusive write access.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":72942,"byte_end":73005,"line_start":466,"line_end":466,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":73010,"byte_end":73013,"line_start":467,"line_end":467,"column_start":5,"column_end":8}},{"value":"/ If the lock could not be acquired at this time, then `None` is returned.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":73018,"byte_end":73094,"line_start":468,"line_end":468,"column_start":5,"column_end":81}},{"value":"/ Otherwise, an RAII guard is returned which will release the lock when","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":73099,"byte_end":73172,"line_start":469,"line_end":469,"column_start":5,"column_end":78}},{"value":"/ it is dropped.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":73177,"byte_end":73195,"line_start":470,"line_end":470,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":73200,"byte_end":73203,"line_start":471,"line_end":471,"column_start":5,"column_end":8}},{"value":"/ This function does not block.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":73208,"byte_end":73241,"line_start":472,"line_end":472,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":73246,"byte_end":73255,"line_start":473,"line_end":473,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":585},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":73772,"byte_end":73779,"line_start":488,"line_end":488,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<RwLock<R, T>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the underlying data.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the underlying data.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":73524,"byte_end":73579,"line_start":483,"line_end":483,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":73584,"byte_end":73587,"line_start":484,"line_end":484,"column_start":5,"column_end":8}},{"value":"/ Since this call borrows the `RwLock` mutably, no actual locking needs to","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":73592,"byte_end":73668,"line_start":485,"line_end":485,"column_start":5,"column_end":81}},{"value":"/ take place---the mutable borrow statically guarantees no locks exist.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":73673,"byte_end":73746,"line_start":486,"line_end":486,"column_start":5,"column_end":78}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":73751,"byte_end":73760,"line_start":487,"line_end":487,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":586},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":73945,"byte_end":73954,"line_start":494,"line_end":494,"column_start":12,"column_end":21},"name":"is_locked","qualname":"<RwLock<R, T>>::is_locked","value":"pub fn is_locked(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Checks whether this `RwLock` is currently locked in any way.\n","sig":null,"attributes":[{"value":"/ Checks whether this `RwLock` is currently locked in any way.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":73855,"byte_end":73919,"line_start":492,"line_end":492,"column_start":5,"column_end":69}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":73924,"byte_end":73933,"line_start":493,"line_end":493,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":587},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":74543,"byte_end":74560,"line_start":510,"line_end":510,"column_start":19,"column_end":36},"name":"force_unlock_read","qualname":"<RwLock<R, T>>::force_unlock_read","value":"pub unsafe fn force_unlock_read(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Forcibly unlocks a read lock.","sig":null,"attributes":[{"value":"/ Forcibly unlocks a read lock.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":74012,"byte_end":74045,"line_start":498,"line_end":498,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":74050,"byte_end":74053,"line_start":499,"line_end":499,"column_start":5,"column_end":8}},{"value":"/ This is useful when combined with `mem::forget` to hold a lock without","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":74058,"byte_end":74132,"line_start":500,"line_end":500,"column_start":5,"column_end":79}},{"value":"/ the need to maintain a `RwLockReadGuard` object alive, for example when","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":74137,"byte_end":74212,"line_start":501,"line_end":501,"column_start":5,"column_end":80}},{"value":"/ dealing with FFI.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":74217,"byte_end":74238,"line_start":502,"line_end":502,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":74243,"byte_end":74246,"line_start":503,"line_end":503,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":74251,"byte_end":74263,"line_start":504,"line_end":504,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":74268,"byte_end":74271,"line_start":505,"line_end":505,"column_start":5,"column_end":8}},{"value":"/ This method must only be called if the current thread logically owns a","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":74276,"byte_end":74350,"line_start":506,"line_end":506,"column_start":5,"column_end":79}},{"value":"/ `RwLockReadGuard` but that guard has be discarded using `mem::forget`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":74355,"byte_end":74429,"line_start":507,"line_end":507,"column_start":5,"column_end":79}},{"value":"/ Behavior is undefined if a rwlock is read-unlocked when not read-locked.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":74434,"byte_end":74510,"line_start":508,"line_end":508,"column_start":5,"column_end":81}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":74515,"byte_end":74524,"line_start":509,"line_end":509,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":588},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":75151,"byte_end":75169,"line_start":526,"line_end":526,"column_start":19,"column_end":37},"name":"force_unlock_write","qualname":"<RwLock<R, T>>::force_unlock_write","value":"pub unsafe fn force_unlock_write(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Forcibly unlocks a write lock.","sig":null,"attributes":[{"value":"/ Forcibly unlocks a write lock.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":74615,"byte_end":74649,"line_start":514,"line_end":514,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":74654,"byte_end":74657,"line_start":515,"line_end":515,"column_start":5,"column_end":8}},{"value":"/ This is useful when combined with `mem::forget` to hold a lock without","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":74662,"byte_end":74736,"line_start":516,"line_end":516,"column_start":5,"column_end":79}},{"value":"/ the need to maintain a `RwLockWriteGuard` object alive, for example when","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":74741,"byte_end":74817,"line_start":517,"line_end":517,"column_start":5,"column_end":81}},{"value":"/ dealing with FFI.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":74822,"byte_end":74843,"line_start":518,"line_end":518,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":74848,"byte_end":74851,"line_start":519,"line_end":519,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":74856,"byte_end":74868,"line_start":520,"line_end":520,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":74873,"byte_end":74876,"line_start":521,"line_end":521,"column_start":5,"column_end":8}},{"value":"/ This method must only be called if the current thread logically owns a","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":74881,"byte_end":74955,"line_start":522,"line_end":522,"column_start":5,"column_end":79}},{"value":"/ `RwLockWriteGuard` but that guard has be discarded using `mem::forget`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":74960,"byte_end":75035,"line_start":523,"line_end":523,"column_start":5,"column_end":80}},{"value":"/ Behavior is undefined if a rwlock is write-unlocked when not write-locked.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":75040,"byte_end":75118,"line_start":524,"line_end":524,"column_start":5,"column_end":83}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":75123,"byte_end":75132,"line_start":525,"line_end":525,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":589},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":75635,"byte_end":75638,"line_start":540,"line_end":540,"column_start":19,"column_end":22},"name":"raw","qualname":"<RwLock<R, T>>::raw","value":"pub unsafe fn raw(&Self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Returns the underlying raw reader-writer lock object.","sig":null,"attributes":[{"value":"/ Returns the underlying raw reader-writer lock object.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":75227,"byte_end":75284,"line_start":530,"line_end":530,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":75289,"byte_end":75292,"line_start":531,"line_end":531,"column_start":5,"column_end":8}},{"value":"/ Note that you will most likely need to import the `RawRwLock` trait from","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":75297,"byte_end":75373,"line_start":532,"line_end":532,"column_start":5,"column_end":81}},{"value":"/ `lock_api` to be able to call functions on the raw","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":75378,"byte_end":75432,"line_start":533,"line_end":533,"column_start":5,"column_end":59}},{"value":"/ reader-writer lock.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":75437,"byte_end":75460,"line_start":534,"line_end":534,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":75465,"byte_end":75468,"line_start":535,"line_end":535,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":75473,"byte_end":75485,"line_start":536,"line_end":536,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":75490,"byte_end":75493,"line_start":537,"line_end":537,"column_start":5,"column_end":8}},{"value":"/ This method is unsafe because it allows unlocking a mutex while","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":75498,"byte_end":75565,"line_start":538,"line_end":538,"column_start":5,"column_end":72}},{"value":"/ still holding a reference to a lock guard.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":75570,"byte_end":75616,"line_start":539,"line_end":539,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":590},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":76270,"byte_end":76278,"line_start":557,"line_end":557,"column_start":12,"column_end":20},"name":"data_ptr","qualname":"<RwLock<R, T>>::data_ptr","value":"pub fn data_ptr(&Self) -> *mut T","parent":null,"children":[],"decl_id":null,"docs":" Returns a raw pointer to the underlying data.","sig":null,"attributes":[{"value":"/ Returns a raw pointer to the underlying data.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":75683,"byte_end":75732,"line_start":544,"line_end":544,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":75737,"byte_end":75740,"line_start":545,"line_end":545,"column_start":5,"column_end":8}},{"value":"/ This is useful when combined with `mem::forget` to hold a lock without","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":75745,"byte_end":75819,"line_start":546,"line_end":546,"column_start":5,"column_end":79}},{"value":"/ the need to maintain a `RwLockReadGuard` or `RwLockWriteGuard` object","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":75824,"byte_end":75897,"line_start":547,"line_end":547,"column_start":5,"column_end":78}},{"value":"/ alive, for example when dealing with FFI.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":75902,"byte_end":75947,"line_start":548,"line_end":548,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":75952,"byte_end":75955,"line_start":549,"line_end":549,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":75960,"byte_end":75972,"line_start":550,"line_end":550,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":75977,"byte_end":75980,"line_start":551,"line_end":551,"column_start":5,"column_end":8}},{"value":"/ You must ensure that there are no data races when dereferencing the","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":75985,"byte_end":76056,"line_start":552,"line_end":552,"column_start":5,"column_end":76}},{"value":"/ returned pointer, for example if the current thread logically owns a","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":76061,"byte_end":76133,"line_start":553,"line_end":553,"column_start":5,"column_end":77}},{"value":"/ `RwLockReadGuard` or `RwLockWriteGuard` but that guard has been discarded","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":76138,"byte_end":76215,"line_start":554,"line_end":554,"column_start":5,"column_end":82}},{"value":"/ using `mem::forget`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":76220,"byte_end":76244,"line_start":555,"line_end":555,"column_start":5,"column_end":29}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":76249,"byte_end":76258,"line_start":556,"line_end":556,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":594},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":76944,"byte_end":76966,"line_start":575,"line_end":575,"column_start":19,"column_end":41},"name":"force_unlock_read_fair","qualname":"<RwLock<R, T>>::force_unlock_read_fair","value":"pub unsafe fn force_unlock_read_fair(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Forcibly unlocks a read lock using a fair unlock procotol.","sig":null,"attributes":[{"value":"/ Forcibly unlocks a read lock using a fair unlock procotol.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":76384,"byte_end":76446,"line_start":563,"line_end":563,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":76451,"byte_end":76454,"line_start":564,"line_end":564,"column_start":5,"column_end":8}},{"value":"/ This is useful when combined with `mem::forget` to hold a lock without","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":76459,"byte_end":76533,"line_start":565,"line_end":565,"column_start":5,"column_end":79}},{"value":"/ the need to maintain a `RwLockReadGuard` object alive, for example when","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":76538,"byte_end":76613,"line_start":566,"line_end":566,"column_start":5,"column_end":80}},{"value":"/ dealing with FFI.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":76618,"byte_end":76639,"line_start":567,"line_end":567,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":76644,"byte_end":76647,"line_start":568,"line_end":568,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":76652,"byte_end":76664,"line_start":569,"line_end":569,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":76669,"byte_end":76672,"line_start":570,"line_end":570,"column_start":5,"column_end":8}},{"value":"/ This method must only be called if the current thread logically owns a","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":76677,"byte_end":76751,"line_start":571,"line_end":571,"column_start":5,"column_end":79}},{"value":"/ `RwLockReadGuard` but that guard has be discarded using `mem::forget`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":76756,"byte_end":76830,"line_start":572,"line_end":572,"column_start":5,"column_end":79}},{"value":"/ Behavior is undefined if a rwlock is read-unlocked when not read-locked.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":76835,"byte_end":76911,"line_start":573,"line_end":573,"column_start":5,"column_end":81}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":76916,"byte_end":76925,"line_start":574,"line_end":574,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":595},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":77591,"byte_end":77614,"line_start":591,"line_end":591,"column_start":19,"column_end":42},"name":"force_unlock_write_fair","qualname":"<RwLock<R, T>>::force_unlock_write_fair","value":"pub unsafe fn force_unlock_write_fair(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Forcibly unlocks a write lock using a fair unlock procotol.","sig":null,"attributes":[{"value":"/ Forcibly unlocks a write lock using a fair unlock procotol.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":77026,"byte_end":77089,"line_start":579,"line_end":579,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":77094,"byte_end":77097,"line_start":580,"line_end":580,"column_start":5,"column_end":8}},{"value":"/ This is useful when combined with `mem::forget` to hold a lock without","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":77102,"byte_end":77176,"line_start":581,"line_end":581,"column_start":5,"column_end":79}},{"value":"/ the need to maintain a `RwLockWriteGuard` object alive, for example when","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":77181,"byte_end":77257,"line_start":582,"line_end":582,"column_start":5,"column_end":81}},{"value":"/ dealing with FFI.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":77262,"byte_end":77283,"line_start":583,"line_end":583,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":77288,"byte_end":77291,"line_start":584,"line_end":584,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":77296,"byte_end":77308,"line_start":585,"line_end":585,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":77313,"byte_end":77316,"line_start":586,"line_end":586,"column_start":5,"column_end":8}},{"value":"/ This method must only be called if the current thread logically owns a","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":77321,"byte_end":77395,"line_start":587,"line_end":587,"column_start":5,"column_end":79}},{"value":"/ `RwLockWriteGuard` but that guard has be discarded using `mem::forget`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":77400,"byte_end":77475,"line_start":588,"line_end":588,"column_start":5,"column_end":80}},{"value":"/ Behavior is undefined if a rwlock is write-unlocked when not write-locked.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":77480,"byte_end":77558,"line_start":589,"line_end":589,"column_start":5,"column_end":83}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":77563,"byte_end":77572,"line_start":590,"line_end":590,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":599},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":78066,"byte_end":78078,"line_start":604,"line_end":604,"column_start":12,"column_end":24},"name":"try_read_for","qualname":"<RwLock<R, T>>::try_read_for","value":"pub fn try_read_for(&Self, R::Duration) -> Option<RwLockReadGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with shared read access until a timeout\n is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this `RwLock` with shared read access until a timeout","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":77729,"byte_end":77806,"line_start":597,"line_end":597,"column_start":5,"column_end":82}},{"value":"/ is reached.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":77811,"byte_end":77826,"line_start":598,"line_end":598,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":77831,"byte_end":77834,"line_start":599,"line_end":599,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted before the timeout expires, then","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":77839,"byte_end":77910,"line_start":600,"line_end":600,"column_start":5,"column_end":76}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned which will","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":77915,"byte_end":77986,"line_start":601,"line_end":601,"column_start":5,"column_end":76}},{"value":"/ release the shared access when it is dropped.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":77991,"byte_end":78040,"line_start":602,"line_end":602,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":78045,"byte_end":78054,"line_start":603,"line_end":603,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":600},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":78691,"byte_end":78705,"line_start":620,"line_end":620,"column_start":12,"column_end":26},"name":"try_read_until","qualname":"<RwLock<R, T>>::try_read_until","value":"pub fn try_read_until(&Self, R::Instant) -> Option<RwLockReadGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with shared read access until a timeout\n is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this `RwLock` with shared read access until a timeout","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":78354,"byte_end":78431,"line_start":613,"line_end":613,"column_start":5,"column_end":82}},{"value":"/ is reached.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":78436,"byte_end":78451,"line_start":614,"line_end":614,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":78456,"byte_end":78459,"line_start":615,"line_end":615,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted before the timeout expires, then","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":78464,"byte_end":78535,"line_start":616,"line_end":616,"column_start":5,"column_end":76}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned which will","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":78540,"byte_end":78611,"line_start":617,"line_end":617,"column_start":5,"column_end":76}},{"value":"/ release the shared access when it is dropped.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":78616,"byte_end":78665,"line_start":618,"line_end":618,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":78670,"byte_end":78679,"line_start":619,"line_end":619,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":601},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":79326,"byte_end":79339,"line_start":636,"line_end":636,"column_start":12,"column_end":25},"name":"try_write_for","qualname":"<RwLock<R, T>>::try_write_for","value":"pub fn try_write_for(&Self, R::Duration) -> Option<RwLockWriteGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with exclusive write access until a\n timeout is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this `RwLock` with exclusive write access until a","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":78982,"byte_end":79055,"line_start":629,"line_end":629,"column_start":5,"column_end":78}},{"value":"/ timeout is reached.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":79060,"byte_end":79083,"line_start":630,"line_end":630,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":79088,"byte_end":79091,"line_start":631,"line_end":631,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted before the timeout expires, then","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":79096,"byte_end":79167,"line_start":632,"line_end":632,"column_start":5,"column_end":76}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned which will","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":79172,"byte_end":79243,"line_start":633,"line_end":633,"column_start":5,"column_end":76}},{"value":"/ release the exclusive access when it is dropped.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":79248,"byte_end":79300,"line_start":634,"line_end":634,"column_start":5,"column_end":57}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":79305,"byte_end":79314,"line_start":635,"line_end":635,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":602},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":79964,"byte_end":79979,"line_start":652,"line_end":652,"column_start":12,"column_end":27},"name":"try_write_until","qualname":"<RwLock<R, T>>::try_write_until","value":"pub fn try_write_until(&Self, R::Instant) -> Option<RwLockWriteGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with exclusive write access until a\n timeout is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this `RwLock` with exclusive write access until a","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":79620,"byte_end":79693,"line_start":645,"line_end":645,"column_start":5,"column_end":78}},{"value":"/ timeout is reached.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":79698,"byte_end":79721,"line_start":646,"line_end":646,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":79726,"byte_end":79729,"line_start":647,"line_end":647,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted before the timeout expires, then","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":79734,"byte_end":79805,"line_start":648,"line_end":648,"column_start":5,"column_end":76}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned which will","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":79810,"byte_end":79881,"line_start":649,"line_end":649,"column_start":5,"column_end":76}},{"value":"/ release the exclusive access when it is dropped.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":79886,"byte_end":79938,"line_start":650,"line_end":650,"column_start":5,"column_end":57}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":79943,"byte_end":79952,"line_start":651,"line_end":651,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":606},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":81110,"byte_end":81124,"line_start":679,"line_end":679,"column_start":12,"column_end":26},"name":"read_recursive","qualname":"<RwLock<R, T>>::read_recursive","value":"pub fn read_recursive(&Self) -> RwLockReadGuard<, R, T>","parent":null,"children":[],"decl_id":null,"docs":" Locks this `RwLock` with shared read access, blocking the current thread\n until it can be acquired.","sig":null,"attributes":[{"value":"/ Locks this `RwLock` with shared read access, blocking the current thread","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":80317,"byte_end":80393,"line_start":663,"line_end":663,"column_start":5,"column_end":81}},{"value":"/ until it can be acquired.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":80398,"byte_end":80427,"line_start":664,"line_end":664,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":80432,"byte_end":80435,"line_start":665,"line_end":665,"column_start":5,"column_end":8}},{"value":"/ The calling thread will be blocked until there are no more writers which","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":80440,"byte_end":80516,"line_start":666,"line_end":666,"column_start":5,"column_end":81}},{"value":"/ hold the lock. There may be other readers currently inside the lock when","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":80521,"byte_end":80597,"line_start":667,"line_end":667,"column_start":5,"column_end":81}},{"value":"/ this method returns.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":80602,"byte_end":80626,"line_start":668,"line_end":668,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":80631,"byte_end":80634,"line_start":669,"line_end":669,"column_start":5,"column_end":8}},{"value":"/ Unlike `read`, this method is guaranteed to succeed without blocking if","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":80639,"byte_end":80714,"line_start":670,"line_end":670,"column_start":5,"column_end":80}},{"value":"/ another read lock is held at the time of the call. This allows a thread","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":80719,"byte_end":80794,"line_start":671,"line_end":671,"column_start":5,"column_end":80}},{"value":"/ to recursively lock a `RwLock`. However using this method can cause","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":80799,"byte_end":80870,"line_start":672,"line_end":672,"column_start":5,"column_end":76}},{"value":"/ writers to starve since readers no longer block if a writer is waiting","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":80875,"byte_end":80949,"line_start":673,"line_end":673,"column_start":5,"column_end":79}},{"value":"/ for the lock.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":80954,"byte_end":80971,"line_start":674,"line_end":674,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":80976,"byte_end":80979,"line_start":675,"line_end":675,"column_start":5,"column_end":8}},{"value":"/ Returns an RAII guard which will release this thread's shared access","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":80984,"byte_end":81056,"line_start":676,"line_end":676,"column_start":5,"column_end":77}},{"value":"/ once it is dropped.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":81061,"byte_end":81084,"line_start":677,"line_end":677,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":81089,"byte_end":81098,"line_start":678,"line_end":678,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":607},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":81808,"byte_end":81826,"line_start":696,"line_end":696,"column_start":12,"column_end":30},"name":"try_read_recursive","qualname":"<RwLock<R, T>>::try_read_recursive","value":"pub fn try_read_recursive(&Self) -> Option<RwLockReadGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with shared read access.","sig":null,"attributes":[{"value":"/ Attempts to acquire this `RwLock` with shared read access.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":81303,"byte_end":81365,"line_start":685,"line_end":685,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":81370,"byte_end":81373,"line_start":686,"line_end":686,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted at this time, then `None` is returned.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":81378,"byte_end":81455,"line_start":687,"line_end":687,"column_start":5,"column_end":82}},{"value":"/ Otherwise, an RAII guard is returned which will release the shared access","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":81460,"byte_end":81537,"line_start":688,"line_end":688,"column_start":5,"column_end":82}},{"value":"/ when it is dropped.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":81542,"byte_end":81565,"line_start":689,"line_end":689,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":81570,"byte_end":81573,"line_start":690,"line_end":690,"column_start":5,"column_end":8}},{"value":"/ This method is guaranteed to succeed if another read lock is held at the","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":81578,"byte_end":81654,"line_start":691,"line_end":691,"column_start":5,"column_end":81}},{"value":"/ time of the call. See the documentation for `read_recursive` for details.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":81659,"byte_end":81736,"line_start":692,"line_end":692,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":81741,"byte_end":81744,"line_start":693,"line_end":693,"column_start":5,"column_end":8}},{"value":"/ This function does not block.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":81749,"byte_end":81782,"line_start":694,"line_end":694,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":81787,"byte_end":81796,"line_start":695,"line_end":695,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":611},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":82673,"byte_end":82695,"line_start":718,"line_end":718,"column_start":12,"column_end":34},"name":"try_read_recursive_for","qualname":"<RwLock<R, T>>::try_read_recursive_for","value":"pub fn try_read_recursive_for(&Self, R::Duration)\n-> Option<RwLockReadGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with shared read access until a timeout\n is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this `RwLock` with shared read access until a timeout","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":82140,"byte_end":82217,"line_start":707,"line_end":707,"column_start":5,"column_end":82}},{"value":"/ is reached.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":82222,"byte_end":82237,"line_start":708,"line_end":708,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":82242,"byte_end":82245,"line_start":709,"line_end":709,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted before the timeout expires, then","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":82250,"byte_end":82321,"line_start":710,"line_end":710,"column_start":5,"column_end":76}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned which will","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":82326,"byte_end":82397,"line_start":711,"line_end":711,"column_start":5,"column_end":76}},{"value":"/ release the shared access when it is dropped.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":82402,"byte_end":82451,"line_start":712,"line_end":712,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":82456,"byte_end":82459,"line_start":713,"line_end":713,"column_start":5,"column_end":8}},{"value":"/ This method is guaranteed to succeed without blocking if another read","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":82464,"byte_end":82537,"line_start":714,"line_end":714,"column_start":5,"column_end":78}},{"value":"/ lock is held at the time of the call. See the documentation for","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":82542,"byte_end":82609,"line_start":715,"line_end":715,"column_start":5,"column_end":72}},{"value":"/ `read_recursive` for details.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":82614,"byte_end":82647,"line_start":716,"line_end":716,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":82652,"byte_end":82661,"line_start":717,"line_end":717,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":612},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":83341,"byte_end":83365,"line_start":737,"line_end":737,"column_start":12,"column_end":36},"name":"try_read_recursive_until","qualname":"<RwLock<R, T>>::try_read_recursive_until","value":"pub fn try_read_recursive_until(&Self, R::Instant)\n-> Option<RwLockReadGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with shared read access until a timeout\n is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this `RwLock` with shared read access until a timeout","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":83004,"byte_end":83081,"line_start":730,"line_end":730,"column_start":5,"column_end":82}},{"value":"/ is reached.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":83086,"byte_end":83101,"line_start":731,"line_end":731,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":83106,"byte_end":83109,"line_start":732,"line_end":732,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted before the timeout expires, then","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":83114,"byte_end":83185,"line_start":733,"line_end":733,"column_start":5,"column_end":76}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned which will","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":83190,"byte_end":83261,"line_start":734,"line_end":734,"column_start":5,"column_end":76}},{"value":"/ release the shared access when it is dropped.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":83266,"byte_end":83315,"line_start":735,"line_end":735,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":83320,"byte_end":83329,"line_start":736,"line_end":736,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":617},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":84493,"byte_end":84508,"line_start":772,"line_end":772,"column_start":12,"column_end":27},"name":"upgradable_read","qualname":"<RwLock<R, T>>::upgradable_read","value":"pub fn upgradable_read(&Self) -> RwLockUpgradableReadGuard<, R, T>","parent":null,"children":[],"decl_id":null,"docs":" Locks this `RwLock` with upgradable read access, blocking the current thread\n until it can be acquired.","sig":null,"attributes":[{"value":"/ Locks this `RwLock` with upgradable read access, blocking the current thread","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":84015,"byte_end":84095,"line_start":762,"line_end":762,"column_start":5,"column_end":85}},{"value":"/ until it can be acquired.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":84100,"byte_end":84129,"line_start":763,"line_end":763,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":84134,"byte_end":84137,"line_start":764,"line_end":764,"column_start":5,"column_end":8}},{"value":"/ The calling thread will be blocked until there are no more writers or other","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":84142,"byte_end":84221,"line_start":765,"line_end":765,"column_start":5,"column_end":84}},{"value":"/ upgradable reads which hold the lock. There may be other readers currently","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":84226,"byte_end":84304,"line_start":766,"line_end":766,"column_start":5,"column_end":83}},{"value":"/ inside the lock when this method returns.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":84309,"byte_end":84354,"line_start":767,"line_end":767,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":84359,"byte_end":84362,"line_start":768,"line_end":768,"column_start":5,"column_end":8}},{"value":"/ Returns an RAII guard which will release this thread's shared access","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":84367,"byte_end":84439,"line_start":769,"line_end":769,"column_start":5,"column_end":77}},{"value":"/ once it is dropped.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":84444,"byte_end":84467,"line_start":770,"line_end":770,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":84472,"byte_end":84481,"line_start":771,"line_end":771,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":618},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":85035,"byte_end":85054,"line_start":786,"line_end":786,"column_start":12,"column_end":31},"name":"try_upgradable_read","qualname":"<RwLock<R, T>>::try_upgradable_read","value":"pub fn try_upgradable_read(&Self) -> Option<RwLockUpgradableReadGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with upgradable read access.","sig":null,"attributes":[{"value":"/ Attempts to acquire this `RwLock` with upgradable read access.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":84697,"byte_end":84763,"line_start":778,"line_end":778,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":84768,"byte_end":84771,"line_start":779,"line_end":779,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted at this time, then `None` is returned.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":84776,"byte_end":84853,"line_start":780,"line_end":780,"column_start":5,"column_end":82}},{"value":"/ Otherwise, an RAII guard is returned which will release the shared access","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":84858,"byte_end":84935,"line_start":781,"line_end":781,"column_start":5,"column_end":82}},{"value":"/ when it is dropped.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":84940,"byte_end":84963,"line_start":782,"line_end":782,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":84968,"byte_end":84971,"line_start":783,"line_end":783,"column_start":5,"column_end":8}},{"value":"/ This function does not block.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":84976,"byte_end":85009,"line_start":784,"line_end":784,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":85014,"byte_end":85023,"line_start":785,"line_end":785,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":622},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":85717,"byte_end":85740,"line_start":804,"line_end":804,"column_start":12,"column_end":35},"name":"try_upgradable_read_for","qualname":"<RwLock<R, T>>::try_upgradable_read_for","value":"pub fn try_upgradable_read_for(&Self, R::Duration)\n-> Option<RwLockUpgradableReadGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with upgradable read access until a timeout\n is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this `RwLock` with upgradable read access until a timeout","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":85376,"byte_end":85457,"line_start":797,"line_end":797,"column_start":5,"column_end":86}},{"value":"/ is reached.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":85462,"byte_end":85477,"line_start":798,"line_end":798,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":85482,"byte_end":85485,"line_start":799,"line_end":799,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted before the timeout expires, then","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":85490,"byte_end":85561,"line_start":800,"line_end":800,"column_start":5,"column_end":76}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned which will","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":85566,"byte_end":85637,"line_start":801,"line_end":801,"column_start":5,"column_end":76}},{"value":"/ release the shared access when it is dropped.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":85642,"byte_end":85691,"line_start":802,"line_end":802,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":85696,"byte_end":85705,"line_start":803,"line_end":803,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":623},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":86400,"byte_end":86425,"line_start":823,"line_end":823,"column_start":12,"column_end":37},"name":"try_upgradable_read_until","qualname":"<RwLock<R, T>>::try_upgradable_read_until","value":"pub fn try_upgradable_read_until(&Self, R::Instant)\n-> Option<RwLockUpgradableReadGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with upgradable read access until a timeout\n is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this `RwLock` with upgradable read access until a timeout","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":86059,"byte_end":86140,"line_start":816,"line_end":816,"column_start":5,"column_end":86}},{"value":"/ is reached.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":86145,"byte_end":86160,"line_start":817,"line_end":817,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":86165,"byte_end":86168,"line_start":818,"line_end":818,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted before the timeout expires, then","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":86173,"byte_end":86244,"line_start":819,"line_end":819,"column_start":5,"column_end":76}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned which will","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":86249,"byte_end":86320,"line_start":820,"line_end":820,"column_start":5,"column_end":76}},{"value":"/ release the shared access when it is dropped.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":86325,"byte_end":86374,"line_start":821,"line_end":821,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":86379,"byte_end":86388,"line_start":822,"line_end":822,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":640},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":87898,"byte_end":87913,"line_start":873,"line_end":873,"column_start":12,"column_end":27},"name":"RwLockReadGuard","qualname":"::rwlock::RwLockReadGuard","value":"RwLockReadGuard {  }","parent":null,"children":[{"krate":0,"index":644},{"krate":0,"index":645}],"decl_id":null,"docs":" RAII structure used to release the shared read access of a lock when\n dropped.\n","sig":null,"attributes":[{"value":"/ RAII structure used to release the shared read access of a lock when","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":87740,"byte_end":87812,"line_start":870,"line_end":870,"column_start":1,"column_end":73}},{"value":"/ dropped.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":87813,"byte_end":87825,"line_start":871,"line_end":871,"column_start":1,"column_end":13}},{"value":"must_use = \"if unused the RwLock will immediately unlock\"","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":87826,"byte_end":87886,"line_start":872,"line_end":872,"column_start":1,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":650},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":88182,"byte_end":88188,"line_start":880,"line_end":880,"column_start":12,"column_end":18},"name":"rwlock","qualname":"<RwLockReadGuard>::rwlock","value":"pub fn rwlock(&Self) -> &'a RwLock<R, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the original reader-writer lock object.\n","sig":null,"attributes":[{"value":"/ Returns a reference to the original reader-writer lock object.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":88104,"byte_end":88170,"line_start":879,"line_end":879,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":651},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":88668,"byte_end":88671,"line_start":893,"line_end":893,"column_start":12,"column_end":15},"name":"map","qualname":"<RwLockReadGuard>::map","value":"pub fn map<U: ?Sized, F>(Self, F) -> MappedRwLockReadGuard where F: FnOnce(&T)\n-> &U","parent":null,"children":[],"decl_id":null,"docs":" Make a new `MappedRwLockReadGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"/ Make a new `MappedRwLockReadGuard` for a component of the locked data.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":88249,"byte_end":88323,"line_start":884,"line_end":884,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":88328,"byte_end":88331,"line_start":885,"line_end":885,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `RwLockReadGuard` passed","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":88336,"byte_end":88398,"line_start":886,"line_end":886,"column_start":5,"column_end":67}},{"value":"/ in already locked the data.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":88403,"byte_end":88434,"line_start":887,"line_end":887,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":88439,"byte_end":88442,"line_start":888,"line_end":888,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":88447,"byte_end":88498,"line_start":889,"line_end":889,"column_start":5,"column_end":56}},{"value":"/ used as `RwLockReadGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":88503,"byte_end":88584,"line_start":890,"line_end":890,"column_start":5,"column_end":86}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":88589,"byte_end":88642,"line_start":891,"line_end":891,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":88647,"byte_end":88656,"line_start":892,"line_end":892,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":654},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":89515,"byte_end":89522,"line_start":917,"line_end":917,"column_start":12,"column_end":19},"name":"try_map","qualname":"<RwLockReadGuard>::try_map","value":"pub fn try_map<U: ?Sized, F>(Self, F) -> Result<MappedRwLockReadGuard, Self>\nwhere F: FnOnce(&T) -> Option<&U>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make  a new `MappedRwLockReadGuard` for a component of the\n locked data. The original guard is return if the closure returns `None`.","sig":null,"attributes":[{"value":"/ Attempts to make  a new `MappedRwLockReadGuard` for a component of the","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":89015,"byte_end":89089,"line_start":907,"line_end":907,"column_start":5,"column_end":79}},{"value":"/ locked data. The original guard is return if the closure returns `None`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":89094,"byte_end":89170,"line_start":908,"line_end":908,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":89175,"byte_end":89178,"line_start":909,"line_end":909,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `RwLockReadGuard` passed","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":89183,"byte_end":89245,"line_start":910,"line_end":910,"column_start":5,"column_end":67}},{"value":"/ in already locked the data.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":89250,"byte_end":89281,"line_start":911,"line_end":911,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":89286,"byte_end":89289,"line_start":912,"line_end":912,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":89294,"byte_end":89345,"line_start":913,"line_end":913,"column_start":5,"column_end":56}},{"value":"/ used as `RwLockReadGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":89350,"byte_end":89431,"line_start":914,"line_end":914,"column_start":5,"column_end":86}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":89436,"byte_end":89489,"line_start":915,"line_end":915,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":89494,"byte_end":89503,"line_start":916,"line_end":916,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":657},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":90274,"byte_end":90282,"line_start":941,"line_end":941,"column_start":12,"column_end":20},"name":"unlocked","qualname":"<RwLockReadGuard>::unlocked","value":"pub fn unlocked<F, U>(&mut Self, F) -> U where F: FnOnce() -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the `RwLock` to execute the given function.","sig":null,"attributes":[{"value":"/ Temporarily unlocks the `RwLock` to execute the given function.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":89977,"byte_end":90044,"line_start":934,"line_end":934,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":90049,"byte_end":90052,"line_start":935,"line_end":935,"column_start":5,"column_end":8}},{"value":"/ The `RwLock` is unlocked a fair unlock protocol.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":90057,"byte_end":90109,"line_start":936,"line_end":936,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":90114,"byte_end":90117,"line_start":937,"line_end":937,"column_start":5,"column_end":8}},{"value":"/ This is safe because `&mut` guarantees that there exist no other","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":90122,"byte_end":90190,"line_start":938,"line_end":938,"column_start":5,"column_end":73}},{"value":"/ references to the data protected by the `RwLock`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":90195,"byte_end":90248,"line_start":939,"line_end":939,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":90253,"byte_end":90262,"line_start":940,"line_end":940,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":664},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":91437,"byte_end":91448,"line_start":968,"line_end":968,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<RwLockReadGuard>::unlock_fair","value":"pub fn unlock_fair(Self)","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the `RwLock` using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Unlocks the `RwLock` using a fair unlock protocol.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":90636,"byte_end":90690,"line_start":955,"line_end":955,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":90695,"byte_end":90698,"line_start":956,"line_end":956,"column_start":5,"column_end":8}},{"value":"/ By default, `RwLock` is unfair and allow the current thread to re-lock","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":90703,"byte_end":90777,"line_start":957,"line_end":957,"column_start":5,"column_end":79}},{"value":"/ the `RwLock` before another has the chance to acquire the lock, even if","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":90782,"byte_end":90857,"line_start":958,"line_end":958,"column_start":5,"column_end":80}},{"value":"/ that thread has been blocked on the `RwLock` for a long time. This is","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":90862,"byte_end":90935,"line_start":959,"line_end":959,"column_start":5,"column_end":78}},{"value":"/ the default because it allows much higher throughput as it avoids","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":90940,"byte_end":91009,"line_start":960,"line_end":960,"column_start":5,"column_end":74}},{"value":"/ forcing a context switch on every `RwLock` unlock. This can result in one","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":91014,"byte_end":91091,"line_start":961,"line_end":961,"column_start":5,"column_end":82}},{"value":"/ thread acquiring a `RwLock` many more times than other threads.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":91096,"byte_end":91163,"line_start":962,"line_end":962,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":91168,"byte_end":91171,"line_start":963,"line_end":963,"column_start":5,"column_end":8}},{"value":"/ However in some cases it can be beneficial to ensure fairness by forcing","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":91176,"byte_end":91252,"line_start":964,"line_end":964,"column_start":5,"column_end":81}},{"value":"/ the lock to pass on to a waiting thread if there is one. This is done by","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":91257,"byte_end":91333,"line_start":965,"line_end":965,"column_start":5,"column_end":81}},{"value":"/ using this method instead of dropping the `RwLockReadGuard` normally.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":91338,"byte_end":91411,"line_start":966,"line_end":966,"column_start":5,"column_end":78}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":91416,"byte_end":91425,"line_start":967,"line_end":967,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":665},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":91932,"byte_end":91945,"line_start":983,"line_end":983,"column_start":12,"column_end":25},"name":"unlocked_fair","qualname":"<RwLockReadGuard>::unlocked_fair","value":"pub fn unlocked_fair<F, U>(&mut Self, F) -> U where F: FnOnce() -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the `RwLock` to execute the given function.","sig":null,"attributes":[{"value":"/ Temporarily unlocks the `RwLock` to execute the given function.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":91635,"byte_end":91702,"line_start":976,"line_end":976,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":91707,"byte_end":91710,"line_start":977,"line_end":977,"column_start":5,"column_end":8}},{"value":"/ The `RwLock` is unlocked a fair unlock protocol.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":91715,"byte_end":91767,"line_start":978,"line_end":978,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":91772,"byte_end":91775,"line_start":979,"line_end":979,"column_start":5,"column_end":8}},{"value":"/ This is safe because `&mut` guarantees that there exist no other","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":91780,"byte_end":91848,"line_start":980,"line_end":980,"column_start":5,"column_end":73}},{"value":"/ references to the data protected by the `RwLock`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":91853,"byte_end":91906,"line_start":981,"line_end":981,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":91911,"byte_end":91920,"line_start":982,"line_end":982,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":668},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":92526,"byte_end":92530,"line_start":1001,"line_end":1001,"column_start":12,"column_end":16},"name":"bump","qualname":"<RwLockReadGuard>::bump","value":"pub fn bump(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Temporarily yields the `RwLock` to a waiting thread if there is one.","sig":null,"attributes":[{"value":"/ Temporarily yields the `RwLock` to a waiting thread if there is one.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":92226,"byte_end":92298,"line_start":995,"line_end":995,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":92303,"byte_end":92306,"line_start":996,"line_end":996,"column_start":5,"column_end":8}},{"value":"/ This method is functionally equivalent to calling `unlock_fair` followed","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":92311,"byte_end":92387,"line_start":997,"line_end":997,"column_start":5,"column_end":81}},{"value":"/ by `read`, however it can be much more efficient in the case where there","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":92392,"byte_end":92468,"line_start":998,"line_end":998,"column_start":5,"column_end":81}},{"value":"/ are no waiting threads.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":92473,"byte_end":92500,"line_start":999,"line_end":999,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":92505,"byte_end":92514,"line_start":1000,"line_end":1000,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":690},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":93858,"byte_end":93874,"line_start":1047,"line_end":1047,"column_start":12,"column_end":28},"name":"RwLockWriteGuard","qualname":"::rwlock::RwLockWriteGuard","value":"RwLockWriteGuard {  }","parent":null,"children":[{"krate":0,"index":694},{"krate":0,"index":695}],"decl_id":null,"docs":" RAII structure used to release the exclusive write access of a lock when\n dropped.\n","sig":null,"attributes":[{"value":"/ RAII structure used to release the exclusive write access of a lock when","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":93696,"byte_end":93772,"line_start":1044,"line_end":1044,"column_start":1,"column_end":77}},{"value":"/ dropped.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":93773,"byte_end":93785,"line_start":1045,"line_end":1045,"column_start":1,"column_end":13}},{"value":"must_use = \"if unused the RwLock will immediately unlock\"","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":93786,"byte_end":93846,"line_start":1046,"line_end":1046,"column_start":1,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":700},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":94148,"byte_end":94154,"line_start":1054,"line_end":1054,"column_start":12,"column_end":18},"name":"rwlock","qualname":"<RwLockWriteGuard>::rwlock","value":"pub fn rwlock(&Self) -> &'a RwLock<R, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the original reader-writer lock object.\n","sig":null,"attributes":[{"value":"/ Returns a reference to the original reader-writer lock object.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":94070,"byte_end":94136,"line_start":1053,"line_end":1053,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":701},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":94637,"byte_end":94640,"line_start":1067,"line_end":1067,"column_start":12,"column_end":15},"name":"map","qualname":"<RwLockWriteGuard>::map","value":"pub fn map<U: ?Sized, F>(Self, F) -> MappedRwLockWriteGuard where\nF: FnOnce(&mut T) -> &mut U","parent":null,"children":[],"decl_id":null,"docs":" Make a new `MappedRwLockWriteGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"/ Make a new `MappedRwLockWriteGuard` for a component of the locked data.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":94215,"byte_end":94290,"line_start":1058,"line_end":1058,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":94295,"byte_end":94298,"line_start":1059,"line_end":1059,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `RwLockWriteGuard` passed","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":94303,"byte_end":94366,"line_start":1060,"line_end":1060,"column_start":5,"column_end":68}},{"value":"/ in already locked the data.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":94371,"byte_end":94402,"line_start":1061,"line_end":1061,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":94407,"byte_end":94410,"line_start":1062,"line_end":1062,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":94415,"byte_end":94466,"line_start":1063,"line_end":1063,"column_start":5,"column_end":56}},{"value":"/ used as `RwLockWriteGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":94471,"byte_end":94553,"line_start":1064,"line_end":1064,"column_start":5,"column_end":87}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":94558,"byte_end":94611,"line_start":1065,"line_end":1065,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":94616,"byte_end":94625,"line_start":1066,"line_end":1066,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":704},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":95501,"byte_end":95508,"line_start":1091,"line_end":1091,"column_start":12,"column_end":19},"name":"try_map","qualname":"<RwLockWriteGuard>::try_map","value":"pub fn try_map<U: ?Sized, F>(Self, F) -> Result<MappedRwLockWriteGuard, Self>\nwhere F: FnOnce(&mut T) -> Option<&mut U>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make  a new `MappedRwLockWriteGuard` for a component of the\n locked data. The original guard is return if the closure returns `None`.","sig":null,"attributes":[{"value":"/ Attempts to make  a new `MappedRwLockWriteGuard` for a component of the","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":94998,"byte_end":95073,"line_start":1081,"line_end":1081,"column_start":5,"column_end":80}},{"value":"/ locked data. The original guard is return if the closure returns `None`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":95078,"byte_end":95154,"line_start":1082,"line_end":1082,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":95159,"byte_end":95162,"line_start":1083,"line_end":1083,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `RwLockWriteGuard` passed","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":95167,"byte_end":95230,"line_start":1084,"line_end":1084,"column_start":5,"column_end":68}},{"value":"/ in already locked the data.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":95235,"byte_end":95266,"line_start":1085,"line_end":1085,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":95271,"byte_end":95274,"line_start":1086,"line_end":1086,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":95279,"byte_end":95330,"line_start":1087,"line_end":1087,"column_start":5,"column_end":56}},{"value":"/ used as `RwLockWriteGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":95335,"byte_end":95417,"line_start":1088,"line_end":1088,"column_start":5,"column_end":87}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":95422,"byte_end":95475,"line_start":1089,"line_end":1089,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":95480,"byte_end":95489,"line_start":1090,"line_end":1090,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":707},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":96209,"byte_end":96217,"line_start":1113,"line_end":1113,"column_start":12,"column_end":20},"name":"unlocked","qualname":"<RwLockWriteGuard>::unlocked","value":"pub fn unlocked<F, U>(&mut Self, F) -> U where F: FnOnce() -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the `RwLock` to execute the given function.","sig":null,"attributes":[{"value":"/ Temporarily unlocks the `RwLock` to execute the given function.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":95977,"byte_end":96044,"line_start":1108,"line_end":1108,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":96049,"byte_end":96052,"line_start":1109,"line_end":1109,"column_start":5,"column_end":8}},{"value":"/ This is safe because `&mut` guarantees that there exist no other","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":96057,"byte_end":96125,"line_start":1110,"line_end":1110,"column_start":5,"column_end":73}},{"value":"/ references to the data protected by the `RwLock`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":96130,"byte_end":96183,"line_start":1111,"line_end":1111,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":96188,"byte_end":96197,"line_start":1112,"line_end":1112,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":714},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":96925,"byte_end":96934,"line_start":1133,"line_end":1133,"column_start":12,"column_end":21},"name":"downgrade","qualname":"<RwLockWriteGuard>::downgrade","value":"pub fn downgrade(Self) -> RwLockReadGuard","parent":null,"children":[],"decl_id":null,"docs":" Atomically downgrades a write lock into a read lock without allowing any\n writers to take exclusive access of the lock in the meantime.","sig":null,"attributes":[{"value":"/ Atomically downgrades a write lock into a read lock without allowing any","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":96583,"byte_end":96659,"line_start":1127,"line_end":1127,"column_start":5,"column_end":81}},{"value":"/ writers to take exclusive access of the lock in the meantime.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":96664,"byte_end":96729,"line_start":1128,"line_end":1128,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":96734,"byte_end":96737,"line_start":1129,"line_end":1129,"column_start":5,"column_end":8}},{"value":"/ Note that if there are any writers currently waiting to take the lock","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":96742,"byte_end":96815,"line_start":1130,"line_end":1130,"column_start":5,"column_end":78}},{"value":"/ then other readers may not be able to acquire the lock even if it was","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":96820,"byte_end":96893,"line_start":1131,"line_end":1131,"column_start":5,"column_end":78}},{"value":"/ downgraded.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":96898,"byte_end":96913,"line_start":1132,"line_end":1132,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":719},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":97711,"byte_end":97734,"line_start":1154,"line_end":1154,"column_start":12,"column_end":35},"name":"downgrade_to_upgradable","qualname":"<RwLockWriteGuard>::downgrade_to_upgradable","value":"pub fn downgrade_to_upgradable(Self) -> RwLockUpgradableReadGuard","parent":null,"children":[],"decl_id":null,"docs":" Atomically downgrades a write lock into an upgradable read lock without allowing any\n writers to take exclusive access of the lock in the meantime.","sig":null,"attributes":[{"value":"/ Atomically downgrades a write lock into an upgradable read lock without allowing any","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":97357,"byte_end":97445,"line_start":1148,"line_end":1148,"column_start":5,"column_end":93}},{"value":"/ writers to take exclusive access of the lock in the meantime.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":97450,"byte_end":97515,"line_start":1149,"line_end":1149,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":97520,"byte_end":97523,"line_start":1150,"line_end":1150,"column_start":5,"column_end":8}},{"value":"/ Note that if there are any writers currently waiting to take the lock","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":97528,"byte_end":97601,"line_start":1151,"line_end":1151,"column_start":5,"column_end":78}},{"value":"/ then other readers may not be able to acquire the lock even if it was","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":97606,"byte_end":97679,"line_start":1152,"line_end":1152,"column_start":5,"column_end":78}},{"value":"/ downgraded.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":97684,"byte_end":97699,"line_start":1153,"line_end":1153,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":724},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":98981,"byte_end":98992,"line_start":1182,"line_end":1182,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<RwLockWriteGuard>::unlock_fair","value":"pub fn unlock_fair(Self)","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the `RwLock` using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Unlocks the `RwLock` using a fair unlock protocol.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":98179,"byte_end":98233,"line_start":1169,"line_end":1169,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":98238,"byte_end":98241,"line_start":1170,"line_end":1170,"column_start":5,"column_end":8}},{"value":"/ By default, `RwLock` is unfair and allow the current thread to re-lock","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":98246,"byte_end":98320,"line_start":1171,"line_end":1171,"column_start":5,"column_end":79}},{"value":"/ the `RwLock` before another has the chance to acquire the lock, even if","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":98325,"byte_end":98400,"line_start":1172,"line_end":1172,"column_start":5,"column_end":80}},{"value":"/ that thread has been blocked on the `RwLock` for a long time. This is","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":98405,"byte_end":98478,"line_start":1173,"line_end":1173,"column_start":5,"column_end":78}},{"value":"/ the default because it allows much higher throughput as it avoids","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":98483,"byte_end":98552,"line_start":1174,"line_end":1174,"column_start":5,"column_end":74}},{"value":"/ forcing a context switch on every `RwLock` unlock. This can result in one","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":98557,"byte_end":98634,"line_start":1175,"line_end":1175,"column_start":5,"column_end":82}},{"value":"/ thread acquiring a `RwLock` many more times than other threads.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":98639,"byte_end":98706,"line_start":1176,"line_end":1176,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":98711,"byte_end":98714,"line_start":1177,"line_end":1177,"column_start":5,"column_end":8}},{"value":"/ However in some cases it can be beneficial to ensure fairness by forcing","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":98719,"byte_end":98795,"line_start":1178,"line_end":1178,"column_start":5,"column_end":81}},{"value":"/ the lock to pass on to a waiting thread if there is one. This is done by","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":98800,"byte_end":98876,"line_start":1179,"line_end":1179,"column_start":5,"column_end":81}},{"value":"/ using this method instead of dropping the `RwLockWriteGuard` normally.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":98881,"byte_end":98955,"line_start":1180,"line_end":1180,"column_start":5,"column_end":79}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":98960,"byte_end":98969,"line_start":1181,"line_end":1181,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":725},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":99484,"byte_end":99497,"line_start":1197,"line_end":1197,"column_start":12,"column_end":25},"name":"unlocked_fair","qualname":"<RwLockWriteGuard>::unlocked_fair","value":"pub fn unlocked_fair<F, U>(&mut Self, F) -> U where F: FnOnce() -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the `RwLock` to execute the given function.","sig":null,"attributes":[{"value":"/ Temporarily unlocks the `RwLock` to execute the given function.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":99187,"byte_end":99254,"line_start":1190,"line_end":1190,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":99259,"byte_end":99262,"line_start":1191,"line_end":1191,"column_start":5,"column_end":8}},{"value":"/ The `RwLock` is unlocked a fair unlock protocol.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":99267,"byte_end":99319,"line_start":1192,"line_end":1192,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":99324,"byte_end":99327,"line_start":1193,"line_end":1193,"column_start":5,"column_end":8}},{"value":"/ This is safe because `&mut` guarantees that there exist no other","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":99332,"byte_end":99400,"line_start":1194,"line_end":1194,"column_start":5,"column_end":73}},{"value":"/ references to the data protected by the `RwLock`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":99405,"byte_end":99458,"line_start":1195,"line_end":1195,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":99463,"byte_end":99472,"line_start":1196,"line_end":1196,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":728},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":100090,"byte_end":100094,"line_start":1215,"line_end":1215,"column_start":12,"column_end":16},"name":"bump","qualname":"<RwLockWriteGuard>::bump","value":"pub fn bump(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Temporarily yields the `RwLock` to a waiting thread if there is one.","sig":null,"attributes":[{"value":"/ Temporarily yields the `RwLock` to a waiting thread if there is one.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":99789,"byte_end":99861,"line_start":1209,"line_end":1209,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":99866,"byte_end":99869,"line_start":1210,"line_end":1210,"column_start":5,"column_end":8}},{"value":"/ This method is functionally equivalent to calling `unlock_fair` followed","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":99874,"byte_end":99950,"line_start":1211,"line_end":1211,"column_start":5,"column_end":81}},{"value":"/ by `write`, however it can be much more efficient in the case where there","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":99955,"byte_end":100032,"line_start":1212,"line_end":1212,"column_start":5,"column_end":82}},{"value":"/ are no waiting threads.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":100037,"byte_end":100064,"line_start":1213,"line_end":1213,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":100069,"byte_end":100078,"line_start":1214,"line_end":1214,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":755},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":101640,"byte_end":101665,"line_start":1268,"line_end":1268,"column_start":12,"column_end":37},"name":"RwLockUpgradableReadGuard","qualname":"::rwlock::RwLockUpgradableReadGuard","value":"RwLockUpgradableReadGuard {  }","parent":null,"children":[{"krate":0,"index":759},{"krate":0,"index":760}],"decl_id":null,"docs":" RAII structure used to release the upgradable read access of a lock when\n dropped.\n","sig":null,"attributes":[{"value":"/ RAII structure used to release the upgradable read access of a lock when","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":101478,"byte_end":101554,"line_start":1265,"line_end":1265,"column_start":1,"column_end":77}},{"value":"/ dropped.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":101555,"byte_end":101567,"line_start":1266,"line_end":1266,"column_start":1,"column_end":13}},{"value":"must_use = \"if unused the RwLock will immediately unlock\"","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":101568,"byte_end":101628,"line_start":1267,"line_end":1267,"column_start":1,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":769},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":102077,"byte_end":102083,"line_start":1280,"line_end":1280,"column_start":12,"column_end":18},"name":"rwlock","qualname":"<RwLockUpgradableReadGuard>::rwlock","value":"pub fn rwlock(&Self) -> &'a RwLock<R, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the original reader-writer lock object.\n","sig":null,"attributes":[{"value":"/ Returns a reference to the original reader-writer lock object.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":101999,"byte_end":102065,"line_start":1279,"line_end":1279,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":770},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":102376,"byte_end":102384,"line_start":1289,"line_end":1289,"column_start":12,"column_end":20},"name":"unlocked","qualname":"<RwLockUpgradableReadGuard>::unlocked","value":"pub fn unlocked<F, U>(&mut Self, F) -> U where F: FnOnce() -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the `RwLock` to execute the given function.","sig":null,"attributes":[{"value":"/ Temporarily unlocks the `RwLock` to execute the given function.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":102144,"byte_end":102211,"line_start":1284,"line_end":1284,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":102216,"byte_end":102219,"line_start":1285,"line_end":1285,"column_start":5,"column_end":8}},{"value":"/ This is safe because `&mut` guarantees that there exist no other","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":102224,"byte_end":102292,"line_start":1286,"line_end":1286,"column_start":5,"column_end":73}},{"value":"/ references to the data protected by the `RwLock`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":102297,"byte_end":102350,"line_start":1287,"line_end":1287,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":102355,"byte_end":102364,"line_start":1288,"line_end":1288,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":773},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":102838,"byte_end":102845,"line_start":1303,"line_end":1303,"column_start":12,"column_end":19},"name":"upgrade","qualname":"<RwLockUpgradableReadGuard>::upgrade","value":"pub fn upgrade(Self) -> RwLockWriteGuard","parent":null,"children":[],"decl_id":null,"docs":" Atomically upgrades an upgradable read lock lock into a exclusive write lock,\n blocking the current thread until it can be acquired.\n","sig":null,"attributes":[{"value":"/ Atomically upgrades an upgradable read lock lock into a exclusive write lock,","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":102683,"byte_end":102764,"line_start":1301,"line_end":1301,"column_start":5,"column_end":86}},{"value":"/ blocking the current thread until it can be acquired.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":102769,"byte_end":102826,"line_start":1302,"line_end":1302,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":774},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":103384,"byte_end":103395,"line_start":1319,"line_end":1319,"column_start":12,"column_end":23},"name":"try_upgrade","qualname":"<RwLockUpgradableReadGuard>::try_upgrade","value":"pub fn try_upgrade(Self) -> Result<RwLockWriteGuard, Self>","parent":null,"children":[],"decl_id":null,"docs":" Tries to atomically upgrade an upgradable read lock into a exclusive write lock.","sig":null,"attributes":[{"value":"/ Tries to atomically upgrade an upgradable read lock into a exclusive write lock.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":103187,"byte_end":103271,"line_start":1316,"line_end":1316,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":103276,"byte_end":103279,"line_start":1317,"line_end":1317,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted at this time, then the current guard is returned.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":103284,"byte_end":103372,"line_start":1318,"line_end":1318,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":779},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":104719,"byte_end":104730,"line_start":1348,"line_end":1348,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<RwLockUpgradableReadGuard>::unlock_fair","value":"pub fn unlock_fair(Self)","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the `RwLock` using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Unlocks the `RwLock` using a fair unlock protocol.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":103908,"byte_end":103962,"line_start":1335,"line_end":1335,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":103967,"byte_end":103970,"line_start":1336,"line_end":1336,"column_start":5,"column_end":8}},{"value":"/ By default, `RwLock` is unfair and allow the current thread to re-lock","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":103975,"byte_end":104049,"line_start":1337,"line_end":1337,"column_start":5,"column_end":79}},{"value":"/ the `RwLock` before another has the chance to acquire the lock, even if","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":104054,"byte_end":104129,"line_start":1338,"line_end":1338,"column_start":5,"column_end":80}},{"value":"/ that thread has been blocked on the `RwLock` for a long time. This is","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":104134,"byte_end":104207,"line_start":1339,"line_end":1339,"column_start":5,"column_end":78}},{"value":"/ the default because it allows much higher throughput as it avoids","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":104212,"byte_end":104281,"line_start":1340,"line_end":1340,"column_start":5,"column_end":74}},{"value":"/ forcing a context switch on every `RwLock` unlock. This can result in one","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":104286,"byte_end":104363,"line_start":1341,"line_end":1341,"column_start":5,"column_end":82}},{"value":"/ thread acquiring a `RwLock` many more times than other threads.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":104368,"byte_end":104435,"line_start":1342,"line_end":1342,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":104440,"byte_end":104443,"line_start":1343,"line_end":1343,"column_start":5,"column_end":8}},{"value":"/ However in some cases it can be beneficial to ensure fairness by forcing","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":104448,"byte_end":104524,"line_start":1344,"line_end":1344,"column_start":5,"column_end":81}},{"value":"/ the lock to pass on to a waiting thread if there is one. This is done by","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":104529,"byte_end":104605,"line_start":1345,"line_end":1345,"column_start":5,"column_end":81}},{"value":"/ using this method instead of dropping the `RwLockUpgradableReadGuard` normally.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":104610,"byte_end":104693,"line_start":1346,"line_end":1346,"column_start":5,"column_end":88}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":104698,"byte_end":104707,"line_start":1347,"line_end":1347,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":780},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":105233,"byte_end":105246,"line_start":1363,"line_end":1363,"column_start":12,"column_end":25},"name":"unlocked_fair","qualname":"<RwLockUpgradableReadGuard>::unlocked_fair","value":"pub fn unlocked_fair<F, U>(&mut Self, F) -> U where F: FnOnce() -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the `RwLock` to execute the given function.","sig":null,"attributes":[{"value":"/ Temporarily unlocks the `RwLock` to execute the given function.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":104936,"byte_end":105003,"line_start":1356,"line_end":1356,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":105008,"byte_end":105011,"line_start":1357,"line_end":1357,"column_start":5,"column_end":8}},{"value":"/ The `RwLock` is unlocked a fair unlock protocol.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":105016,"byte_end":105068,"line_start":1358,"line_end":1358,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":105073,"byte_end":105076,"line_start":1359,"line_end":1359,"column_start":5,"column_end":8}},{"value":"/ This is safe because `&mut` guarantees that there exist no other","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":105081,"byte_end":105149,"line_start":1360,"line_end":1360,"column_start":5,"column_end":73}},{"value":"/ references to the data protected by the `RwLock`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":105154,"byte_end":105207,"line_start":1361,"line_end":1361,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":105212,"byte_end":105221,"line_start":1362,"line_end":1362,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":783},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":105861,"byte_end":105865,"line_start":1381,"line_end":1381,"column_start":12,"column_end":16},"name":"bump","qualname":"<RwLockUpgradableReadGuard>::bump","value":"pub fn bump(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Temporarily yields the `RwLock` to a waiting thread if there is one.","sig":null,"attributes":[{"value":"/ Temporarily yields the `RwLock` to a waiting thread if there is one.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":105550,"byte_end":105622,"line_start":1375,"line_end":1375,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":105627,"byte_end":105630,"line_start":1376,"line_end":1376,"column_start":5,"column_end":8}},{"value":"/ This method is functionally equivalent to calling `unlock_fair` followed","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":105635,"byte_end":105711,"line_start":1377,"line_end":1377,"column_start":5,"column_end":81}},{"value":"/ by `upgradable_read`, however it can be much more efficient in the case where there","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":105716,"byte_end":105803,"line_start":1378,"line_end":1378,"column_start":5,"column_end":92}},{"value":"/ are no waiting threads.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":105808,"byte_end":105835,"line_start":1379,"line_end":1379,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":105840,"byte_end":105849,"line_start":1380,"line_end":1380,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":788},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":106518,"byte_end":106527,"line_start":1397,"line_end":1397,"column_start":12,"column_end":21},"name":"downgrade","qualname":"<RwLockUpgradableReadGuard>::downgrade","value":"pub fn downgrade(Self) -> RwLockReadGuard","parent":null,"children":[],"decl_id":null,"docs":" Atomically downgrades an upgradable read lock lock into a shared read lock\n without allowing any writers to take exclusive access of the lock in the\n meantime.","sig":null,"attributes":[{"value":"/ Atomically downgrades an upgradable read lock lock into a shared read lock","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":106145,"byte_end":106223,"line_start":1390,"line_end":1390,"column_start":5,"column_end":83}},{"value":"/ without allowing any writers to take exclusive access of the lock in the","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":106228,"byte_end":106304,"line_start":1391,"line_end":1391,"column_start":5,"column_end":81}},{"value":"/ meantime.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":106309,"byte_end":106322,"line_start":1392,"line_end":1392,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":106327,"byte_end":106330,"line_start":1393,"line_end":1393,"column_start":5,"column_end":8}},{"value":"/ Note that if there are any writers currently waiting to take the lock","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":106335,"byte_end":106408,"line_start":1394,"line_end":1394,"column_start":5,"column_end":78}},{"value":"/ then other readers may not be able to acquire the lock even if it was","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":106413,"byte_end":106486,"line_start":1395,"line_end":1395,"column_start":5,"column_end":78}},{"value":"/ downgraded.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":106491,"byte_end":106506,"line_start":1396,"line_end":1396,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":793},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":107231,"byte_end":107246,"line_start":1417,"line_end":1417,"column_start":12,"column_end":27},"name":"try_upgrade_for","qualname":"<RwLockUpgradableReadGuard>::try_upgrade_for","value":"pub fn try_upgrade_for(Self, R::Duration) -> Result<RwLockWriteGuard, Self>","parent":null,"children":[],"decl_id":null,"docs":" Tries to atomically upgrade an upgradable read lock into a exclusive\n write lock, until a timeout is reached.","sig":null,"attributes":[{"value":"/ Tries to atomically upgrade an upgradable read lock into a exclusive","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":106976,"byte_end":107048,"line_start":1412,"line_end":1412,"column_start":5,"column_end":77}},{"value":"/ write lock, until a timeout is reached.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":107053,"byte_end":107096,"line_start":1413,"line_end":1413,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":107101,"byte_end":107104,"line_start":1414,"line_end":1414,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted before the timeout expires, then","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":107109,"byte_end":107180,"line_start":1415,"line_end":1415,"column_start":5,"column_end":76}},{"value":"/ the current guard is returned.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":107185,"byte_end":107219,"line_start":1416,"line_end":1416,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":794},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":107989,"byte_end":108006,"line_start":1440,"line_end":1440,"column_start":12,"column_end":29},"name":"try_upgrade_until","qualname":"<RwLockUpgradableReadGuard>::try_upgrade_until","value":"pub fn try_upgrade_until(Self, R::Instant) -> Result<RwLockWriteGuard, Self>","parent":null,"children":[],"decl_id":null,"docs":" Tries to atomically upgrade an upgradable read lock into a exclusive\n write lock, until a timeout is reached.","sig":null,"attributes":[{"value":"/ Tries to atomically upgrade an upgradable read lock into a exclusive","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":107720,"byte_end":107792,"line_start":1434,"line_end":1434,"column_start":5,"column_end":77}},{"value":"/ write lock, until a timeout is reached.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":107797,"byte_end":107840,"line_start":1435,"line_end":1435,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":107845,"byte_end":107848,"line_start":1436,"line_end":1436,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted before the timeout expires, then","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":107853,"byte_end":107924,"line_start":1437,"line_end":1437,"column_start":5,"column_end":76}},{"value":"/ the current guard is returned.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":107929,"byte_end":107963,"line_start":1438,"line_end":1438,"column_start":5,"column_end":39}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":107968,"byte_end":107977,"line_start":1439,"line_end":1439,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":816},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":110055,"byte_end":110076,"line_start":1506,"line_end":1506,"column_start":12,"column_end":33},"name":"MappedRwLockReadGuard","qualname":"::rwlock::MappedRwLockReadGuard","value":"MappedRwLockReadGuard {  }","parent":null,"children":[{"krate":0,"index":820},{"krate":0,"index":821},{"krate":0,"index":822}],"decl_id":null,"docs":" An RAII read lock guard returned by `RwLockReadGuard::map`, which can point to a\n subfield of the protected data.","sig":null,"attributes":[{"value":"/ An RAII read lock guard returned by `RwLockReadGuard::map`, which can point to a","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":109599,"byte_end":109683,"line_start":1498,"line_end":1498,"column_start":1,"column_end":85}},{"value":"/ subfield of the protected data.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":109684,"byte_end":109719,"line_start":1499,"line_end":1499,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":109720,"byte_end":109723,"line_start":1500,"line_end":1500,"column_start":1,"column_end":4}},{"value":"/ The main difference between `MappedRwLockReadGuard` and `RwLockReadGuard` is that the","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":109724,"byte_end":109813,"line_start":1501,"line_end":1501,"column_start":1,"column_end":90}},{"value":"/ former doesn't support temporarily unlocking and re-locking, since that","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":109814,"byte_end":109889,"line_start":1502,"line_end":1502,"column_start":1,"column_end":76}},{"value":"/ could introduce soundness issues if the locked object is modified by another","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":109890,"byte_end":109970,"line_start":1503,"line_end":1503,"column_start":1,"column_end":81}},{"value":"/ thread.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":109971,"byte_end":109982,"line_start":1504,"line_end":1504,"column_start":1,"column_end":12}},{"value":"must_use = \"if unused the RwLock will immediately unlock\"","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":109983,"byte_end":110043,"line_start":1505,"line_end":1505,"column_start":1,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":835},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":110929,"byte_end":110932,"line_start":1528,"line_end":1528,"column_start":12,"column_end":15},"name":"map","qualname":"<MappedRwLockReadGuard>::map","value":"pub fn map<U: ?Sized, F>(Self, F) -> MappedRwLockReadGuard where F: FnOnce(&T)\n-> &U","parent":null,"children":[],"decl_id":null,"docs":" Make a new `MappedRwLockReadGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"/ Make a new `MappedRwLockReadGuard` for a component of the locked data.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":110498,"byte_end":110572,"line_start":1519,"line_end":1519,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":110577,"byte_end":110580,"line_start":1520,"line_end":1520,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `MappedRwLockReadGuard` passed","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":110585,"byte_end":110653,"line_start":1521,"line_end":1521,"column_start":5,"column_end":73}},{"value":"/ in already locked the data.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":110658,"byte_end":110689,"line_start":1522,"line_end":1522,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":110694,"byte_end":110697,"line_start":1523,"line_end":1523,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":110702,"byte_end":110753,"line_start":1524,"line_end":1524,"column_start":5,"column_end":56}},{"value":"/ used as `MappedRwLockReadGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":110758,"byte_end":110845,"line_start":1525,"line_end":1525,"column_start":5,"column_end":92}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":110850,"byte_end":110903,"line_start":1526,"line_end":1526,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":110908,"byte_end":110917,"line_start":1527,"line_end":1527,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":838},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":111767,"byte_end":111774,"line_start":1552,"line_end":1552,"column_start":12,"column_end":19},"name":"try_map","qualname":"<MappedRwLockReadGuard>::try_map","value":"pub fn try_map<U: ?Sized, F>(Self, F) -> Result<MappedRwLockReadGuard, Self>\nwhere F: FnOnce(&T) -> Option<&U>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make  a new `MappedRwLockReadGuard` for a component of the\n locked data. The original guard is return if the closure returns `None`.","sig":null,"attributes":[{"value":"/ Attempts to make  a new `MappedRwLockReadGuard` for a component of the","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":111255,"byte_end":111329,"line_start":1542,"line_end":1542,"column_start":5,"column_end":79}},{"value":"/ locked data. The original guard is return if the closure returns `None`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":111334,"byte_end":111410,"line_start":1543,"line_end":1543,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":111415,"byte_end":111418,"line_start":1544,"line_end":1544,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `MappedRwLockReadGuard` passed","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":111423,"byte_end":111491,"line_start":1545,"line_end":1545,"column_start":5,"column_end":73}},{"value":"/ in already locked the data.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":111496,"byte_end":111527,"line_start":1546,"line_end":1546,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":111532,"byte_end":111535,"line_start":1547,"line_end":1547,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":111540,"byte_end":111591,"line_start":1548,"line_end":1548,"column_start":5,"column_end":56}},{"value":"/ used as `MappedRwLockReadGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":111596,"byte_end":111683,"line_start":1549,"line_end":1549,"column_start":5,"column_end":92}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":111688,"byte_end":111741,"line_start":1550,"line_end":1550,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":111746,"byte_end":111755,"line_start":1551,"line_end":1551,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":845},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":113099,"byte_end":113110,"line_start":1584,"line_end":1584,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<MappedRwLockReadGuard>::unlock_fair","value":"pub fn unlock_fair(Self)","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the `RwLock` using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Unlocks the `RwLock` using a fair unlock protocol.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":112292,"byte_end":112346,"line_start":1571,"line_end":1571,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":112351,"byte_end":112354,"line_start":1572,"line_end":1572,"column_start":5,"column_end":8}},{"value":"/ By default, `RwLock` is unfair and allow the current thread to re-lock","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":112359,"byte_end":112433,"line_start":1573,"line_end":1573,"column_start":5,"column_end":79}},{"value":"/ the `RwLock` before another has the chance to acquire the lock, even if","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":112438,"byte_end":112513,"line_start":1574,"line_end":1574,"column_start":5,"column_end":80}},{"value":"/ that thread has been blocked on the `RwLock` for a long time. This is","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":112518,"byte_end":112591,"line_start":1575,"line_end":1575,"column_start":5,"column_end":78}},{"value":"/ the default because it allows much higher throughput as it avoids","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":112596,"byte_end":112665,"line_start":1576,"line_end":1576,"column_start":5,"column_end":74}},{"value":"/ forcing a context switch on every `RwLock` unlock. This can result in one","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":112670,"byte_end":112747,"line_start":1577,"line_end":1577,"column_start":5,"column_end":82}},{"value":"/ thread acquiring a `RwLock` many more times than other threads.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":112752,"byte_end":112819,"line_start":1578,"line_end":1578,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":112824,"byte_end":112827,"line_start":1579,"line_end":1579,"column_start":5,"column_end":8}},{"value":"/ However in some cases it can be beneficial to ensure fairness by forcing","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":112832,"byte_end":112908,"line_start":1580,"line_end":1580,"column_start":5,"column_end":81}},{"value":"/ the lock to pass on to a waiting thread if there is one. This is done by","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":112913,"byte_end":112989,"line_start":1581,"line_end":1581,"column_start":5,"column_end":81}},{"value":"/ using this method instead of dropping the `MappedRwLockReadGuard` normally.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":112994,"byte_end":113073,"line_start":1582,"line_end":1582,"column_start":5,"column_end":84}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":113078,"byte_end":113087,"line_start":1583,"line_end":1583,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":867},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":114784,"byte_end":114806,"line_start":1641,"line_end":1641,"column_start":12,"column_end":34},"name":"MappedRwLockWriteGuard","qualname":"::rwlock::MappedRwLockWriteGuard","value":"MappedRwLockWriteGuard {  }","parent":null,"children":[{"krate":0,"index":871},{"krate":0,"index":872},{"krate":0,"index":873}],"decl_id":null,"docs":" An RAII write lock guard returned by `RwLockWriteGuard::map`, which can point to a\n subfield of the protected data.","sig":null,"attributes":[{"value":"/ An RAII write lock guard returned by `RwLockWriteGuard::map`, which can point to a","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":114324,"byte_end":114410,"line_start":1633,"line_end":1633,"column_start":1,"column_end":87}},{"value":"/ subfield of the protected data.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":114411,"byte_end":114446,"line_start":1634,"line_end":1634,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":114447,"byte_end":114450,"line_start":1635,"line_end":1635,"column_start":1,"column_end":4}},{"value":"/ The main difference between `MappedRwLockWriteGuard` and `RwLockWriteGuard` is that the","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":114451,"byte_end":114542,"line_start":1636,"line_end":1636,"column_start":1,"column_end":92}},{"value":"/ former doesn't support temporarily unlocking and re-locking, since that","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":114543,"byte_end":114618,"line_start":1637,"line_end":1637,"column_start":1,"column_end":76}},{"value":"/ could introduce soundness issues if the locked object is modified by another","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":114619,"byte_end":114699,"line_start":1638,"line_end":1638,"column_start":1,"column_end":81}},{"value":"/ thread.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":114700,"byte_end":114711,"line_start":1639,"line_end":1639,"column_start":1,"column_end":12}},{"value":"must_use = \"if unused the RwLock will immediately unlock\"","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":114712,"byte_end":114772,"line_start":1640,"line_end":1640,"column_start":1,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":886},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":115672,"byte_end":115675,"line_start":1666,"line_end":1666,"column_start":12,"column_end":15},"name":"map","qualname":"<MappedRwLockWriteGuard>::map","value":"pub fn map<U: ?Sized, F>(Self, F) -> MappedRwLockWriteGuard where\nF: FnOnce(&mut T) -> &mut U","parent":null,"children":[],"decl_id":null,"docs":" Make a new `MappedRwLockWriteGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"/ Make a new `MappedRwLockWriteGuard` for a component of the locked data.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":115238,"byte_end":115313,"line_start":1657,"line_end":1657,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":115318,"byte_end":115321,"line_start":1658,"line_end":1658,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `MappedRwLockWriteGuard` passed","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":115326,"byte_end":115395,"line_start":1659,"line_end":1659,"column_start":5,"column_end":74}},{"value":"/ in already locked the data.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":115400,"byte_end":115431,"line_start":1660,"line_end":1660,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":115436,"byte_end":115439,"line_start":1661,"line_end":1661,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":115444,"byte_end":115495,"line_start":1662,"line_end":1662,"column_start":5,"column_end":56}},{"value":"/ used as `MappedRwLockWriteGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":115500,"byte_end":115588,"line_start":1663,"line_end":1663,"column_start":5,"column_end":93}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":115593,"byte_end":115646,"line_start":1664,"line_end":1664,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":115651,"byte_end":115660,"line_start":1665,"line_end":1665,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":889},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":116527,"byte_end":116534,"line_start":1690,"line_end":1690,"column_start":12,"column_end":19},"name":"try_map","qualname":"<MappedRwLockWriteGuard>::try_map","value":"pub fn try_map<U: ?Sized, F>(Self, F) -> Result<MappedRwLockWriteGuard, Self>\nwhere F: FnOnce(&mut T) -> Option<&mut U>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make  a new `MappedRwLockWriteGuard` for a component of the\n locked data. The original guard is return if the closure returns `None`.","sig":null,"attributes":[{"value":"/ Attempts to make  a new `MappedRwLockWriteGuard` for a component of the","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":116012,"byte_end":116087,"line_start":1680,"line_end":1680,"column_start":5,"column_end":80}},{"value":"/ locked data. The original guard is return if the closure returns `None`.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":116092,"byte_end":116168,"line_start":1681,"line_end":1681,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":116173,"byte_end":116176,"line_start":1682,"line_end":1682,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `MappedRwLockWriteGuard` passed","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":116181,"byte_end":116250,"line_start":1683,"line_end":1683,"column_start":5,"column_end":74}},{"value":"/ in already locked the data.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":116255,"byte_end":116286,"line_start":1684,"line_end":1684,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":116291,"byte_end":116294,"line_start":1685,"line_end":1685,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":116299,"byte_end":116350,"line_start":1686,"line_end":1686,"column_start":5,"column_end":56}},{"value":"/ used as `MappedRwLockWriteGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":116355,"byte_end":116443,"line_start":1687,"line_end":1687,"column_start":5,"column_end":93}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":116448,"byte_end":116501,"line_start":1688,"line_end":1688,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":116506,"byte_end":116515,"line_start":1689,"line_end":1689,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":896},"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":117875,"byte_end":117886,"line_start":1722,"line_end":1722,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<MappedRwLockWriteGuard>::unlock_fair","value":"pub fn unlock_fair(Self)","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the `RwLock` using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Unlocks the `RwLock` using a fair unlock protocol.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":117067,"byte_end":117121,"line_start":1709,"line_end":1709,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":117126,"byte_end":117129,"line_start":1710,"line_end":1710,"column_start":5,"column_end":8}},{"value":"/ By default, `RwLock` is unfair and allow the current thread to re-lock","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":117134,"byte_end":117208,"line_start":1711,"line_end":1711,"column_start":5,"column_end":79}},{"value":"/ the `RwLock` before another has the chance to acquire the lock, even if","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":117213,"byte_end":117288,"line_start":1712,"line_end":1712,"column_start":5,"column_end":80}},{"value":"/ that thread has been blocked on the `RwLock` for a long time. This is","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":117293,"byte_end":117366,"line_start":1713,"line_end":1713,"column_start":5,"column_end":78}},{"value":"/ the default because it allows much higher throughput as it avoids","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":117371,"byte_end":117440,"line_start":1714,"line_end":1714,"column_start":5,"column_end":74}},{"value":"/ forcing a context switch on every `RwLock` unlock. This can result in one","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":117445,"byte_end":117522,"line_start":1715,"line_end":1715,"column_start":5,"column_end":82}},{"value":"/ thread acquiring a `RwLock` many more times than other threads.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":117527,"byte_end":117594,"line_start":1716,"line_end":1716,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":117599,"byte_end":117602,"line_start":1717,"line_end":1717,"column_start":5,"column_end":8}},{"value":"/ However in some cases it can be beneficial to ensure fairness by forcing","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":117607,"byte_end":117683,"line_start":1718,"line_end":1718,"column_start":5,"column_end":81}},{"value":"/ the lock to pass on to a waiting thread if there is one. This is done by","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":117688,"byte_end":117764,"line_start":1719,"line_end":1719,"column_start":5,"column_end":81}},{"value":"/ using this method instead of dropping the `MappedRwLockWriteGuard` normally.","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":117769,"byte_end":117849,"line_start":1720,"line_end":1720,"column_start":5,"column_end":85}},{"value":"inline","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":117854,"byte_end":117863,"line_start":1721,"line_end":1721,"column_start":5,"column_end":14}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/lib.rs","byte_start":3946,"byte_end":3957,"line_start":102,"line_end":102,"column_start":22,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":9267,"byte_end":9272,"line_start":140,"line_end":140,"column_start":60,"column_end":65},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":9341,"byte_end":9346,"line_start":141,"line_end":141,"column_start":60,"column_end":65},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":9378,"byte_end":9383,"line_start":143,"line_end":143,"column_start":22,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":61},{"krate":0,"index":62}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":10061,"byte_end":10066,"line_start":171,"line_end":171,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":66}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":10433,"byte_end":10438,"line_start":184,"line_end":184,"column_start":30,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":70},{"krate":0,"index":71},{"krate":0,"index":72},{"krate":0,"index":73},{"krate":0,"index":74},{"krate":0,"index":75},{"krate":0,"index":76},{"krate":0,"index":77}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":14021,"byte_end":14026,"line_start":291,"line_end":291,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":81}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":14678,"byte_end":14683,"line_start":309,"line_end":309,"column_start":35,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":85},{"krate":0,"index":86}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":15884,"byte_end":15889,"line_start":341,"line_end":341,"column_start":52,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":90}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":16027,"byte_end":16032,"line_start":348,"line_end":348,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":94}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":16178,"byte_end":16183,"line_start":355,"line_end":355,"column_start":58,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":98}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":16472,"byte_end":16489,"line_start":361,"line_end":361,"column_start":37,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":102}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":17982,"byte_end":17992,"line_start":415,"line_end":415,"column_start":74,"column_end":84},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":18050,"byte_end":18060,"line_start":417,"line_end":417,"column_start":44,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":117},{"krate":0,"index":118},{"krate":0,"index":121},{"krate":0,"index":124}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":20442,"byte_end":20452,"line_start":491,"line_end":491,"column_start":48,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":131},{"krate":0,"index":132},{"krate":0,"index":135}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":22484,"byte_end":22494,"line_start":546,"line_end":546,"column_start":54,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":140},{"krate":0,"index":141}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":22678,"byte_end":22688,"line_start":554,"line_end":554,"column_start":57,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":146}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":22863,"byte_end":22873,"line_start":561,"line_end":561,"column_start":53,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":151}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":23124,"byte_end":23134,"line_start":571,"line_end":571,"column_start":72,"column_end":82},"value":"","parent":null,"children":[{"krate":0,"index":156}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":23330,"byte_end":23340,"line_start":577,"line_end":577,"column_start":76,"column_end":86},"value":"","parent":null,"children":[{"krate":0,"index":161}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":24206,"byte_end":24222,"line_start":601,"line_end":601,"column_start":9,"column_end":25},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":24303,"byte_end":24319,"line_start":604,"line_end":604,"column_start":67,"column_end":83},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Inherent","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":24409,"byte_end":24425,"line_start":609,"line_end":609,"column_start":44,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":181},{"krate":0,"index":184}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Inherent","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":26179,"byte_end":26195,"line_start":661,"line_end":661,"column_start":48,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":191}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":27217,"byte_end":27233,"line_start":684,"line_end":684,"column_start":54,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":196},{"krate":0,"index":197}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":27405,"byte_end":27421,"line_start":692,"line_end":692,"column_start":57,"column_end":73},"value":"","parent":null,"children":[{"krate":0,"index":202}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":27584,"byte_end":27600,"line_start":699,"line_end":699,"column_start":53,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":207}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":27851,"byte_end":27867,"line_start":709,"line_end":709,"column_start":72,"column_end":88},"value":"","parent":null,"children":[{"krate":0,"index":212}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":28067,"byte_end":28083,"line_start":716,"line_end":716,"column_start":9,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":217}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":30639,"byte_end":30656,"line_start":67,"line_end":67,"column_start":65,"column_end":82},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":30730,"byte_end":30747,"line_start":68,"line_end":68,"column_start":65,"column_end":82},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Inherent","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":30792,"byte_end":30809,"line_start":70,"line_end":70,"column_start":35,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":283},{"krate":0,"index":284},{"krate":0,"index":286},{"krate":0,"index":288},{"krate":0,"index":290},{"krate":0,"index":291}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Inherent","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":32940,"byte_end":32957,"line_start":140,"line_end":140,"column_start":39,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":295},{"krate":0,"index":296}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Inherent","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":34263,"byte_end":34280,"line_start":178,"line_end":178,"column_start":40,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":300},{"krate":0,"index":302}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":35379,"byte_end":35393,"line_start":209,"line_end":209,"column_start":9,"column_end":23},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":35493,"byte_end":35507,"line_start":213,"line_end":213,"column_start":9,"column_end":23},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Inherent","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":35559,"byte_end":35573,"line_start":217,"line_end":217,"column_start":38,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":322},{"krate":0,"index":323}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Inherent","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":36687,"byte_end":36701,"line_start":255,"line_end":255,"column_start":15,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":328}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Inherent","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":37371,"byte_end":37385,"line_start":275,"line_end":275,"column_start":46,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":333},{"krate":0,"index":334},{"krate":0,"index":335},{"krate":0,"index":336},{"krate":0,"index":337},{"krate":0,"index":338},{"krate":0,"index":339},{"krate":0,"index":340}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Inherent","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":41204,"byte_end":41218,"line_start":384,"line_end":384,"column_start":50,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":345}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Inherent","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":41907,"byte_end":41921,"line_start":402,"line_end":402,"column_start":51,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":350},{"krate":0,"index":351}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":43165,"byte_end":43179,"line_start":434,"line_end":434,"column_start":68,"column_end":82},"value":"","parent":null,"children":[{"krate":0,"index":356}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":43357,"byte_end":43371,"line_start":441,"line_end":441,"column_start":50,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":361}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":43557,"byte_end":43571,"line_start":448,"line_end":448,"column_start":74,"column_end":88},"value":"","parent":null,"children":[{"krate":0,"index":366}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":43923,"byte_end":43940,"line_start":457,"line_end":457,"column_start":37,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":370}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":45588,"byte_end":45607,"line_start":514,"line_end":514,"column_start":9,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Inherent","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":45690,"byte_end":45709,"line_start":518,"line_end":518,"column_start":65,"column_end":84},"value":"","parent":null,"children":[{"krate":0,"index":388},{"krate":0,"index":389},{"krate":0,"index":392},{"krate":0,"index":395}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Inherent","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":48267,"byte_end":48286,"line_start":596,"line_end":596,"column_start":5,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":403},{"krate":0,"index":404},{"krate":0,"index":407}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":50381,"byte_end":50400,"line_start":653,"line_end":653,"column_start":9,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":413},{"krate":0,"index":414}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":50610,"byte_end":50629,"line_start":663,"line_end":663,"column_start":9,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":420}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":50919,"byte_end":50938,"line_start":675,"line_end":675,"column_start":9,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":426}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":51162,"byte_end":51181,"line_start":683,"line_end":683,"column_start":9,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":432}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":52197,"byte_end":52222,"line_start":711,"line_end":711,"column_start":9,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Inherent","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":52309,"byte_end":52334,"line_start":716,"line_end":716,"column_start":5,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":451},{"krate":0,"index":454}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Inherent","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":54206,"byte_end":54231,"line_start":773,"line_end":773,"column_start":5,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":462}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":55304,"byte_end":55329,"line_start":798,"line_end":798,"column_start":9,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":468},{"krate":0,"index":469}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":55525,"byte_end":55550,"line_start":808,"line_end":808,"column_start":9,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":475}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":55838,"byte_end":55863,"line_start":820,"line_end":820,"column_start":9,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":481}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":56087,"byte_end":56112,"line_start":828,"line_end":828,"column_start":9,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":487}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":69189,"byte_end":69195,"line_start":345,"line_end":345,"column_start":61,"column_end":67},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":69272,"byte_end":69278,"line_start":346,"line_end":346,"column_start":68,"column_end":74},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Inherent","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":69311,"byte_end":69317,"line_start":348,"line_end":348,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":570},{"krate":0,"index":571}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Inherent","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":70049,"byte_end":70055,"line_start":377,"line_end":377,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":575}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Inherent","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":70479,"byte_end":70485,"line_start":392,"line_end":392,"column_start":31,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":579},{"krate":0,"index":580},{"krate":0,"index":581},{"krate":0,"index":582},{"krate":0,"index":583},{"krate":0,"index":584},{"krate":0,"index":585},{"krate":0,"index":586},{"krate":0,"index":587},{"krate":0,"index":588},{"krate":0,"index":589},{"krate":0,"index":590}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Inherent","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":76365,"byte_end":76371,"line_start":562,"line_end":562,"column_start":35,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":594},{"krate":0,"index":595}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Inherent","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":77710,"byte_end":77716,"line_start":596,"line_end":596,"column_start":36,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":599},{"krate":0,"index":600},{"krate":0,"index":601},{"krate":0,"index":602}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Inherent","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":80298,"byte_end":80304,"line_start":662,"line_end":662,"column_start":40,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":606},{"krate":0,"index":607}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Inherent","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":82121,"byte_end":82127,"line_start":706,"line_end":706,"column_start":45,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":611},{"krate":0,"index":612}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Inherent","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":83710,"byte_end":83716,"line_start":750,"line_end":750,"column_start":38,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":616},{"krate":0,"index":617},{"krate":0,"index":618}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Inherent","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":85357,"byte_end":85363,"line_start":796,"line_end":796,"column_start":43,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":622},{"krate":0,"index":623}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":86795,"byte_end":86801,"line_start":836,"line_end":836,"column_start":53,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":627}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":86942,"byte_end":86948,"line_start":843,"line_end":843,"column_start":35,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":631}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":87097,"byte_end":87103,"line_start":850,"line_end":850,"column_start":59,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":635}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":87393,"byte_end":87410,"line_start":856,"line_end":856,"column_start":37,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":639}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Inherent","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":88072,"byte_end":88087,"line_start":878,"line_end":878,"column_start":45,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":650},{"krate":0,"index":651},{"krate":0,"index":654},{"krate":0,"index":657}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Inherent","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":90604,"byte_end":90619,"line_start":954,"line_end":954,"column_start":49,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":664},{"krate":0,"index":665},{"krate":0,"index":668}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":92743,"byte_end":92758,"line_start":1009,"line_end":1009,"column_start":55,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":673},{"krate":0,"index":674}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":92940,"byte_end":92955,"line_start":1017,"line_end":1017,"column_start":54,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":679}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":93226,"byte_end":93241,"line_start":1027,"line_end":1027,"column_start":73,"column_end":88},"value":"","parent":null,"children":[{"krate":0,"index":684}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":93442,"byte_end":93457,"line_start":1034,"line_end":1034,"column_start":9,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":689}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Inherent","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":94037,"byte_end":94053,"line_start":1052,"line_end":1052,"column_start":45,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":700},{"krate":0,"index":701},{"krate":0,"index":704},{"krate":0,"index":707}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Inherent","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":96550,"byte_end":96566,"line_start":1126,"line_end":1126,"column_start":54,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":714}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Inherent","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":97324,"byte_end":97340,"line_start":1147,"line_end":1147,"column_start":61,"column_end":77},"value":"","parent":null,"children":[{"krate":0,"index":719}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Inherent","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":98146,"byte_end":98162,"line_start":1168,"line_end":1168,"column_start":49,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":724},{"krate":0,"index":725},{"krate":0,"index":728}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":100315,"byte_end":100331,"line_start":1223,"line_end":1223,"column_start":55,"column_end":71},"value":"","parent":null,"children":[{"krate":0,"index":733},{"krate":0,"index":734}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":100517,"byte_end":100533,"line_start":1231,"line_end":1231,"column_start":58,"column_end":74},"value":"","parent":null,"children":[{"krate":0,"index":739}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":100710,"byte_end":100726,"line_start":1238,"line_end":1238,"column_start":54,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":744}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":101005,"byte_end":101021,"line_start":1248,"line_end":1248,"column_start":73,"column_end":89},"value":"","parent":null,"children":[{"krate":0,"index":749}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":101222,"byte_end":101238,"line_start":1255,"line_end":1255,"column_start":9,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":754}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":101865,"byte_end":101890,"line_start":1274,"line_end":1274,"column_start":9,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Inherent","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":101957,"byte_end":101982,"line_start":1278,"line_end":1278,"column_start":52,"column_end":77},"value":"","parent":null,"children":[{"krate":0,"index":769},{"krate":0,"index":770},{"krate":0,"index":773},{"krate":0,"index":774}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Inherent","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":103866,"byte_end":103891,"line_start":1334,"line_end":1334,"column_start":56,"column_end":81},"value":"","parent":null,"children":[{"krate":0,"index":779},{"krate":0,"index":780},{"krate":0,"index":783}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Inherent","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":106103,"byte_end":106128,"line_start":1389,"line_end":1389,"column_start":61,"column_end":86},"value":"","parent":null,"children":[{"krate":0,"index":788}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Inherent","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":106934,"byte_end":106959,"line_start":1411,"line_end":1411,"column_start":57,"column_end":82},"value":"","parent":null,"children":[{"krate":0,"index":793},{"krate":0,"index":794}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":108540,"byte_end":108565,"line_start":1458,"line_end":1458,"column_start":62,"column_end":87},"value":"","parent":null,"children":[{"krate":0,"index":799},{"krate":0,"index":800}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":108754,"byte_end":108779,"line_start":1466,"line_end":1466,"column_start":61,"column_end":86},"value":"","parent":null,"children":[{"krate":0,"index":805}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":109080,"byte_end":109105,"line_start":1477,"line_end":1477,"column_start":9,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":810}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":109313,"byte_end":109338,"line_start":1485,"line_end":1485,"column_start":9,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":815}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":110246,"byte_end":110267,"line_start":1512,"line_end":1512,"column_start":68,"column_end":89},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":110348,"byte_end":110369,"line_start":1513,"line_end":1513,"column_start":68,"column_end":89},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Inherent","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":110460,"byte_end":110481,"line_start":1518,"line_end":1518,"column_start":45,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":835},{"krate":0,"index":838}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Inherent","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":112254,"byte_end":112275,"line_start":1570,"line_end":1570,"column_start":49,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":845}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":113347,"byte_end":113368,"line_start":1593,"line_end":1593,"column_start":55,"column_end":76},"value":"","parent":null,"children":[{"krate":0,"index":850},{"krate":0,"index":851}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":113537,"byte_end":113558,"line_start":1601,"line_end":1601,"column_start":54,"column_end":75},"value":"","parent":null,"children":[{"krate":0,"index":856}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":113831,"byte_end":113852,"line_start":1612,"line_end":1612,"column_start":9,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":861}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":114053,"byte_end":114074,"line_start":1620,"line_end":1620,"column_start":9,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":866}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":114982,"byte_end":115004,"line_start":1648,"line_end":1648,"column_start":9,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":115086,"byte_end":115108,"line_start":1651,"line_end":1651,"column_start":68,"column_end":90},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Inherent","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":115199,"byte_end":115221,"line_start":1656,"line_end":1656,"column_start":45,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":886},{"krate":0,"index":889}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Inherent","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":117028,"byte_end":117050,"line_start":1708,"line_end":1708,"column_start":49,"column_end":71},"value":"","parent":null,"children":[{"krate":0,"index":896}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":118131,"byte_end":118153,"line_start":1731,"line_end":1731,"column_start":55,"column_end":77},"value":"","parent":null,"children":[{"krate":0,"index":901},{"krate":0,"index":902}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":118326,"byte_end":118348,"line_start":1739,"line_end":1739,"column_start":58,"column_end":80},"value":"","parent":null,"children":[{"krate":0,"index":907}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":118512,"byte_end":118534,"line_start":1746,"line_end":1746,"column_start":54,"column_end":76},"value":"","parent":null,"children":[{"krate":0,"index":912}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":118815,"byte_end":118837,"line_start":1757,"line_end":1757,"column_start":9,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":917}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Direct","span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":119038,"byte_end":119060,"line_start":1765,"line_end":1765,"column_start":9,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":922}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/lib.rs","byte_start":3946,"byte_end":3957,"line_start":102,"line_end":102,"column_start":22,"column_end":33},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":8},"to":{"krate":1,"index":2837}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":7070,"byte_end":7078,"line_start":80,"line_end":80,"column_start":32,"column_end":40},"kind":"SuperTrait","from":{"krate":0,"index":32},"to":{"krate":0,"index":39}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":8232,"byte_end":8240,"line_start":113,"line_end":113,"column_start":33,"column_end":41},"kind":"SuperTrait","from":{"krate":0,"index":32},"to":{"krate":0,"index":42}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":9267,"byte_end":9272,"line_start":140,"line_end":140,"column_start":60,"column_end":65},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":47},"to":{"krate":1,"index":2825}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":9341,"byte_end":9346,"line_start":141,"line_end":141,"column_start":60,"column_end":65},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":47},"to":{"krate":1,"index":2837}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":9378,"byte_end":9383,"line_start":143,"line_end":143,"column_start":22,"column_end":27},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":47},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":10061,"byte_end":10066,"line_start":171,"line_end":171,"column_start":12,"column_end":17},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":47},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":10433,"byte_end":10438,"line_start":184,"line_end":184,"column_start":30,"column_end":35},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":47},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":14021,"byte_end":14026,"line_start":291,"line_end":291,"column_start":34,"column_end":39},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":47},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":14678,"byte_end":14683,"line_start":309,"line_end":309,"column_start":35,"column_end":40},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":47},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":15884,"byte_end":15889,"line_start":341,"line_end":341,"column_start":52,"column_end":57},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":47},"to":{"krate":1,"index":2803}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":16027,"byte_end":16032,"line_start":348,"line_end":348,"column_start":34,"column_end":39},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":47},"to":{"krate":1,"index":2731}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":16178,"byte_end":16183,"line_start":355,"line_end":355,"column_start":58,"column_end":63},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":47},"to":{"krate":1,"index":8829}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":16472,"byte_end":16489,"line_start":361,"line_end":361,"column_start":37,"column_end":54},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":99},"to":{"krate":1,"index":8829}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":17982,"byte_end":17992,"line_start":415,"line_end":415,"column_start":74,"column_end":84},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":103},"to":{"krate":1,"index":2837}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":18050,"byte_end":18060,"line_start":417,"line_end":417,"column_start":44,"column_end":54},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":103},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":20442,"byte_end":20452,"line_start":491,"line_end":491,"column_start":48,"column_end":58},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":103},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":22484,"byte_end":22494,"line_start":546,"line_end":546,"column_start":54,"column_end":64},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":103},"to":{"krate":1,"index":3047}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":22678,"byte_end":22688,"line_start":554,"line_end":554,"column_start":57,"column_end":67},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":103},"to":{"krate":1,"index":3060}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":22863,"byte_end":22873,"line_start":561,"line_end":561,"column_start":53,"column_end":63},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":103},"to":{"krate":1,"index":3071}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":23124,"byte_end":23134,"line_start":571,"line_end":571,"column_start":72,"column_end":82},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":103},"to":{"krate":1,"index":8829}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":23330,"byte_end":23340,"line_start":577,"line_end":577,"column_start":76,"column_end":86},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":103},"to":{"krate":1,"index":8836}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":24206,"byte_end":24222,"line_start":601,"line_end":601,"column_start":9,"column_end":25},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":162},"to":{"krate":1,"index":2837}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":24303,"byte_end":24319,"line_start":604,"line_end":604,"column_start":67,"column_end":83},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":162},"to":{"krate":1,"index":2825}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":24409,"byte_end":24425,"line_start":609,"line_end":609,"column_start":44,"column_end":60},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":162},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":26179,"byte_end":26195,"line_start":661,"line_end":661,"column_start":48,"column_end":64},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":162},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":27217,"byte_end":27233,"line_start":684,"line_end":684,"column_start":54,"column_end":70},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":162},"to":{"krate":1,"index":3047}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":27405,"byte_end":27421,"line_start":692,"line_end":692,"column_start":57,"column_end":73},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":162},"to":{"krate":1,"index":3060}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":27584,"byte_end":27600,"line_start":699,"line_end":699,"column_start":53,"column_end":69},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":162},"to":{"krate":1,"index":3071}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":27851,"byte_end":27867,"line_start":709,"line_end":709,"column_start":72,"column_end":88},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":162},"to":{"krate":1,"index":8829}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/mutex.rs","byte_start":28067,"byte_end":28083,"line_start":716,"line_end":716,"column_start":9,"column_end":25},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":162},"to":{"krate":1,"index":8836}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":30639,"byte_end":30656,"line_start":67,"line_end":67,"column_start":65,"column_end":82},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":267},"to":{"krate":1,"index":2825}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":30730,"byte_end":30747,"line_start":68,"line_end":68,"column_start":65,"column_end":82},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":267},"to":{"krate":1,"index":2837}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":30792,"byte_end":30809,"line_start":70,"line_end":70,"column_start":35,"column_end":52},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":267},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":32940,"byte_end":32957,"line_start":140,"line_end":140,"column_start":39,"column_end":56},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":267},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":34263,"byte_end":34280,"line_start":178,"line_end":178,"column_start":40,"column_end":57},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":267},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":35379,"byte_end":35393,"line_start":209,"line_end":209,"column_start":9,"column_end":23},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":304},"to":{"krate":1,"index":2825}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":35493,"byte_end":35507,"line_start":213,"line_end":213,"column_start":9,"column_end":23},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":304},"to":{"krate":1,"index":2837}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":35559,"byte_end":35573,"line_start":217,"line_end":217,"column_start":38,"column_end":52},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":304},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":36687,"byte_end":36701,"line_start":255,"line_end":255,"column_start":15,"column_end":29},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":304},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":37371,"byte_end":37385,"line_start":275,"line_end":275,"column_start":46,"column_end":60},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":304},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":41204,"byte_end":41218,"line_start":384,"line_end":384,"column_start":50,"column_end":64},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":304},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":41907,"byte_end":41921,"line_start":402,"line_end":402,"column_start":51,"column_end":65},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":304},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":43165,"byte_end":43179,"line_start":434,"line_end":434,"column_start":68,"column_end":82},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":304},"to":{"krate":1,"index":2803}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":43357,"byte_end":43371,"line_start":441,"line_end":441,"column_start":50,"column_end":64},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":304},"to":{"krate":1,"index":2731}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":43557,"byte_end":43571,"line_start":448,"line_end":448,"column_start":74,"column_end":88},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":304},"to":{"krate":1,"index":8829}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":43923,"byte_end":43940,"line_start":457,"line_end":457,"column_start":37,"column_end":54},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":367},"to":{"krate":1,"index":8829}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":45588,"byte_end":45607,"line_start":514,"line_end":514,"column_start":9,"column_end":28},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":371},"to":{"krate":1,"index":2837}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":45690,"byte_end":45709,"line_start":518,"line_end":518,"column_start":65,"column_end":84},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":371},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":48267,"byte_end":48286,"line_start":596,"line_end":596,"column_start":5,"column_end":24},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":371},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":50381,"byte_end":50400,"line_start":653,"line_end":653,"column_start":9,"column_end":28},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":371},"to":{"krate":1,"index":3047}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":50610,"byte_end":50629,"line_start":663,"line_end":663,"column_start":9,"column_end":28},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":371},"to":{"krate":1,"index":3071}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":50919,"byte_end":50938,"line_start":675,"line_end":675,"column_start":9,"column_end":28},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":371},"to":{"krate":1,"index":8829}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":51162,"byte_end":51181,"line_start":683,"line_end":683,"column_start":9,"column_end":28},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":371},"to":{"krate":1,"index":8836}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":52197,"byte_end":52222,"line_start":711,"line_end":711,"column_start":9,"column_end":34},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":433},"to":{"krate":1,"index":2837}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":52309,"byte_end":52334,"line_start":716,"line_end":716,"column_start":5,"column_end":30},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":433},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":54206,"byte_end":54231,"line_start":773,"line_end":773,"column_start":5,"column_end":30},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":433},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":55304,"byte_end":55329,"line_start":798,"line_end":798,"column_start":9,"column_end":34},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":433},"to":{"krate":1,"index":3047}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":55525,"byte_end":55550,"line_start":808,"line_end":808,"column_start":9,"column_end":34},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":433},"to":{"krate":1,"index":3071}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":55838,"byte_end":55863,"line_start":820,"line_end":820,"column_start":9,"column_end":34},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":433},"to":{"krate":1,"index":8829}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/remutex.rs","byte_start":56087,"byte_end":56112,"line_start":828,"line_end":828,"column_start":9,"column_end":34},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":433},"to":{"krate":1,"index":8836}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":59552,"byte_end":59561,"line_start":88,"line_end":88,"column_start":33,"column_end":42},"kind":"SuperTrait","from":{"krate":0,"index":509},"to":{"krate":0,"index":519}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":61237,"byte_end":61246,"line_start":134,"line_end":134,"column_start":38,"column_end":47},"kind":"SuperTrait","from":{"krate":0,"index":509},"to":{"krate":0,"index":524}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":61801,"byte_end":61810,"line_start":148,"line_end":148,"column_start":34,"column_end":43},"kind":"SuperTrait","from":{"krate":0,"index":509},"to":{"krate":0,"index":526}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":62930,"byte_end":62939,"line_start":175,"line_end":175,"column_start":38,"column_end":47},"kind":"SuperTrait","from":{"krate":0,"index":509},"to":{"krate":0,"index":533}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":63329,"byte_end":63347,"line_start":184,"line_end":184,"column_start":43,"column_end":61},"kind":"SuperTrait","from":{"krate":0,"index":533},"to":{"krate":0,"index":536}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":63350,"byte_end":63364,"line_start":184,"line_end":184,"column_start":64,"column_end":78},"kind":"SuperTrait","from":{"krate":0,"index":526},"to":{"krate":0,"index":536}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":64132,"byte_end":64141,"line_start":200,"line_end":200,"column_start":36,"column_end":45},"kind":"SuperTrait","from":{"krate":0,"index":509},"to":{"krate":0,"index":539}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":65190,"byte_end":65206,"line_start":232,"line_end":232,"column_start":40,"column_end":56},"kind":"SuperTrait","from":{"krate":0,"index":539},"to":{"krate":0,"index":545}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":65209,"byte_end":65222,"line_start":232,"line_end":232,"column_start":59,"column_end":72},"kind":"SuperTrait","from":{"krate":0,"index":519},"to":{"krate":0,"index":545}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":66151,"byte_end":66167,"line_start":257,"line_end":257,"column_start":45,"column_end":61},"kind":"SuperTrait","from":{"krate":0,"index":539},"to":{"krate":0,"index":548}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":66170,"byte_end":66188,"line_start":257,"line_end":257,"column_start":64,"column_end":82},"kind":"SuperTrait","from":{"krate":0,"index":524},"to":{"krate":0,"index":548}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":66788,"byte_end":66804,"line_start":275,"line_end":275,"column_start":41,"column_end":57},"kind":"SuperTrait","from":{"krate":0,"index":539},"to":{"krate":0,"index":551}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":66807,"byte_end":66821,"line_start":275,"line_end":275,"column_start":60,"column_end":74},"kind":"SuperTrait","from":{"krate":0,"index":526},"to":{"krate":0,"index":551}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":69189,"byte_end":69195,"line_start":345,"line_end":345,"column_start":61,"column_end":67},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":556},"to":{"krate":1,"index":2825}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":69272,"byte_end":69278,"line_start":346,"line_end":346,"column_start":68,"column_end":74},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":556},"to":{"krate":1,"index":2837}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":69311,"byte_end":69317,"line_start":348,"line_end":348,"column_start":23,"column_end":29},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":556},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":70049,"byte_end":70055,"line_start":377,"line_end":377,"column_start":12,"column_end":18},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":556},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":70479,"byte_end":70485,"line_start":392,"line_end":392,"column_start":31,"column_end":37},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":556},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":76365,"byte_end":76371,"line_start":562,"line_end":562,"column_start":35,"column_end":41},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":556},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":77710,"byte_end":77716,"line_start":596,"line_end":596,"column_start":36,"column_end":42},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":556},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":80298,"byte_end":80304,"line_start":662,"line_end":662,"column_start":40,"column_end":46},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":556},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":82121,"byte_end":82127,"line_start":706,"line_end":706,"column_start":45,"column_end":51},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":556},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":83710,"byte_end":83716,"line_start":750,"line_end":750,"column_start":38,"column_end":44},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":556},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":85357,"byte_end":85363,"line_start":796,"line_end":796,"column_start":43,"column_end":49},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":556},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":86795,"byte_end":86801,"line_start":836,"line_end":836,"column_start":53,"column_end":59},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":556},"to":{"krate":1,"index":2803}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":86942,"byte_end":86948,"line_start":843,"line_end":843,"column_start":35,"column_end":41},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":556},"to":{"krate":1,"index":2731}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":87097,"byte_end":87103,"line_start":850,"line_end":850,"column_start":59,"column_end":65},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":556},"to":{"krate":1,"index":8829}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":87393,"byte_end":87410,"line_start":856,"line_end":856,"column_start":37,"column_end":54},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":636},"to":{"krate":1,"index":8829}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":88072,"byte_end":88087,"line_start":878,"line_end":878,"column_start":45,"column_end":60},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":640},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":90604,"byte_end":90619,"line_start":954,"line_end":954,"column_start":49,"column_end":64},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":640},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":92743,"byte_end":92758,"line_start":1009,"line_end":1009,"column_start":55,"column_end":70},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":640},"to":{"krate":1,"index":3047}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":92940,"byte_end":92955,"line_start":1017,"line_end":1017,"column_start":54,"column_end":69},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":640},"to":{"krate":1,"index":3071}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":93226,"byte_end":93241,"line_start":1027,"line_end":1027,"column_start":73,"column_end":88},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":640},"to":{"krate":1,"index":8829}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":93442,"byte_end":93457,"line_start":1034,"line_end":1034,"column_start":9,"column_end":24},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":640},"to":{"krate":1,"index":8836}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":94037,"byte_end":94053,"line_start":1052,"line_end":1052,"column_start":45,"column_end":61},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":690},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":96550,"byte_end":96566,"line_start":1126,"line_end":1126,"column_start":54,"column_end":70},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":690},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":97324,"byte_end":97340,"line_start":1147,"line_end":1147,"column_start":61,"column_end":77},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":690},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":98146,"byte_end":98162,"line_start":1168,"line_end":1168,"column_start":49,"column_end":65},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":690},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":100315,"byte_end":100331,"line_start":1223,"line_end":1223,"column_start":55,"column_end":71},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":690},"to":{"krate":1,"index":3047}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":100517,"byte_end":100533,"line_start":1231,"line_end":1231,"column_start":58,"column_end":74},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":690},"to":{"krate":1,"index":3060}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":100710,"byte_end":100726,"line_start":1238,"line_end":1238,"column_start":54,"column_end":70},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":690},"to":{"krate":1,"index":3071}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":101005,"byte_end":101021,"line_start":1248,"line_end":1248,"column_start":73,"column_end":89},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":690},"to":{"krate":1,"index":8829}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":101222,"byte_end":101238,"line_start":1255,"line_end":1255,"column_start":9,"column_end":25},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":690},"to":{"krate":1,"index":8836}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":101865,"byte_end":101890,"line_start":1274,"line_end":1274,"column_start":9,"column_end":34},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":755},"to":{"krate":1,"index":2837}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":101957,"byte_end":101982,"line_start":1278,"line_end":1278,"column_start":52,"column_end":77},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":755},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":103866,"byte_end":103891,"line_start":1334,"line_end":1334,"column_start":56,"column_end":81},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":755},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":106103,"byte_end":106128,"line_start":1389,"line_end":1389,"column_start":61,"column_end":86},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":755},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":106934,"byte_end":106959,"line_start":1411,"line_end":1411,"column_start":57,"column_end":82},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":755},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":108540,"byte_end":108565,"line_start":1458,"line_end":1458,"column_start":62,"column_end":87},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":755},"to":{"krate":1,"index":3047}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":108754,"byte_end":108779,"line_start":1466,"line_end":1466,"column_start":61,"column_end":86},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":755},"to":{"krate":1,"index":3071}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":109080,"byte_end":109105,"line_start":1477,"line_end":1477,"column_start":9,"column_end":34},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":755},"to":{"krate":1,"index":8829}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":109313,"byte_end":109338,"line_start":1485,"line_end":1485,"column_start":9,"column_end":34},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":755},"to":{"krate":1,"index":8836}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":110246,"byte_end":110267,"line_start":1512,"line_end":1512,"column_start":68,"column_end":89},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":816},"to":{"krate":1,"index":2837}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":110348,"byte_end":110369,"line_start":1513,"line_end":1513,"column_start":68,"column_end":89},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":816},"to":{"krate":1,"index":2825}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":110460,"byte_end":110481,"line_start":1518,"line_end":1518,"column_start":45,"column_end":66},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":816},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":112254,"byte_end":112275,"line_start":1570,"line_end":1570,"column_start":49,"column_end":70},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":816},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":113347,"byte_end":113368,"line_start":1593,"line_end":1593,"column_start":55,"column_end":76},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":816},"to":{"krate":1,"index":3047}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":113537,"byte_end":113558,"line_start":1601,"line_end":1601,"column_start":54,"column_end":75},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":816},"to":{"krate":1,"index":3071}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":113831,"byte_end":113852,"line_start":1612,"line_end":1612,"column_start":9,"column_end":30},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":816},"to":{"krate":1,"index":8829}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":114053,"byte_end":114074,"line_start":1620,"line_end":1620,"column_start":9,"column_end":30},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":816},"to":{"krate":1,"index":8836}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":114982,"byte_end":115004,"line_start":1648,"line_end":1648,"column_start":9,"column_end":31},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":867},"to":{"krate":1,"index":2837}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":115086,"byte_end":115108,"line_start":1651,"line_end":1651,"column_start":68,"column_end":90},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":867},"to":{"krate":1,"index":2825}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":115199,"byte_end":115221,"line_start":1656,"line_end":1656,"column_start":45,"column_end":67},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":867},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":117028,"byte_end":117050,"line_start":1708,"line_end":1708,"column_start":49,"column_end":71},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":867},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":118131,"byte_end":118153,"line_start":1731,"line_end":1731,"column_start":55,"column_end":77},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":867},"to":{"krate":1,"index":3047}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":118326,"byte_end":118348,"line_start":1739,"line_end":1739,"column_start":58,"column_end":80},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":867},"to":{"krate":1,"index":3060}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":118512,"byte_end":118534,"line_start":1746,"line_end":1746,"column_start":54,"column_end":76},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":867},"to":{"krate":1,"index":3071}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":118815,"byte_end":118837,"line_start":1757,"line_end":1757,"column_start":9,"column_end":31},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":867},"to":{"krate":1,"index":8829}},{"span":{"file_name":"/home/mramirez/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.2/src/rwlock.rs","byte_start":119038,"byte_end":119060,"line_start":1765,"line_end":1765,"column_start":9,"column_end":31},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":867},"to":{"krate":1,"index":8836}}]}